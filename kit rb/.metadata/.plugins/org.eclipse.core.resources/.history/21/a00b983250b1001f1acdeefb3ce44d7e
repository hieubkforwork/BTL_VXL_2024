/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "input_processing.h"
#include "input_reading.h"
#include "timer.h"
#include "led_display.h"
#include "i2c-lcd.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void CLCD_Delay(uint16_t Time)
{
	HAL_Delay(Time);

}
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
	if(Mode == CLCD_COMMAND)
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
	}
	else if(Mode == CLCD_DATA)
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);
}
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
	uint8_t Data_H = Data >>4;
	uint8_t Data_L = Data;
	if(Mode == CLCD_COMMAND)
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
	}
	else if(Mode == CLCD_DATA)
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
	CLCD_Delay(1);
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
	CLCD_Delay(1);
}
//************************ High Level Function *****************************************//
void CLCD_8BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D0_PORT, uint16_t D0_PIN, GPIO_TypeDef* D1_PORT, uint16_t D1_PIN,
									GPIO_TypeDef* D2_PORT, uint16_t D2_PIN, GPIO_TypeDef* D3_PORT, uint16_t D3_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
	LCD->MODE = LCD_8BITMODE;
	LCD->COLUMS = Colum;
	LCD->ROWS = Row;
	LCD->RS_PORT = RS_PORT;
	LCD->RS_PIN = RS_PIN;
	LCD->EN_PORT = EN_PORT;
	LCD->EN_PIN = EN_PIN;
	LCD->D0_PORT = D0_PORT;
	LCD->D0_PIN = D0_PIN;
	LCD->D1_PORT = D1_PORT;
	LCD->D1_PIN = D1_PIN;
	LCD->D2_PORT = D2_PORT;
	LCD->D2_PIN = D2_PIN;
	LCD->D3_PORT = D3_PORT;
	LCD->D3_PIN = D3_PIN;
	LCD->D4_PORT = D4_PORT;
	LCD->D4_PIN = D4_PIN;
	LCD->D5_PORT = D5_PORT;
	LCD->D5_PIN = D5_PIN;
	LCD->D6_PORT = D6_PORT;
	LCD->D6_PIN = D6_PIN;
	LCD->D7_PORT = D7_PORT;
	LCD->D7_PIN = D7_PIN;
	CLCD_Delay(50);
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_8BITMODE|LCD_2LINE|LCD_5x8DOTS;
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;

	CLCD_Write8(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
	CLCD_Write8(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
	CLCD_Write8(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
	CLCD_Write8(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);

	CLCD_Write8(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
	CLCD_Write8(LCD, LCD_RETURNHOME,CLCD_COMMAND);
}

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
	LCD->MODE = LCD_4BITMODE;
	LCD->COLUMS = Colum;
	LCD->ROWS = Row;
	LCD->RS_PORT = RS_PORT;
	LCD->RS_PIN = RS_PIN;
	LCD->EN_PORT = EN_PORT;
	LCD->EN_PIN = EN_PIN;
	LCD->D4_PORT = D4_PORT;
	LCD->D4_PIN = D4_PIN;
	LCD->D5_PORT = D5_PORT;
	LCD->D5_PIN = D5_PIN;
	LCD->D6_PORT = D6_PORT;
	LCD->D6_PIN = D6_PIN;
	LCD->D7_PORT = D7_PORT;
	LCD->D7_PIN = D7_PIN;
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;

	CLCD_Delay(50);
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
	CLCD_Delay(5);
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
	CLCD_Delay(5);
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
	CLCD_Delay(5);

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
}
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{

	uint8_t DRAM_ADDRESS = 0x00;
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
	if(Xpos >= LCD->COLUMS)
	{
		Xpos = LCD->COLUMS - 1;
	}
	if(Ypos >= LCD->ROWS)
	{
		Ypos = LCD->ROWS -1;
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
	while(*String)CLCD_WriteChar(LCD, *String++);
}
void CLCD_Clear(CLCD_Name* LCD)
{
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
	}
	CLCD_Delay(5);
}
void CLCD_ReturnHome(CLCD_Name* LCD)
{
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD_RETURNHOME, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_RETURNHOME, CLCD_COMMAND);
	}
	CLCD_Delay(5);
}
void CLCD_CursorOn(CLCD_Name* LCD)
{
	LCD->DISPLAYCTRL |= LCD_CURSORON;
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
}
void CLCD_CursorOff(CLCD_Name* LCD)
{
	LCD->DISPLAYCTRL &= ~LCD_CURSORON;
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
}
void CLCD_BlinkOn(CLCD_Name* LCD)
{
	LCD->DISPLAYCTRL |= LCD_BLINKON;
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
}
void CLCD_BlinkOff(CLCD_Name* LCD)
{
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	if(LCD->MODE == LCD_8BITMODE)
	{
		CLCD_Write8(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}

}
CLCD_Name LCD1;
uint8_t Count;
char LCD_send[16];


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
  lcd_init();
//  SCH_Init();
//  //SCH_Add_Task(timeledlight, 0, 10);
//  //SCH_Add_Task(Button_Reading, 0, 10);
//  //SCH_Add_Task(led1_test, 2, 1000);
//
//
//  SCH_Add_Task(button_reading, 1, 1);
//  SCH_Add_Task(handle_mode, 3, 10);
//  SCH_Add_Task(fsm_for_input_processing, 4, 10);
//  SCH_Add_Task(timeledlight, 500, 500);
  CLCD_8BIT_Init(&LCD1, 16, 2, CS_GPIO_Port, CS_Pin, EN_GPIO_Port, EN_Pin,
  									D0_GPIO_Port, D0_Pin, D1_GPIO_Port, D1_Pin,
  									D2_GPIO_Port, D2_Pin, D3_GPIO_Port, D3_Pin,
  									D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
  									D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);


  setTimer(1,10);
//  setTimer(2,10);
  setTimer(5,1000);
  setTimer(6, 1000);

  while (1)
  {
	  CLCD_SetCursor(&LCD1, 0, 0);
	  		CLCD_WriteString(&LCD1, "Khue Nguyen Creator");
	  		sprintf(LCD_send, "LCD Dem : %d", Count);
	  		CLCD_SetCursor(&LCD1, 0, 1);
	  		CLCD_WriteString(&LCD1, LCD_send);
	  		Count++;
	  		HAL_Delay(1000);
	 //fsm_for_input_processing();
//	 lcd_goto_XY(1, 0);
//	 	lcd_send_string("hehe");
//led_green_blink();
	  //SCH_Dispatch_Tasks();
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//	  HAL_Delay(500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 63999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);

  /* Configure GPIO pins for GPIOC: PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* Configure GPIO pins for GPIOB: PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* Configure other GPIO pins as needed */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* Configure input pins for buttons */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
