
RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004110  08004110  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08004110  08004110  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004110  08004110  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08004118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200000d4  080041ec  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080041ec  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc76  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230f  00000000  00000000  0002cd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019705  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e64  00000000  00000000  0004a295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b31d  00000000  00000000  0005d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000e8468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fec 	.word	0x08003fec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08003fec 	.word	0x08003fec

0800014c <getKeyInput>:
int button__pressed = 0;
int button_long_pressed = 0;
int button_flag[NUM_BUT] = {0};


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0;i<NUM_BUT;i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e092      	b.n	800027e <getKeyInput+0x132>
  KeyReg2[i] = KeyReg1[i];
 8000158:	4a4d      	ldr	r2, [pc, #308]	; (8000290 <getKeyInput+0x144>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494c      	ldr	r1, [pc, #304]	; (8000294 <getKeyInput+0x148>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 8000168:	4a4b      	ldr	r2, [pc, #300]	; (8000298 <getKeyInput+0x14c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4947      	ldr	r1, [pc, #284]	; (8000290 <getKeyInput+0x144>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  // Add your key


  if(i==0) KeyReg0[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d108      	bne.n	8000190 <getKeyInput+0x44>
 800017e:	2110      	movs	r1, #16
 8000180:	4846      	ldr	r0, [pc, #280]	; (800029c <getKeyInput+0x150>)
 8000182:	f001 fdb5 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	461a      	mov	r2, r3
 800018a:	4b43      	ldr	r3, [pc, #268]	; (8000298 <getKeyInput+0x14c>)
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	e025      	b.n	80001dc <getKeyInput+0x90>
  else if(i==1) KeyReg0[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d109      	bne.n	80001aa <getKeyInput+0x5e>
 8000196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019a:	4840      	ldr	r0, [pc, #256]	; (800029c <getKeyInput+0x150>)
 800019c:	f001 fda8 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b3c      	ldr	r3, [pc, #240]	; (8000298 <getKeyInput+0x14c>)
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	e018      	b.n	80001dc <getKeyInput+0x90>
  else if(i==2) KeyReg0[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	d109      	bne.n	80001c4 <getKeyInput+0x78>
 80001b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b4:	483a      	ldr	r0, [pc, #232]	; (80002a0 <getKeyInput+0x154>)
 80001b6:	f001 fd9b 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	4b36      	ldr	r3, [pc, #216]	; (8000298 <getKeyInput+0x14c>)
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	e00b      	b.n	80001dc <getKeyInput+0x90>
  else if(i==3) KeyReg0[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d108      	bne.n	80001dc <getKeyInput+0x90>
 80001ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ce:	4834      	ldr	r0, [pc, #208]	; (80002a0 <getKeyInput+0x154>)
 80001d0:	f001 fd8e 	bl	8001cf0 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <getKeyInput+0x14c>)
 80001da:	60da      	str	r2, [r3, #12]


  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001dc:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <getKeyInput+0x144>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	492c      	ldr	r1, [pc, #176]	; (8000298 <getKeyInput+0x14c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d143      	bne.n	8000278 <getKeyInput+0x12c>
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <getKeyInput+0x144>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4926      	ldr	r1, [pc, #152]	; (8000294 <getKeyInput+0x148>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d139      	bne.n	8000278 <getKeyInput+0x12c>
    if (KeyReg2[i] != KeyReg3[i]){
 8000204:	4a23      	ldr	r2, [pc, #140]	; (8000294 <getKeyInput+0x148>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x158>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d017      	beq.n	8000248 <getKeyInput+0xfc>
      KeyReg3[i] = KeyReg2[i];
 8000218:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <getKeyInput+0x148>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4920      	ldr	r1, [pc, #128]	; (80002a4 <getKeyInput+0x158>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <getKeyInput+0x158>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d121      	bne.n	8000278 <getKeyInput+0x12c>
        TimeOutForKeyPress = 500;
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <getKeyInput+0x15c>)
 8000236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023a:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button_flag[i] = 1;
      }
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x160>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2101      	movs	r1, #1
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e017      	b.n	8000278 <getKeyInput+0x12c>

    }else{
        TimeOutForKeyPress --;
        if (TimeOutForKeyPress == 0){
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput+0x15c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <getKeyInput+0x15c>)
 8000250:	6013      	str	r3, [r2, #0]
        	TimeOutForKeyPress = 500;
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <getKeyInput+0x15c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10e      	bne.n	8000278 <getKeyInput+0x12c>
        	if (KeyReg3[i] == PRESSED_STATE){
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <getKeyInput+0x15c>)
 800025c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000260:	601a      	str	r2, [r3, #0]
        		//subKeyProcess();
 8000262:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <getKeyInput+0x158>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <getKeyInput+0x12c>
        		button_flag[i] = 1;
        	}
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <getKeyInput+0x160>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<NUM_BUT;i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b03      	cmp	r3, #3
 8000282:	f77f af69 	ble.w	8000158 <getKeyInput+0xc>
        }
    }
  }
}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000010 	.word	0x20000010
 8000294:	20000020 	.word	0x20000020
 8000298:	20000000 	.word	0x20000000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000030 	.word	0x20000030
 80002a8:	20000040 	.word	0x20000040
 80002ac:	200000f0 	.word	0x200000f0

080002b0 <showok>:

#include "fsm_adjust.h"
#include "i2c-lcd.h"
#include <string.h>
#include <stdio.h>
void showok(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	lcd_goto_XY(1, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb8b 	bl	80009d2 <lcd_goto_XY>
			lcd_send_string("VALID    ");
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <showok+0x18>)
 80002be:	f000 fb73 	bl	80009a8 <lcd_send_string>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	08004004 	.word	0x08004004

080002cc <showerror>:
void showerror(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	lcd_goto_XY(1, 0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 fb7d 	bl	80009d2 <lcd_goto_XY>
			lcd_send_string("WARNING ");
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <showerror+0x18>)
 80002da:	f000 fb65 	bl	80009a8 <lcd_send_string>
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	08004010 	.word	0x08004010

080002e8 <error_led>:
void error_led() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2120      	movs	r1, #32
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <error_led+0x14>)
 80002f2:	f001 fd14 	bl	8001d1e <HAL_GPIO_WritePin>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010800 	.word	0x40010800

08000300 <no_error_led>:
void no_error_led() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2120      	movs	r1, #32
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <no_error_led+0x14>)
 800030a:	f001 fd08 	bl	8001d1e <HAL_GPIO_WritePin>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800

08000318 <fsm_adjust>:
int mode=0;
void show3();
void fsm_adjust()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0

	if (state == ADJUST) {
 800031c:	4b5e      	ldr	r3, [pc, #376]	; (8000498 <fsm_adjust+0x180>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b03      	cmp	r3, #3
 8000322:	f040 80b5 	bne.w	8000490 <fsm_adjust+0x178>
show3();
 8000326:	f000 f8c5 	bl	80004b4 <show3>
		switch (adj_state) {
 800032a:	4b5c      	ldr	r3, [pc, #368]	; (800049c <fsm_adjust+0x184>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3b0a      	subs	r3, #10
 8000330:	2b13      	cmp	r3, #19
 8000332:	f200 80ae 	bhi.w	8000492 <fsm_adjust+0x17a>
 8000336:	a201      	add	r2, pc, #4	; (adr r2, 800033c <fsm_adjust+0x24>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	080003bf 	.word	0x080003bf
 8000340:	0800040d 	.word	0x0800040d
 8000344:	0800044f 	.word	0x0800044f
 8000348:	08000493 	.word	0x08000493
 800034c:	08000493 	.word	0x08000493
 8000350:	08000493 	.word	0x08000493
 8000354:	08000493 	.word	0x08000493
 8000358:	08000493 	.word	0x08000493
 800035c:	08000493 	.word	0x08000493
 8000360:	08000493 	.word	0x08000493
 8000364:	08000493 	.word	0x08000493
 8000368:	08000493 	.word	0x08000493
 800036c:	08000493 	.word	0x08000493
 8000370:	08000493 	.word	0x08000493
 8000374:	08000493 	.word	0x08000493
 8000378:	08000493 	.word	0x08000493
 800037c:	08000493 	.word	0x08000493
 8000380:	08000493 	.word	0x08000493
 8000384:	08000493 	.word	0x08000493
 8000388:	0800038d 	.word	0x0800038d
		case ADJ_INIT:
			if (red_time != green_time + amber_time) {
 800038c:	4b44      	ldr	r3, [pc, #272]	; (80004a0 <fsm_adjust+0x188>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b44      	ldr	r3, [pc, #272]	; (80004a4 <fsm_adjust+0x18c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	441a      	add	r2, r3
 8000396:	4b44      	ldr	r3, [pc, #272]	; (80004a8 <fsm_adjust+0x190>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d007      	beq.n	80003ae <fsm_adjust+0x96>
				error_led();
 800039e:	f7ff ffa3 	bl	80002e8 <error_led>
				showerror();
 80003a2:	f7ff ff93 	bl	80002cc <showerror>
				valid = 0;
 80003a6:	4b41      	ldr	r3, [pc, #260]	; (80004ac <fsm_adjust+0x194>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
			} else {
				no_error_led();
				showok();
				valid = 1;
			}
			break;
 80003ac:	e071      	b.n	8000492 <fsm_adjust+0x17a>
				no_error_led();
 80003ae:	f7ff ffa7 	bl	8000300 <no_error_led>
				showok();
 80003b2:	f7ff ff7d 	bl	80002b0 <showok>
				valid = 1;
 80003b6:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <fsm_adjust+0x194>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
			break;
 80003bc:	e069      	b.n	8000492 <fsm_adjust+0x17a>
		case ADJ_MODE:
			switch (__mode) {
 80003be:	4b3c      	ldr	r3, [pc, #240]	; (80004b0 <fsm_adjust+0x198>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b20      	cmp	r3, #32
 80003c4:	d016      	beq.n	80003f4 <fsm_adjust+0xdc>
 80003c6:	2b20      	cmp	r3, #32
 80003c8:	dc1c      	bgt.n	8000404 <fsm_adjust+0xec>
 80003ca:	2b1e      	cmp	r3, #30
 80003cc:	d002      	beq.n	80003d4 <fsm_adjust+0xbc>
 80003ce:	2b1f      	cmp	r3, #31
 80003d0:	d008      	beq.n	80003e4 <fsm_adjust+0xcc>
 80003d2:	e017      	b.n	8000404 <fsm_adjust+0xec>
			case MODE_RED:
				on_green1_led();
 80003d4:	f000 fce4 	bl	8000da0 <on_green1_led>
				on_green2_led();
 80003d8:	f000 fd16 	bl	8000e08 <on_green2_led>
				__mode = MODE_GREEN;
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <fsm_adjust+0x198>)
 80003de:	221f      	movs	r2, #31
 80003e0:	601a      	str	r2, [r3, #0]
				break;
 80003e2:	e00f      	b.n	8000404 <fsm_adjust+0xec>
			case MODE_GREEN:
				on_yellow1_led();
 80003e4:	f000 fccc 	bl	8000d80 <on_yellow1_led>
				on_yellow2_led();
 80003e8:	f000 fcfc 	bl	8000de4 <on_yellow2_led>
				__mode = MODE_AMBER;
 80003ec:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <fsm_adjust+0x198>)
 80003ee:	2220      	movs	r2, #32
 80003f0:	601a      	str	r2, [r3, #0]
				break;
 80003f2:	e007      	b.n	8000404 <fsm_adjust+0xec>
			case MODE_AMBER:
				on_red1_led();
 80003f4:	f000 fcb4 	bl	8000d60 <on_red1_led>
				on_red2_led();
 80003f8:	f000 fce2 	bl	8000dc0 <on_red2_led>
				__mode = MODE_RED;
 80003fc:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <fsm_adjust+0x198>)
 80003fe:	221e      	movs	r2, #30
 8000400:	601a      	str	r2, [r3, #0]
				break;
 8000402:	bf00      	nop
			}
			adj_state = ADJ_INIT;
 8000404:	4b25      	ldr	r3, [pc, #148]	; (800049c <fsm_adjust+0x184>)
 8000406:	221d      	movs	r2, #29
 8000408:	601a      	str	r2, [r3, #0]
			break;
 800040a:	e042      	b.n	8000492 <fsm_adjust+0x17a>
		case INCREASE_TIME:
			if (__mode == MODE_RED) {
 800040c:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <fsm_adjust+0x198>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b1e      	cmp	r3, #30
 8000412:	d105      	bne.n	8000420 <fsm_adjust+0x108>
				red_time++;
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <fsm_adjust+0x190>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <fsm_adjust+0x190>)
 800041c:	6013      	str	r3, [r2, #0]
 800041e:	e012      	b.n	8000446 <fsm_adjust+0x12e>
			} else if (__mode == MODE_GREEN) {
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <fsm_adjust+0x198>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b1f      	cmp	r3, #31
 8000426:	d105      	bne.n	8000434 <fsm_adjust+0x11c>
				green_time++;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <fsm_adjust+0x188>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <fsm_adjust+0x188>)
 8000430:	6013      	str	r3, [r2, #0]
 8000432:	e008      	b.n	8000446 <fsm_adjust+0x12e>
			} else if (__mode == MODE_AMBER) {
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <fsm_adjust+0x198>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b20      	cmp	r3, #32
 800043a:	d104      	bne.n	8000446 <fsm_adjust+0x12e>
				amber_time++;
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <fsm_adjust+0x18c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <fsm_adjust+0x18c>)
 8000444:	6013      	str	r3, [r2, #0]
			}
			adj_state = ADJ_INIT;
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <fsm_adjust+0x184>)
 8000448:	221d      	movs	r2, #29
 800044a:	601a      	str	r2, [r3, #0]
			break;
 800044c:	e021      	b.n	8000492 <fsm_adjust+0x17a>
		case DECREASE_TIME:
			if (__mode == MODE_RED)
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <fsm_adjust+0x198>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b1e      	cmp	r3, #30
 8000454:	d105      	bne.n	8000462 <fsm_adjust+0x14a>
				red_time--;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <fsm_adjust+0x190>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <fsm_adjust+0x190>)
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e012      	b.n	8000488 <fsm_adjust+0x170>
			else if (__mode == MODE_GREEN)
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <fsm_adjust+0x198>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b1f      	cmp	r3, #31
 8000468:	d105      	bne.n	8000476 <fsm_adjust+0x15e>
				green_time--;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <fsm_adjust+0x188>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <fsm_adjust+0x188>)
 8000472:	6013      	str	r3, [r2, #0]
 8000474:	e008      	b.n	8000488 <fsm_adjust+0x170>
			else if (__mode == MODE_AMBER)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <fsm_adjust+0x198>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b20      	cmp	r3, #32
 800047c:	d104      	bne.n	8000488 <fsm_adjust+0x170>
				amber_time--;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <fsm_adjust+0x18c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	3b01      	subs	r3, #1
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <fsm_adjust+0x18c>)
 8000486:	6013      	str	r3, [r2, #0]
			adj_state = ADJ_INIT;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <fsm_adjust+0x184>)
 800048a:	221d      	movs	r2, #29
 800048c:	601a      	str	r2, [r3, #0]
			break;
 800048e:	e000      	b.n	8000492 <fsm_adjust+0x17a>
		}

	}
 8000490:	bf00      	nop
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000148 	.word	0x20000148
 800049c:	20000048 	.word	0x20000048
 80004a0:	20000058 	.word	0x20000058
 80004a4:	20000054 	.word	0x20000054
 80004a8:	20000050 	.word	0x20000050
 80004ac:	2000005c 	.word	0x2000005c
 80004b0:	20000060 	.word	0x20000060

080004b4 <show3>:
char r[10], g[10], y[10];

void show3(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

	sprintf(r, "%d", red_time);
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <show3+0xb0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	492a      	ldr	r1, [pc, #168]	; (8000568 <show3+0xb4>)
 80004c0:	482a      	ldr	r0, [pc, #168]	; (800056c <show3+0xb8>)
 80004c2:	f003 f919 	bl	80036f8 <siprintf>
	sprintf(g, "%d", green_time);
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <show3+0xbc>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	461a      	mov	r2, r3
 80004cc:	4926      	ldr	r1, [pc, #152]	; (8000568 <show3+0xb4>)
 80004ce:	4829      	ldr	r0, [pc, #164]	; (8000574 <show3+0xc0>)
 80004d0:	f003 f912 	bl	80036f8 <siprintf>
	sprintf(y, "%d", amber_time);
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <show3+0xc4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4923      	ldr	r1, [pc, #140]	; (8000568 <show3+0xb4>)
 80004dc:	4827      	ldr	r0, [pc, #156]	; (800057c <show3+0xc8>)
 80004de:	f003 f90b 	bl	80036f8 <siprintf>
//	sprintf(mode_str, "%d", auto_state);
	lcd_goto_XY(2, 0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2002      	movs	r0, #2
 80004e6:	f000 fa74 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("R:");
 80004ea:	4825      	ldr	r0, [pc, #148]	; (8000580 <show3+0xcc>)
 80004ec:	f000 fa5c 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 3);
 80004f0:	2103      	movs	r1, #3
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 fa6d 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("   ");
 80004f8:	4822      	ldr	r0, [pc, #136]	; (8000584 <show3+0xd0>)
 80004fa:	f000 fa55 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 2);
 80004fe:	2102      	movs	r1, #2
 8000500:	2002      	movs	r0, #2
 8000502:	f000 fa66 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string(r);
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <show3+0xb8>)
 8000508:	f000 fa4e 	bl	80009a8 <lcd_send_string>

	lcd_goto_XY(2, 6);
 800050c:	2106      	movs	r1, #6
 800050e:	2002      	movs	r0, #2
 8000510:	f000 fa5f 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("Y:");
 8000514:	481c      	ldr	r0, [pc, #112]	; (8000588 <show3+0xd4>)
 8000516:	f000 fa47 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 9);
 800051a:	2109      	movs	r1, #9
 800051c:	2002      	movs	r0, #2
 800051e:	f000 fa58 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string(" ");
 8000522:	481a      	ldr	r0, [pc, #104]	; (800058c <show3+0xd8>)
 8000524:	f000 fa40 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 8);
 8000528:	2108      	movs	r1, #8
 800052a:	2002      	movs	r0, #2
 800052c:	f000 fa51 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string(y);
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <show3+0xc8>)
 8000532:	f000 fa39 	bl	80009a8 <lcd_send_string>

	lcd_goto_XY(2, 12);
 8000536:	210c      	movs	r1, #12
 8000538:	2002      	movs	r0, #2
 800053a:	f000 fa4a 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("G:");
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <show3+0xdc>)
 8000540:	f000 fa32 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 15);
 8000544:	210f      	movs	r1, #15
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fa43 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string(" ");
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <show3+0xd8>)
 800054e:	f000 fa2b 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 14);
 8000552:	210e      	movs	r1, #14
 8000554:	2002      	movs	r0, #2
 8000556:	f000 fa3c 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string(g);
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <show3+0xc0>)
 800055c:	f000 fa24 	bl	80009a8 <lcd_send_string>

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000050 	.word	0x20000050
 8000568:	0800401c 	.word	0x0800401c
 800056c:	20000100 	.word	0x20000100
 8000570:	20000058 	.word	0x20000058
 8000574:	2000010c 	.word	0x2000010c
 8000578:	20000054 	.word	0x20000054
 800057c:	20000118 	.word	0x20000118
 8000580:	08004020 	.word	0x08004020
 8000584:	08004024 	.word	0x08004024
 8000588:	08004028 	.word	0x08004028
 800058c:	0800402c 	.word	0x0800402c
 8000590:	08004030 	.word	0x08004030

08000594 <fsm_auto>:
#include "fsm_auto.h"
#include "i2c-lcd.h"
#include <string.h>
#include <stdio.h>
int num1, num2;
void fsm_auto(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	if(state == AUTO){
 8000598:	4b56      	ldr	r3, [pc, #344]	; (80006f4 <fsm_auto+0x160>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 80a5 	bne.w	80006ec <fsm_auto+0x158>

	switch(auto_state){
 80005a2:	4b55      	ldr	r3, [pc, #340]	; (80006f8 <fsm_auto+0x164>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3b14      	subs	r3, #20
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	f200 809a 	bhi.w	80006e2 <fsm_auto+0x14e>
 80005ae:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <fsm_auto+0x20>)
 80005b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b4:	080005c9 	.word	0x080005c9
 80005b8:	080005d1 	.word	0x080005d1
 80005bc:	0800060f 	.word	0x0800060f
 80005c0:	08000653 	.word	0x08000653
 80005c4:	08000691 	.word	0x08000691
	case INIT:
		auto_state = RED_GREEN;
 80005c8:	4b4b      	ldr	r3, [pc, #300]	; (80006f8 <fsm_auto+0x164>)
 80005ca:	2215      	movs	r2, #21
 80005cc:	601a      	str	r2, [r3, #0]
		break;
 80005ce:	e088      	b.n	80006e2 <fsm_auto+0x14e>
	case RED_GREEN:
		on_green1_led();
 80005d0:	f000 fbe6 	bl	8000da0 <on_green1_led>
		on_red2_led();
 80005d4:	f000 fbf4 	bl	8000dc0 <on_red2_led>
		num1=green_time-auto_timer;
 80005d8:	4b48      	ldr	r3, [pc, #288]	; (80006fc <fsm_auto+0x168>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b48      	ldr	r3, [pc, #288]	; (8000700 <fsm_auto+0x16c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4a48      	ldr	r2, [pc, #288]	; (8000704 <fsm_auto+0x170>)
 80005e4:	6013      	str	r3, [r2, #0]
				num2=red_time-auto_timer;
 80005e6:	4b48      	ldr	r3, [pc, #288]	; (8000708 <fsm_auto+0x174>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <fsm_auto+0x16c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	4a46      	ldr	r2, [pc, #280]	; (800070c <fsm_auto+0x178>)
 80005f2:	6013      	str	r3, [r2, #0]
		if(auto_timer >= green_time){
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <fsm_auto+0x16c>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b40      	ldr	r3, [pc, #256]	; (80006fc <fsm_auto+0x168>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	db69      	blt.n	80006d4 <fsm_auto+0x140>
		 auto_state = RED_AMBER;
 8000600:	4b3d      	ldr	r3, [pc, #244]	; (80006f8 <fsm_auto+0x164>)
 8000602:	2216      	movs	r2, #22
 8000604:	601a      	str	r2, [r3, #0]
		 auto_timer=0;
 8000606:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <fsm_auto+0x16c>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
		}


		break;
 800060c:	e062      	b.n	80006d4 <fsm_auto+0x140>
	case RED_AMBER:
		on_yellow1_led();
 800060e:	f000 fbb7 	bl	8000d80 <on_yellow1_led>
		on_red2_led();
 8000612:	f000 fbd5 	bl	8000dc0 <on_red2_led>
		num1=amber_time-auto_timer;
 8000616:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <fsm_auto+0x17c>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <fsm_auto+0x16c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a38      	ldr	r2, [pc, #224]	; (8000704 <fsm_auto+0x170>)
 8000622:	6013      	str	r3, [r2, #0]
						num2=red_time-auto_timer-green_time;
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <fsm_auto+0x174>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <fsm_auto+0x16c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	4b33      	ldr	r3, [pc, #204]	; (80006fc <fsm_auto+0x168>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	4a35      	ldr	r2, [pc, #212]	; (800070c <fsm_auto+0x178>)
 8000636:	6013      	str	r3, [r2, #0]
		if(auto_timer >= amber_time){
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <fsm_auto+0x16c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b34      	ldr	r3, [pc, #208]	; (8000710 <fsm_auto+0x17c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	db49      	blt.n	80006d8 <fsm_auto+0x144>
			auto_state = GREEN_RED;
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <fsm_auto+0x164>)
 8000646:	2217      	movs	r2, #23
 8000648:	601a      	str	r2, [r3, #0]
		 auto_timer=0;
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <fsm_auto+0x16c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
		}

		break;
 8000650:	e042      	b.n	80006d8 <fsm_auto+0x144>
	case GREEN_RED:
		on_green2_led();
 8000652:	f000 fbd9 	bl	8000e08 <on_green2_led>
		on_red1_led();
 8000656:	f000 fb83 	bl	8000d60 <on_red1_led>
		num1=red_time-auto_timer;
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <fsm_auto+0x174>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <fsm_auto+0x16c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <fsm_auto+0x170>)
 8000666:	6013      	str	r3, [r2, #0]
						num2=green_time-auto_timer;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <fsm_auto+0x168>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <fsm_auto+0x16c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4a26      	ldr	r2, [pc, #152]	; (800070c <fsm_auto+0x178>)
 8000674:	6013      	str	r3, [r2, #0]

		if(auto_timer >= green_time){
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <fsm_auto+0x16c>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <fsm_auto+0x168>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	db2c      	blt.n	80006dc <fsm_auto+0x148>
			auto_state = AMBER_RED;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <fsm_auto+0x164>)
 8000684:	2218      	movs	r2, #24
 8000686:	601a      	str	r2, [r3, #0]
		auto_timer=0;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <fsm_auto+0x16c>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		}

		break;
 800068e:	e025      	b.n	80006dc <fsm_auto+0x148>
	case AMBER_RED:
		on_yellow2_led();
 8000690:	f000 fba8 	bl	8000de4 <on_yellow2_led>
		on_red1_led();
 8000694:	f000 fb64 	bl	8000d60 <on_red1_led>

		num2=amber_time-auto_timer;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <fsm_auto+0x17c>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <fsm_auto+0x16c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4a1a      	ldr	r2, [pc, #104]	; (800070c <fsm_auto+0x178>)
 80006a4:	6013      	str	r3, [r2, #0]
						num1=red_time-auto_timer-green_time;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <fsm_auto+0x174>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <fsm_auto+0x16c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <fsm_auto+0x168>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <fsm_auto+0x170>)
 80006b8:	6013      	str	r3, [r2, #0]
		if(auto_timer >= amber_time){
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <fsm_auto+0x16c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <fsm_auto+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	db0c      	blt.n	80006e0 <fsm_auto+0x14c>
			auto_state = RED_GREEN;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <fsm_auto+0x164>)
 80006c8:	2215      	movs	r2, #21
 80006ca:	601a      	str	r2, [r3, #0]
		auto_timer=0;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <fsm_auto+0x16c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
		}

		break;
 80006d2:	e005      	b.n	80006e0 <fsm_auto+0x14c>
		break;
 80006d4:	bf00      	nop
 80006d6:	e004      	b.n	80006e2 <fsm_auto+0x14e>
		break;
 80006d8:	bf00      	nop
 80006da:	e002      	b.n	80006e2 <fsm_auto+0x14e>
		break;
 80006dc:	bf00      	nop
 80006de:	e000      	b.n	80006e2 <fsm_auto+0x14e>
		break;
 80006e0:	bf00      	nop
	}
	auto_timer+=1;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <fsm_auto+0x16c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a05      	ldr	r2, [pc, #20]	; (8000700 <fsm_auto+0x16c>)
 80006ea:	6013      	str	r3, [r2, #0]
	}
	show1();
 80006ec:	f000 f812 	bl	8000714 <show1>

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000148 	.word	0x20000148
 80006f8:	20000044 	.word	0x20000044
 80006fc:	20000058 	.word	0x20000058
 8000700:	20000150 	.word	0x20000150
 8000704:	20000124 	.word	0x20000124
 8000708:	20000050 	.word	0x20000050
 800070c:	20000128 	.word	0x20000128
 8000710:	20000054 	.word	0x20000054

08000714 <show1>:


char num11[10], num22[10];

void show1(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	lcd_goto_XY(2,7);
 8000718:	2107      	movs	r1, #7
 800071a:	2002      	movs	r0, #2
 800071c:	f000 f959 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("       ");
 8000720:	481a      	ldr	r0, [pc, #104]	; (800078c <show1+0x78>)
 8000722:	f000 f941 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 5);
 8000726:	2105      	movs	r1, #5
 8000728:	2002      	movs	r0, #2
 800072a:	f000 f952 	bl	80009d2 <lcd_goto_XY>
		lcd_send_string(" ");
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <show1+0x7c>)
 8000730:	f000 f93a 	bl	80009a8 <lcd_send_string>
	sprintf(num11, "%d", num1);
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <show1+0x80>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4917      	ldr	r1, [pc, #92]	; (8000798 <show1+0x84>)
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <show1+0x88>)
 800073e:	f002 ffdb 	bl	80036f8 <siprintf>
	sprintf(num22, "%d", num2);
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <show1+0x8c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4913      	ldr	r1, [pc, #76]	; (8000798 <show1+0x84>)
 800074a:	4816      	ldr	r0, [pc, #88]	; (80007a4 <show1+0x90>)
 800074c:	f002 ffd4 	bl	80036f8 <siprintf>
//	sprintf(mode_str, "%d", auto_state);
	lcd_goto_XY(1, 0);
 8000750:	2100      	movs	r1, #0
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f93d 	bl	80009d2 <lcd_goto_XY>
		lcd_send_string("road1");
 8000758:	4813      	ldr	r0, [pc, #76]	; (80007a8 <show1+0x94>)
 800075a:	f000 f925 	bl	80009a8 <lcd_send_string>
		lcd_goto_XY(1, 6);
 800075e:	2106      	movs	r1, #6
 8000760:	2001      	movs	r0, #1
 8000762:	f000 f936 	bl	80009d2 <lcd_goto_XY>
		lcd_send_string(num11);
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <show1+0x88>)
 8000768:	f000 f91e 	bl	80009a8 <lcd_send_string>
		lcd_goto_XY(2, 0);
 800076c:	2100      	movs	r1, #0
 800076e:	2002      	movs	r0, #2
 8000770:	f000 f92f 	bl	80009d2 <lcd_goto_XY>
			lcd_send_string("road2");
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <show1+0x98>)
 8000776:	f000 f917 	bl	80009a8 <lcd_send_string>
			lcd_goto_XY(2, 6);
 800077a:	2106      	movs	r1, #6
 800077c:	2002      	movs	r0, #2
 800077e:	f000 f928 	bl	80009d2 <lcd_goto_XY>
			lcd_send_string(num22);
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <show1+0x90>)
 8000784:	f000 f910 	bl	80009a8 <lcd_send_string>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08004034 	.word	0x08004034
 8000790:	0800403c 	.word	0x0800403c
 8000794:	20000124 	.word	0x20000124
 8000798:	08004040 	.word	0x08004040
 800079c:	2000012c 	.word	0x2000012c
 80007a0:	20000128 	.word	0x20000128
 80007a4:	20000138 	.word	0x20000138
 80007a8:	08004044 	.word	0x08004044
 80007ac:	0800404c 	.word	0x0800404c

080007b0 <fsm_manual>:
#include "i2c-lcd.h"
#include "led_display.h"
#include <string.h>
#include <stdio.h>
void show4();
void fsm_manual(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if (state == MANUAL) {
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <fsm_manual+0x38>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d112      	bne.n	80007e2 <fsm_manual+0x32>
		show4();
 80007bc:	f000 f818 	bl	80007f0 <show4>
		switch (manual_state) {
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <fsm_manual+0x3c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b22      	cmp	r3, #34	; 0x22
 80007c6:	d002      	beq.n	80007ce <fsm_manual+0x1e>
 80007c8:	2b23      	cmp	r3, #35	; 0x23
 80007ca:	d005      	beq.n	80007d8 <fsm_manual+0x28>
							on_red2_led();
							on_green1_led();
							//__mode1=MAN_RED_GREEN;
												break;
	}
}}
 80007cc:	e00a      	b.n	80007e4 <fsm_manual+0x34>
							on_red1_led();
 80007ce:	f000 fac7 	bl	8000d60 <on_red1_led>
							on_green2_led();
 80007d2:	f000 fb19 	bl	8000e08 <on_green2_led>
							break;
 80007d6:	e005      	b.n	80007e4 <fsm_manual+0x34>
							on_red2_led();
 80007d8:	f000 faf2 	bl	8000dc0 <on_red2_led>
							on_green1_led();
 80007dc:	f000 fae0 	bl	8000da0 <on_green1_led>
												break;
 80007e0:	e000      	b.n	80007e4 <fsm_manual+0x34>
}}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000148 	.word	0x20000148
 80007ec:	2000004c 	.word	0x2000004c

080007f0 <show4>:

void show4(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	lcd_goto_XY(1,0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 f8eb 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("       ");
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <show4+0x34>)
 80007fe:	f000 f8d3 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 0);
 8000802:	2100      	movs	r1, #0
 8000804:	2002      	movs	r0, #2
 8000806:	f000 f8e4 	bl	80009d2 <lcd_goto_XY>
		lcd_send_string("    ");
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <show4+0x38>)
 800080c:	f000 f8cc 	bl	80009a8 <lcd_send_string>
		lcd_goto_XY(2, 4);
 8000810:	2104      	movs	r1, #4
 8000812:	2002      	movs	r0, #2
 8000814:	f000 f8dd 	bl	80009d2 <lcd_goto_XY>
				lcd_send_string("MANUAL     ");
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <show4+0x3c>)
 800081a:	f000 f8c5 	bl	80009a8 <lcd_send_string>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08004054 	.word	0x08004054
 8000828:	0800405c 	.word	0x0800405c
 800082c:	08004064 	.word	0x08004064

08000830 <fsm_night>:
#include "i2c-lcd.h"
#include "led_display.h"
#include <string.h>
#include <stdio.h>
void show2();
void fsm_night(){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	if (state == NIGHT) {
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <fsm_night+0x18>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d103      	bne.n	8000844 <fsm_night+0x14>
		led_yellow_blink();
 800083c:	f000 fa5a 	bl	8000cf4 <led_yellow_blink>
		show2();
 8000840:	f000 f804 	bl	800084c <show2>
	}
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000148 	.word	0x20000148

0800084c <show2>:

void show2(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	lcd_goto_XY(1,0);
 8000850:	2100      	movs	r1, #0
 8000852:	2001      	movs	r0, #1
 8000854:	f000 f8bd 	bl	80009d2 <lcd_goto_XY>
	lcd_send_string("       ");
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <show2+0x34>)
 800085a:	f000 f8a5 	bl	80009a8 <lcd_send_string>
	lcd_goto_XY(2, 0);
 800085e:	2100      	movs	r1, #0
 8000860:	2002      	movs	r0, #2
 8000862:	f000 f8b6 	bl	80009d2 <lcd_goto_XY>
		lcd_send_string("    ");
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <show2+0x38>)
 8000868:	f000 f89e 	bl	80009a8 <lcd_send_string>
		lcd_goto_XY(2, 4);
 800086c:	2104      	movs	r1, #4
 800086e:	2002      	movs	r0, #2
 8000870:	f000 f8af 	bl	80009d2 <lcd_goto_XY>
				lcd_send_string("NIGHT");
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <show2+0x3c>)
 8000876:	f000 f897 	bl	80009a8 <lcd_send_string>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08004070 	.word	0x08004070
 8000884:	08004078 	.word	0x08004078
 8000888:	08004080 	.word	0x08004080

0800088c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f023 030f 	bic.w	r3, r3, #15
 800089c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f043 030c 	orr.w	r3, r3, #12
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	f043 030c 	orr.w	r3, r3, #12
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008cc:	f107 0208 	add.w	r2, r7, #8
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2304      	movs	r3, #4
 80008d6:	2142      	movs	r1, #66	; 0x42
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <lcd_send_cmd+0x5c>)
 80008da:	f001 fb95 	bl	8002008 <HAL_I2C_Master_Transmit>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000160 	.word	0x20000160

080008ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f023 030f 	bic.w	r3, r3, #15
 80008fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f043 030d 	orr.w	r3, r3, #13
 800090a:	b2db      	uxtb	r3, r3
 800090c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	f043 0309 	orr.w	r3, r3, #9
 8000914:	b2db      	uxtb	r3, r3
 8000916:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	f043 030d 	orr.w	r3, r3, #13
 800091e:	b2db      	uxtb	r3, r3
 8000920:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	f043 0309 	orr.w	r3, r3, #9
 8000928:	b2db      	uxtb	r3, r3
 800092a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800092c:	f107 0208 	add.w	r2, r7, #8
 8000930:	2364      	movs	r3, #100	; 0x64
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2304      	movs	r3, #4
 8000936:	2142      	movs	r1, #66	; 0x42
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <lcd_send_data+0x5c>)
 800093a:	f001 fb65 	bl	8002008 <HAL_I2C_Master_Transmit>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000160 	.word	0x20000160

0800094c <lcd_init>:

void lcd_init (void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000950:	2033      	movs	r0, #51	; 0x33
 8000952:	f7ff ff9b 	bl	800088c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000956:	2032      	movs	r0, #50	; 0x32
 8000958:	f7ff ff98 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 800095c:	2032      	movs	r0, #50	; 0x32
 800095e:	f000 ff11 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f7ff ff92 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 8000968:	2032      	movs	r0, #50	; 0x32
 800096a:	f000 ff0b 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff ff8c 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 8000974:	2032      	movs	r0, #50	; 0x32
 8000976:	f000 ff05 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800097a:	2006      	movs	r0, #6
 800097c:	f7ff ff86 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 8000980:	2032      	movs	r0, #50	; 0x32
 8000982:	f000 feff 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000986:	200c      	movs	r0, #12
 8000988:	f7ff ff80 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 800098c:	2032      	movs	r0, #50	; 0x32
 800098e:	f000 fef9 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff ff7a 	bl	800088c <lcd_send_cmd>
	HAL_Delay(50);
 8000998:	2032      	movs	r0, #50	; 0x32
 800099a:	f000 fef3 	bl	8001784 <HAL_Delay>
	lcd_send_cmd (0x80);
 800099e:	2080      	movs	r0, #128	; 0x80
 80009a0:	f7ff ff74 	bl	800088c <lcd_send_cmd>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80009b0:	e006      	b.n	80009c0 <lcd_send_string+0x18>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff96 	bl	80008ec <lcd_send_data>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f4      	bne.n	80009b2 <lcd_send_string+0xa>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	337f      	adds	r3, #127	; 0x7f
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e008      	b.n	8000a06 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	3340      	adds	r3, #64	; 0x40
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff3f 	bl	800088c <lcd_send_cmd>
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <fsm_for_input_processing>:
#include "i2c-lcd.h"
#include "fsm_auto.h"
#include "fsm_adjust.h"
#include <string.h>
#include <stdio.h>
void fsm_for_input_processing(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	getKeyInput();
 8000a1c:	f7ff fb96 	bl	800014c <getKeyInput>
	//lcd_clear_display();

 8000a20:	4b99      	ldr	r3, [pc, #612]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	f200 8126 	bhi.w	8000c76 <fsm_for_input_processing+0x25e>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <fsm_for_input_processing+0x18>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000b2d 	.word	0x08000b2d
 8000a38:	08000b5d 	.word	0x08000b5d
 8000a3c:	08000b7f 	.word	0x08000b7f
 8000a40:	08000c01 	.word	0x08000c01
	switch (state) {
	case IDLE://mode 0
		lcd_goto_XY(1, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ffc3 	bl	80009d2 <lcd_goto_XY>
						lcd_send_string("       ");
 8000a4c:	488f      	ldr	r0, [pc, #572]	; (8000c8c <fsm_for_input_processing+0x274>)
 8000a4e:	f7ff ffab 	bl	80009a8 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff ffbc 	bl	80009d2 <lcd_goto_XY>
				lcd_send_string("  select mode   ");
 8000a5a:	488d      	ldr	r0, [pc, #564]	; (8000c90 <fsm_for_input_processing+0x278>)
 8000a5c:	f7ff ffa4 	bl	80009a8 <lcd_send_string>
		mode_light();
 8000a60:	f000 f962 	bl	8000d28 <mode_light>
		if (button_flag[0] == 1) {
			button_flag[0]=0;
 8000a64:	4b8b      	ldr	r3, [pc, #556]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d006      	beq.n	8000a7a <fsm_for_input_processing+0x62>
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	488a      	ldr	r0, [pc, #552]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000a70:	f001 f93e 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d10f      	bne.n	8000a9a <fsm_for_input_processing+0x82>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000a7a:	4b86      	ldr	r3, [pc, #536]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			state = AUTO;
 8000a80:	4b86      	ldr	r3, [pc, #536]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a85      	ldr	r2, [pc, #532]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000a88:	6013      	str	r3, [r2, #0]
		}
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	4882      	ldr	r0, [pc, #520]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000a90:	f001 f95d 	bl	8001d4e <HAL_GPIO_TogglePin>
		if (button_flag[1] == 1) {
 8000a94:	4b7c      	ldr	r3, [pc, #496]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
			button_flag[1]=0;
			state = NIGHT;
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d006      	beq.n	8000ab0 <fsm_for_input_processing+0x98>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	487c      	ldr	r0, [pc, #496]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000aa6:	f001 f923 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10a      	bne.n	8000ac6 <fsm_for_input_processing+0xae>
		}
 8000ab0:	4b78      	ldr	r3, [pc, #480]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
		if (button_flag[2] == 1) {
 8000ab6:	4b79      	ldr	r3, [pc, #484]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a77      	ldr	r2, [pc, #476]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000abe:	6013      	str	r3, [r2, #0]
			button_flag[2]=0;
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000ac0:	4b71      	ldr	r3, [pc, #452]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	601a      	str	r2, [r3, #0]
			state = ADJUST;
		}
 8000ac6:	4b73      	ldr	r3, [pc, #460]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d006      	beq.n	8000adc <fsm_for_input_processing+0xc4>
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4871      	ldr	r0, [pc, #452]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000ad2:	f001 f90d 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10f      	bne.n	8000afc <fsm_for_input_processing+0xe4>
		if (button_flag[3] == 1) {
 8000adc:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
			button_flag[3]=0;
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	486c      	ldr	r0, [pc, #432]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000ae8:	f001 f931 	bl	8001d4e <HAL_GPIO_TogglePin>
			state = MANUAL;
 8000aec:	4b6b      	ldr	r3, [pc, #428]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a6a      	ldr	r2, [pc, #424]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000af4:	6013      	str	r3, [r2, #0]
		}
		break;
 8000af6:	4b64      	ldr	r3, [pc, #400]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	601a      	str	r2, [r3, #0]

	case AUTO://mode 1
 8000afc:	4b65      	ldr	r3, [pc, #404]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d007      	beq.n	8000b14 <fsm_for_input_processing+0xfc>
 8000b04:	2108      	movs	r1, #8
 8000b06:	4864      	ldr	r0, [pc, #400]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000b08:	f001 f8f2 	bl	8001cf0 <HAL_GPIO_ReadPin>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	f040 80a8 	bne.w	8000c64 <fsm_for_input_processing+0x24c>
		show1();
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
	if (button_flag[0] == 1) {
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
		button_flag[0]=0;
 8000b20:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a5d      	ldr	r2, [pc, #372]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000b28:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
		state = IDLE;
	}
 8000b2a:	e09b      	b.n	8000c64 <fsm_for_input_processing+0x24c>
	break;
	case NIGHT:
	if (button_flag[0] == 1) {
 8000b2c:	f7ff fdf2 	bl	8000714 <show1>
		button_flag[0]=0;
 8000b30:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	f040 8097 	bne.w	8000c68 <fsm_for_input_processing+0x250>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000b3a:	4b56      	ldr	r3, [pc, #344]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
		state = IDLE;
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	4854      	ldr	r0, [pc, #336]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000b46:	f001 f902 	bl	8001d4e <HAL_GPIO_TogglePin>

 8000b4a:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a52      	ldr	r2, [pc, #328]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000b52:	6013      	str	r3, [r2, #0]
	}
	break;
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
	case ADJUST:

 8000b5a:	e085      	b.n	8000c68 <fsm_for_input_processing+0x250>
	if (button_flag[0] == 1) {
		button_flag[0]=0;
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	f040 8083 	bne.w	8000c6c <fsm_for_input_processing+0x254>
		if (valid){
 8000b66:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	4849      	ldr	r0, [pc, #292]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000b72:	f001 f8ec 	bl	8001d4e <HAL_GPIO_TogglePin>
			state = IDLE;
 8000b76:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		}
	}
	if (button_flag[1] == 1) {
 8000b7c:	e076      	b.n	8000c6c <fsm_for_input_processing+0x254>
		button_flag[1]=0;
		adj_state = ADJ_MODE;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000b7e:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10e      	bne.n	8000ba4 <fsm_for_input_processing+0x18c>
	}
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	if (button_flag[2] == 1) {
 8000b8c:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <fsm_for_input_processing+0x288>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <fsm_for_input_processing+0x18c>
		button_flag[2]=0;
 8000b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b98:	483f      	ldr	r0, [pc, #252]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000b9a:	f001 f8d8 	bl	8001d4e <HAL_GPIO_TogglePin>
		adj_state = INCREASE_TIME;
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
	}
	if (button_flag[3] == 1) {
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d10a      	bne.n	8000bc2 <fsm_for_input_processing+0x1aa>
		button_flag[3]=0;
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
		adj_state = DECREASE_TIME;
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <fsm_for_input_processing+0x28c>)
 8000bb4:	220a      	movs	r2, #10
 8000bb6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	4836      	ldr	r0, [pc, #216]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000bbe:	f001 f8c6 	bl	8001d4e <HAL_GPIO_TogglePin>
	}

 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10a      	bne.n	8000be0 <fsm_for_input_processing+0x1c8>
	break;
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
	case MANUAL:
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <fsm_for_input_processing+0x28c>)
 8000bd2:	220b      	movs	r2, #11
 8000bd4:	601a      	str	r2, [r3, #0]
	if (button_flag[0] == 1) {
 8000bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bda:	482f      	ldr	r0, [pc, #188]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000bdc:	f001 f8b7 	bl	8001d4e <HAL_GPIO_TogglePin>
		button_flag[0]=0;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d143      	bne.n	8000c70 <fsm_for_input_processing+0x258>
		state = IDLE;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
	}
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <fsm_for_input_processing+0x28c>)
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	601a      	str	r2, [r3, #0]
	if (button_flag[1] == 1) {
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4827      	ldr	r0, [pc, #156]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000bfa:	f001 f8a8 	bl	8001d4e <HAL_GPIO_TogglePin>
			button_flag[1]=0;
			if (flag==0){
				manual_state = MAN_GREEN_RED;
 8000bfe:	e037      	b.n	8000c70 <fsm_for_input_processing+0x258>
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
				flag=1;
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10a      	bne.n	8000c1e <fsm_for_input_processing+0x206>
			}
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			else {
 8000c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c12:	4821      	ldr	r0, [pc, #132]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000c14:	f001 f89b 	bl	8001d4e <HAL_GPIO_TogglePin>
				manual_state = MAN_RED_GREEN;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <fsm_for_input_processing+0x270>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
				flag=0;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d126      	bne.n	8000c74 <fsm_for_input_processing+0x25c>
			}
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <fsm_for_input_processing+0x27c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
		}
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <fsm_for_input_processing+0x290>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10b      	bne.n	8000c4c <fsm_for_input_processing+0x234>

 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <fsm_for_input_processing+0x294>)
 8000c36:	2223      	movs	r2, #35	; 0x23
 8000c38:	601a      	str	r2, [r3, #0]
	break;
 8000c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000c40:	f001 f885 	bl	8001d4e <HAL_GPIO_TogglePin>
}
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <fsm_for_input_processing+0x290>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
void show(){

	sprintf(mode_str, "%d", state);
	lcd_goto_XY(1, 8);
		lcd_send_string("mode");
		lcd_goto_XY(1, 13);
 8000c4a:	e013      	b.n	8000c74 <fsm_for_input_processing+0x25c>

 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <fsm_for_input_processing+0x294>)
 8000c4e:	2222      	movs	r2, #34	; 0x22
 8000c50:	601a      	str	r2, [r3, #0]
void show(){
 8000c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <fsm_for_input_processing+0x280>)
 8000c58:	f001 f879 	bl	8001d4e <HAL_GPIO_TogglePin>

 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <fsm_for_input_processing+0x290>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		lcd_goto_XY(1, 13);
 8000c62:	e007      	b.n	8000c74 <fsm_for_input_processing+0x25c>
	}
 8000c64:	bf00      	nop
 8000c66:	e006      	b.n	8000c76 <fsm_for_input_processing+0x25e>

 8000c68:	bf00      	nop
 8000c6a:	e004      	b.n	8000c76 <fsm_for_input_processing+0x25e>
	if (button_flag[1] == 1) {
 8000c6c:	bf00      	nop
 8000c6e:	e002      	b.n	8000c76 <fsm_for_input_processing+0x25e>
				manual_state = MAN_GREEN_RED;
 8000c70:	bf00      	nop
 8000c72:	e000      	b.n	8000c76 <fsm_for_input_processing+0x25e>
		lcd_goto_XY(1, 13);
 8000c74:	bf00      	nop
		lcd_send_string(mode_str);
}
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b63      	cmp	r3, #99	; 0x63
 8000c7c:	dd02      	ble.n	8000c84 <fsm_for_input_processing+0x26c>
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <fsm_for_input_processing+0x284>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]

 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000148 	.word	0x20000148
 8000c8c:	08004088 	.word	0x08004088
 8000c90:	08004090 	.word	0x08004090
 8000c94:	200000f0 	.word	0x200000f0
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	20000144 	.word	0x20000144
 8000ca0:	2000005c 	.word	0x2000005c
 8000ca4:	20000048 	.word	0x20000048
 8000ca8:	2000014c 	.word	0x2000014c
 8000cac:	2000004c 	.word	0x2000004c

08000cb0 <show>:


 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <show+0x34>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <show+0x38>)
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <show+0x3c>)
 8000cbe:	f002 fd1b 	bl	80036f8 <siprintf>
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fe84 	bl	80009d2 <lcd_goto_XY>
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <show+0x40>)
 8000ccc:	f7ff fe6c 	bl	80009a8 <lcd_send_string>
 8000cd0:	210d      	movs	r1, #13
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff fe7d 	bl	80009d2 <lcd_goto_XY>
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <show+0x3c>)
 8000cda:	f7ff fe65 	bl	80009a8 <lcd_send_string>
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000148 	.word	0x20000148
 8000ce8:	080040a4 	.word	0x080040a4
 8000cec:	20000154 	.word	0x20000154
 8000cf0:	080040a8 	.word	0x080040a8

08000cf4 <led_yellow_blink>:
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
}
void led_yellow_blink(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <led_yellow_blink+0x2c>)
 8000cfe:	f001 f80e 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000d02:	2120      	movs	r1, #32
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <led_yellow_blink+0x2c>)
 8000d06:	f001 f822 	bl	8001d4e <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <led_yellow_blink+0x30>)
 8000d10:	f001 f805 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000d14:	2140      	movs	r1, #64	; 0x40
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <led_yellow_blink+0x2c>)
 8000d18:	f001 f819 	bl	8001d4e <HAL_GPIO_TogglePin>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000

08000d28 <mode_light>:
// 1: D3 - D4
void mode_light(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <mode_light+0x30>)
 8000d32:	f000 fff4 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2108      	movs	r1, #8
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <mode_light+0x30>)
 8000d3c:	f000 ffef 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <mode_light+0x34>)
 8000d46:	f000 ffea 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <mode_light+0x30>)
 8000d50:	f000 ffe5 	bl	8001d1e <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00
 8000d5c:	40011000 	.word	0x40011000

08000d60 <on_red1_led>:
void on_red1_led(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2120      	movs	r1, #32
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <on_red1_led+0x1c>)
 8000d6a:	f000 ffd8 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <on_red1_led+0x1c>)
 8000d74:	f000 ffd3 	bl	8001d1e <HAL_GPIO_WritePin>

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <on_yellow1_led>:
void on_yellow1_led(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2120      	movs	r1, #32
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <on_yellow1_led+0x1c>)
 8000d8a:	f000 ffc8 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2108      	movs	r1, #8
 8000d92:	4802      	ldr	r0, [pc, #8]	; (8000d9c <on_yellow1_led+0x1c>)
 8000d94:	f000 ffc3 	bl	8001d1e <HAL_GPIO_WritePin>

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010c00 	.word	0x40010c00

08000da0 <on_green1_led>:
void on_green1_led(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2120      	movs	r1, #32
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <on_green1_led+0x1c>)
 8000daa:	f000 ffb8 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4802      	ldr	r0, [pc, #8]	; (8000dbc <on_green1_led+0x1c>)
 8000db4:	f000 ffb3 	bl	8001d1e <HAL_GPIO_WritePin>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <on_red2_led>:
 // 2: D9 - D10
void on_red2_led(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <on_red2_led+0x1c>)
 8000dca:	f000 ffa8 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4803      	ldr	r0, [pc, #12]	; (8000de0 <on_red2_led+0x20>)
 8000dd4:	f000 ffa3 	bl	8001d1e <HAL_GPIO_WritePin>

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <on_yellow2_led>:
void on_yellow2_led(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <on_yellow2_led+0x1c>)
 8000dee:	f000 ff96 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	4803      	ldr	r0, [pc, #12]	; (8000e04 <on_yellow2_led+0x20>)
 8000df8:	f000 ff91 	bl	8001d1e <HAL_GPIO_WritePin>

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40010c00 	.word	0x40010c00

08000e08 <on_green2_led>:
void on_green2_led(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <on_green2_led+0x1c>)
 8000e12:	f000 ff84 	bl	8001d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2140      	movs	r1, #64	; 0x40
 8000e1a:	4803      	ldr	r0, [pc, #12]	; (8000e28 <on_green2_led+0x20>)
 8000e1c:	f000 ff7f 	bl	8001d1e <HAL_GPIO_WritePin>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40011000 	.word	0x40011000
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <led+0x14>)
 8000e36:	f000 ff8a 	bl	8001d4e <HAL_GPIO_TogglePin>

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40011000 	.word	0x40011000

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fc3a 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f846 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f900 	bl	8001054 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e54:	f000 f8b2 	bl	8000fbc <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e58:	f000 f882 	bl	8000f60 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init();
 8000e5c:	f7ff fd76 	bl	800094c <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <main+0x78>)
 8000e62:	f002 f875 	bl	8002f50 <HAL_TIM_Base_Start_IT>
  SCH_ADD_TASK(fsm_for_input_processing,10,10);
 8000e66:	220a      	movs	r2, #10
 8000e68:	210a      	movs	r1, #10
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <main+0x7c>)
 8000e6c:	f000 fa4c 	bl	8001308 <SCH_ADD_TASK>
  //lcd_init();
  SCH_ADD_TASK(fsm_auto, 3, 1000);
 8000e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e74:	2103      	movs	r1, #3
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <main+0x80>)
 8000e78:	f000 fa46 	bl	8001308 <SCH_ADD_TASK>
  SCH_ADD_TASK(led, 1, 1000);
 8000e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e80:	2101      	movs	r1, #1
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <main+0x84>)
 8000e84:	f000 fa40 	bl	8001308 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_adjust,10,10);
 8000e88:	220a      	movs	r2, #10
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <main+0x88>)
 8000e8e:	f000 fa3b 	bl	8001308 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_night,40,1000);
 8000e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e96:	2128      	movs	r1, #40	; 0x28
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <main+0x8c>)
 8000e9a:	f000 fa35 	bl	8001308 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_manual,40,1000);
 8000e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea2:	2128      	movs	r1, #40	; 0x28
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <main+0x90>)
 8000ea6:	f000 fa2f 	bl	8001308 <SCH_ADD_TASK>
  SCH_ADD_TASK(show,2,10);
 8000eaa:	220a      	movs	r2, #10
 8000eac:	2102      	movs	r1, #2
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <main+0x94>)
 8000eb0:	f000 fa2a 	bl	8001308 <SCH_ADD_TASK>
  //SCH_ADD_TASK(show1,2,10);
  //SCH_ADD_TASK(led, 1, 500);

  while (1)
  {
	  SCH_DISPATCH_TASK();
 8000eb4:	f000 fa88 	bl	80013c8 <SCH_DISPATCH_TASK>
 8000eb8:	e7fc      	b.n	8000eb4 <main+0x70>
 8000eba:	bf00      	nop
 8000ebc:	200001b4 	.word	0x200001b4
 8000ec0:	08000a19 	.word	0x08000a19
 8000ec4:	08000595 	.word	0x08000595
 8000ec8:	08000e2d 	.word	0x08000e2d
 8000ecc:	08000319 	.word	0x08000319
 8000ed0:	08000831 	.word	0x08000831
 8000ed4:	080007b1 	.word	0x080007b1
 8000ed8:	08000cb1 	.word	0x08000cb1

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fbfc 	bl	80036e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f06:	2310      	movs	r3, #16
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f12:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fbcb 	bl	80026b8 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f28:	f000 f988 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000f34:	23a0      	movs	r3, #160	; 0xa0
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fe38 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f52:	f000 f973 	bl	800123c <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3740      	adds	r7, #64	; 0x40
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_I2C1_Init+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x58>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_I2C1_Init+0x50>)
 8000f9e:	f000 feef 	bl	8001d80 <HAL_I2C_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa8:	f000 f948 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000160 	.word	0x20000160
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	000186a0 	.word	0x000186a0

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_TIM2_Init+0x94>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_TIM2_Init+0x94>)
 8000fe2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fe6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_TIM2_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_TIM2_Init+0x94>)
 8000ff0:	2209      	movs	r2, #9
 8000ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_TIM2_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_TIM2_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <MX_TIM2_Init+0x94>)
 8001002:	f001 ff55 	bl	8002eb0 <HAL_TIM_Base_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800100c:	f000 f916 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_TIM2_Init+0x94>)
 800101e:	f002 f8d9 	bl	80031d4 <HAL_TIM_ConfigClockSource>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001028:	f000 f908 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_TIM2_Init+0x94>)
 800103a:	f002 fabb 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001044:	f000 f8fa 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001b4 	.word	0x200001b4

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <MX_GPIO_Init+0x1c4>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a6a      	ldr	r2, [pc, #424]	; (8001218 <MX_GPIO_Init+0x1c4>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <MX_GPIO_Init+0x1c4>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x1c4>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a64      	ldr	r2, [pc, #400]	; (8001218 <MX_GPIO_Init+0x1c4>)
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b62      	ldr	r3, [pc, #392]	; (8001218 <MX_GPIO_Init+0x1c4>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <MX_GPIO_Init+0x1c4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a5e      	ldr	r2, [pc, #376]	; (8001218 <MX_GPIO_Init+0x1c4>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <MX_GPIO_Init+0x1c4>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <MX_GPIO_Init+0x1c4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <MX_GPIO_Init+0x1c4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <MX_GPIO_Init+0x1c4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4853      	ldr	r0, [pc, #332]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010ce:	f000 fe26 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	4851      	ldr	r0, [pc, #324]	; (8001220 <MX_GPIO_Init+0x1cc>)
 80010da:	f000 fe20 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2128      	movs	r1, #40	; 0x28
 80010e2:	4850      	ldr	r0, [pc, #320]	; (8001224 <MX_GPIO_Init+0x1d0>)
 80010e4:	f000 fe1b 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80010e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4848      	ldr	r0, [pc, #288]	; (8001220 <MX_GPIO_Init+0x1cc>)
 80010fe:	f000 fc73 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001102:	230c      	movs	r3, #12
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4841      	ldr	r0, [pc, #260]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001116:	f000 fc67 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800111a:	2320      	movs	r3, #32
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	483a      	ldr	r0, [pc, #232]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001132:	f000 fc59 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4834      	ldr	r0, [pc, #208]	; (8001220 <MX_GPIO_Init+0x1cc>)
 8001150:	f000 fc4a 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001154:	2328      	movs	r3, #40	; 0x28
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	482e      	ldr	r0, [pc, #184]	; (8001224 <MX_GPIO_Init+0x1d0>)
 800116c:	f000 fc3c 	bl	80019e8 <HAL_GPIO_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8001170:	2200      	movs	r2, #0
 8001172:	f249 01f8 	movw	r1, #37112	; 0x90f8
 8001176:	482b      	ldr	r0, [pc, #172]	; (8001224 <MX_GPIO_Init+0x1d0>)
 8001178:	f000 fdd1 	bl	8001d1e <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4827      	ldr	r0, [pc, #156]	; (8001220 <MX_GPIO_Init+0x1cc>)
 8001182:	f000 fdcc 	bl	8001d1e <HAL_GPIO_WritePin>

  /* Configure GPIO pins for GPIOC: PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	4820      	ldr	r0, [pc, #128]	; (8001220 <MX_GPIO_Init+0x1cc>)
 800119e:	f000 fc23 	bl	80019e8 <HAL_GPIO_Init>

  /* Configure GPIO pins for GPIOB: PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_GPIO_Init+0x1d0>)
 80011ba:	f000 fc15 	bl	80019e8 <HAL_GPIO_Init>

  /* Configure other GPIO pins as needed */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 80011be:	f249 03f8 	movw	r3, #37112	; 0x90f8
 80011c2:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_GPIO_Init+0x1d0>)
 80011d8:	f000 fc06 	bl	80019e8 <HAL_GPIO_Init>

  /* Configure input pins for buttons */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 80011dc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_GPIO_Init+0x1d0>)
 80011f2:	f000 fbf9 	bl	80019e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_4_Pin;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0x1c8>)
 800120c:	f000 fbec 	bl	80019e8 <HAL_GPIO_Init>
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	40010800 	.word	0x40010800
 8001220:	40011000 	.word	0x40011000
 8001224:	40010c00 	.word	0x40010c00

08001228 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	SCH_UPDATE();
 8001230:	f000 f80a 	bl	8001248 <SCH_UPDATE>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <SCH_UPDATE>:
uint8_t index_val = 0;
#define TICK 10
void SCH_INIT(void){
	index_val = 0;
}
void SCH_UPDATE(void){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
	for(int i=0;i<index_val;i++){
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e048      	b.n	80012e6 <SCH_UPDATE+0x9e>
		if(SCH_TASKS_G[i].Delay > 0 ) SCH_TASKS_G[i].Delay--;
 8001254:	492a      	ldr	r1, [pc, #168]	; (8001300 <SCH_UPDATE+0xb8>)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d013      	beq.n	8001292 <SCH_UPDATE+0x4a>
 800126a:	4925      	ldr	r1, [pc, #148]	; (8001300 <SCH_UPDATE+0xb8>)
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3304      	adds	r3, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1e59      	subs	r1, r3, #1
 800127e:	4820      	ldr	r0, [pc, #128]	; (8001300 <SCH_UPDATE+0xb8>)
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4403      	add	r3, r0
 800128c:	3304      	adds	r3, #4
 800128e:	6019      	str	r1, [r3, #0]
 8001290:	e026      	b.n	80012e0 <SCH_UPDATE+0x98>
		else {
			SCH_TASKS_G[i].Delay = SCH_TASKS_G[i].Period;
 8001292:	491b      	ldr	r1, [pc, #108]	; (8001300 <SCH_UPDATE+0xb8>)
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <SCH_UPDATE+0xb8>)
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4403      	add	r3, r0
 80012b2:	3304      	adds	r3, #4
 80012b4:	6019      	str	r1, [r3, #0]
			SCH_TASKS_G[i].RunMe+=1;
 80012b6:	4912      	ldr	r1, [pc, #72]	; (8001300 <SCH_UPDATE+0xb8>)
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	330c      	adds	r3, #12
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2d8      	uxtb	r0, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <SCH_UPDATE+0xb8>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	330c      	adds	r3, #12
 80012dc:	4602      	mov	r2, r0
 80012de:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<index_val;i++){
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <SCH_UPDATE+0xbc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dbb0      	blt.n	8001254 <SCH_UPDATE+0xc>
		}
	}
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200001fc 	.word	0x200001fc
 8001304:	200002c4 	.word	0x200002c4

08001308 <SCH_ADD_TASK>:
void SCH_ADD_TASK(void (*pTask)(void), uint32_t Delay, uint32_t Period){
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	if(index_val < SCH_MAX_TASKS)
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <SCH_ADD_TASK+0xb4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b09      	cmp	r3, #9
 800131a:	d80a      	bhi.n	8001332 <SCH_ADD_TASK+0x2a>
	SCH_TASKS_G[index_val].pTask = pTask;
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <SCH_ADD_TASK+0xb4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SCH_ADD_TASK+0xb8>)
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].Delay = Delay / TICK;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SCH_ADD_TASK+0xb4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <SCH_ADD_TASK+0xbc>)
 800133c:	fba2 2303 	umull	r2, r3, r2, r3
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	491f      	ldr	r1, [pc, #124]	; (80013c0 <SCH_ADD_TASK+0xb8>)
 8001344:	4603      	mov	r3, r0
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3304      	adds	r3, #4
 8001350:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].Period = Period / TICK;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <SCH_ADD_TASK+0xb4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <SCH_ADD_TASK+0xbc>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	4917      	ldr	r1, [pc, #92]	; (80013c0 <SCH_ADD_TASK+0xb8>)
 8001364:	4603      	mov	r3, r0
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4403      	add	r3, r0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3308      	adds	r3, #8
 8001370:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].RunMe = 0;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <SCH_ADD_TASK+0xb4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <SCH_ADD_TASK+0xb8>)
 800137a:	460b      	mov	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	330c      	adds	r3, #12
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
	SCH_TASKS_G[index_val].TaskID = index_val;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <SCH_ADD_TASK+0xb4>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SCH_ADD_TASK+0xb4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SCH_ADD_TASK+0xb8>)
 8001398:	460b      	mov	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3310      	adds	r3, #16
 80013a4:	6018      	str	r0, [r3, #0]
	index_val++;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SCH_ADD_TASK+0xb4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <SCH_ADD_TASK+0xb4>)
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	200002c4 	.word	0x200002c4
 80013c0:	200001fc 	.word	0x200001fc
 80013c4:	cccccccd 	.word	0xcccccccd

080013c8 <SCH_DISPATCH_TASK>:
void SCH_DISPATCH_TASK(void){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	for(int i=0;i<index_val;i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e02b      	b.n	800142c <SCH_DISPATCH_TASK+0x64>
		if(SCH_TASKS_G[i].RunMe > 0){
 80013d4:	491b      	ldr	r1, [pc, #108]	; (8001444 <SCH_DISPATCH_TASK+0x7c>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	330c      	adds	r3, #12
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d01d      	beq.n	8001426 <SCH_DISPATCH_TASK+0x5e>
			(*SCH_TASKS_G[i].pTask)();
 80013ea:	4916      	ldr	r1, [pc, #88]	; (8001444 <SCH_DISPATCH_TASK+0x7c>)
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4798      	blx	r3
			SCH_TASKS_G[i].RunMe -= 1;
 80013fc:	4911      	ldr	r1, [pc, #68]	; (8001444 <SCH_DISPATCH_TASK+0x7c>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	330c      	adds	r3, #12
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	490c      	ldr	r1, [pc, #48]	; (8001444 <SCH_DISPATCH_TASK+0x7c>)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	330c      	adds	r3, #12
 8001422:	4602      	mov	r2, r0
 8001424:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<index_val;i++){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SCH_DISPATCH_TASK+0x80>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4293      	cmp	r3, r2
 8001436:	dbcd      	blt.n	80013d4 <SCH_DISPATCH_TASK+0xc>
		}
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001fc 	.word	0x200001fc
 8001448:	200002c4 	.word	0x200002c4

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_MspInit+0x5c>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_MspInit+0x5c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x5c>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x5c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x5c>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_MspInit+0x60>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_MspInit+0x60>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_I2C_MspInit+0x90>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d132      	bne.n	8001536 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_I2C_MspInit+0x94>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_I2C_MspInit+0x94>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_I2C_MspInit+0x94>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <HAL_I2C_MspInit+0x98>)
 80014fe:	f000 fa73 	bl	80019e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_I2C_MspInit+0x9c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_I2C_MspInit+0x9c>)
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_I2C_MspInit+0x94>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x94>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_I2C_MspInit+0x94>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40005400 	.word	0x40005400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010c00 	.word	0x40010c00
 800154c:	40010000 	.word	0x40010000

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001560:	d113      	bne.n	800158a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_TIM_Base_MspInit+0x44>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_TIM_Base_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x44>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	201c      	movs	r0, #28
 8001580:	f000 f9fb 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001584:	201c      	movs	r0, #28
 8001586:	f000 fa14 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015de:	f000 f8b5 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM2_IRQHandler+0x10>)
 80015ee:	f001 fd01 	bl	8002ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200001b4 	.word	0x200001b4

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f002 f832 	bl	8003694 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20005000 	.word	0x20005000
 800165c:	00000400 	.word	0x00000400
 8001660:	200002c8 	.word	0x200002c8
 8001664:	200002e0 	.word	0x200002e0

08001668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001674:	f7ff fff8 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001690:	4c09      	ldr	r4, [pc, #36]	; (80016b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f001 ffff 	bl	80036a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a2:	f7ff fbcf 	bl	8000e44 <main>
  bx lr
 80016a6:	4770      	bx	lr
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80016b0:	08004118 	.word	0x08004118
  ldr r2, =_sbss
 80016b4:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80016b8:	200002e0 	.word	0x200002e0

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x28>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f947 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff feb6 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f95f 	bl	80019ce <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f927 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000064 	.word	0x20000064
 8001744:	2000006c 	.word	0x2000006c
 8001748:	20000068 	.word	0x20000068

0800174c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x1c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x20>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_IncTick+0x20>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	2000006c 	.word	0x2000006c
 800176c:	200002cc 	.word	0x200002cc

08001770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_GetTick+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	200002cc 	.word	0x200002cc

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fff0 	bl	8001770 <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffe0 	bl	8001770 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000006c 	.word	0x2000006c

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	; (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4906      	ldr	r1, [pc, #24]	; (8001864 <__NVIC_EnableIRQ+0x34>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff90 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff2d 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff42 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff90 	bl	80018bc <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5f 	bl	8001868 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff35 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b08b      	sub	sp, #44	; 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	e169      	b.n	8001cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019fc:	2201      	movs	r2, #1
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8158 	bne.w	8001cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4a9a      	ldr	r2, [pc, #616]	; (8001c88 <HAL_GPIO_Init+0x2a0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d05e      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a24:	4a98      	ldr	r2, [pc, #608]	; (8001c88 <HAL_GPIO_Init+0x2a0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d875      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a2a:	4a98      	ldr	r2, [pc, #608]	; (8001c8c <HAL_GPIO_Init+0x2a4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d058      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a30:	4a96      	ldr	r2, [pc, #600]	; (8001c8c <HAL_GPIO_Init+0x2a4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d86f      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a36:	4a96      	ldr	r2, [pc, #600]	; (8001c90 <HAL_GPIO_Init+0x2a8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d052      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a3c:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <HAL_GPIO_Init+0x2a8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d869      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a42:	4a94      	ldr	r2, [pc, #592]	; (8001c94 <HAL_GPIO_Init+0x2ac>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d04c      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a48:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_GPIO_Init+0x2ac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d863      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a92      	ldr	r2, [pc, #584]	; (8001c98 <HAL_GPIO_Init+0x2b0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d046      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a54:	4a90      	ldr	r2, [pc, #576]	; (8001c98 <HAL_GPIO_Init+0x2b0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d85d      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d82a      	bhi.n	8001ab4 <HAL_GPIO_Init+0xcc>
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d859      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_GPIO_Init+0x80>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001abd 	.word	0x08001abd
 8001a70:	08001acf 	.word	0x08001acf
 8001a74:	08001b11 	.word	0x08001b11
 8001a78:	08001b17 	.word	0x08001b17
 8001a7c:	08001b17 	.word	0x08001b17
 8001a80:	08001b17 	.word	0x08001b17
 8001a84:	08001b17 	.word	0x08001b17
 8001a88:	08001b17 	.word	0x08001b17
 8001a8c:	08001b17 	.word	0x08001b17
 8001a90:	08001b17 	.word	0x08001b17
 8001a94:	08001b17 	.word	0x08001b17
 8001a98:	08001b17 	.word	0x08001b17
 8001a9c:	08001b17 	.word	0x08001b17
 8001aa0:	08001b17 	.word	0x08001b17
 8001aa4:	08001b17 	.word	0x08001b17
 8001aa8:	08001b17 	.word	0x08001b17
 8001aac:	08001ac5 	.word	0x08001ac5
 8001ab0:	08001ad9 	.word	0x08001ad9
 8001ab4:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <HAL_GPIO_Init+0x2b4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aba:	e02c      	b.n	8001b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e029      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	623b      	str	r3, [r7, #32]
          break;
 8001acc:	e024      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e01f      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	330c      	adds	r3, #12
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e01a      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aea:	2304      	movs	r3, #4
 8001aec:	623b      	str	r3, [r7, #32]
          break;
 8001aee:	e013      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af8:	2308      	movs	r3, #8
 8001afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	611a      	str	r2, [r3, #16]
          break;
 8001b02:	e009      	b.n	8001b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	615a      	str	r2, [r3, #20]
          break;
 8001b0e:	e003      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          break;
 8001b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2bff      	cmp	r3, #255	; 0xff
 8001b1c:	d801      	bhi.n	8001b22 <HAL_GPIO_Init+0x13a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	e001      	b.n	8001b26 <HAL_GPIO_Init+0x13e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2bff      	cmp	r3, #255	; 0xff
 8001b2c:	d802      	bhi.n	8001b34 <HAL_GPIO_Init+0x14c>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x152>
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	3b08      	subs	r3, #8
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	210f      	movs	r1, #15
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80b1 	beq.w	8001cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2bc>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_GPIO_Init+0x2c0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x1ec>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <HAL_GPIO_Init+0x2c4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_GPIO_Init+0x2cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1e0>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bc8:	2304      	movs	r3, #4
 8001bca:	e004      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	4093      	lsls	r3, r2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be6:	492f      	ldr	r1, [pc, #188]	; (8001ca4 <HAL_GPIO_Init+0x2bc>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	492c      	ldr	r1, [pc, #176]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	491e      	ldr	r1, [pc, #120]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4918      	ldr	r1, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4914      	ldr	r1, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d021      	beq.n	8001cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e021      	b.n	8001cca <HAL_GPIO_Init+0x2e2>
 8001c86:	bf00      	nop
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10310000 	.word	0x10310000
 8001c90:	10220000 	.word	0x10220000
 8001c94:	10210000 	.word	0x10210000
 8001c98:	10120000 	.word	0x10120000
 8001c9c:	10110000 	.word	0x10110000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40011400 	.word	0x40011400
 8001cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4909      	ldr	r1, [pc, #36]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f ae8e 	bne.w	80019fc <HAL_GPIO_Init+0x14>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	372c      	adds	r7, #44	; 0x2c
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2e:	787b      	ldrb	r3, [r7, #1]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d34:	887a      	ldrh	r2, [r7, #2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d3a:	e003      	b.n	8001d44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	611a      	str	r2, [r3, #16]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d60:	887a      	ldrh	r2, [r7, #2]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	041a      	lsls	r2, r3, #16
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	400b      	ands	r3, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e12b      	b.n	8001fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fb82 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de4:	f001 f832 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4a81      	ldr	r2, [pc, #516]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d807      	bhi.n	8001e04 <HAL_I2C_Init+0x84>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <HAL_I2C_Init+0x278>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	bf94      	ite	ls
 8001dfc:	2301      	movls	r3, #1
 8001dfe:	2300      	movhi	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x92>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a7d      	ldr	r2, [pc, #500]	; (8001ffc <HAL_I2C_Init+0x27c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bf94      	ite	ls
 8001e0c:	2301      	movls	r3, #1
 8001e0e:	2300      	movhi	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0e7      	b.n	8001fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_I2C_Init+0x280>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0c9b      	lsrs	r3, r3, #18
 8001e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d802      	bhi.n	8001e54 <HAL_I2C_Init+0xd4>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	e009      	b.n	8001e68 <HAL_I2C_Init+0xe8>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_I2C_Init+0x284>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	3301      	adds	r3, #1
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	495c      	ldr	r1, [pc, #368]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d819      	bhi.n	8001ebc <HAL_I2C_Init+0x13c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e59      	subs	r1, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_I2C_Init+0x138>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e59      	subs	r1, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	e051      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e04f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d111      	bne.n	8001ee8 <HAL_I2C_Init+0x168>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e012      	b.n	8001f0e <HAL_I2C_Init+0x18e>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Init+0x196>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e022      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_I2C_Init+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e58      	subs	r0, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	e00f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	0099      	lsls	r1, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	6809      	ldr	r1, [r1, #0]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6911      	ldr	r1, [r2, #16]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	000186a0 	.word	0x000186a0
 8001ff8:	001e847f 	.word	0x001e847f
 8001ffc:	003d08ff 	.word	0x003d08ff
 8002000:	431bde83 	.word	0x431bde83
 8002004:	10624dd3 	.word	0x10624dd3

08002008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
 8002018:	4613      	mov	r3, r2
 800201a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fba8 	bl	8001770 <HAL_GetTick>
 8002020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b20      	cmp	r3, #32
 800202c:	f040 80e0 	bne.w	80021f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2319      	movs	r3, #25
 8002036:	2201      	movs	r2, #1
 8002038:	4970      	ldr	r1, [pc, #448]	; (80021fc <HAL_I2C_Master_Transmit+0x1f4>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f964 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	e0d3      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2C_Master_Transmit+0x50>
 8002054:	2302      	movs	r3, #2
 8002056:	e0cc      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d007      	beq.n	800207e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2210      	movs	r2, #16
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	893a      	ldrh	r2, [r7, #8]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4a50      	ldr	r2, [pc, #320]	; (8002200 <HAL_I2C_Master_Transmit+0x1f8>)
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020c0:	8979      	ldrh	r1, [r7, #10]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f89c 	bl	8002204 <I2C_MasterRequestWrite>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08d      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020ec:	e066      	b.n	80021bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fa22 	bl	800253c <I2C_WaitOnTXEFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00d      	beq.n	800211a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b04      	cmp	r3, #4
 8002104:	d107      	bne.n	8002116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11b      	bne.n	8002190 <HAL_I2C_Master_Transmit+0x188>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	6a39      	ldr	r1, [r7, #32]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fa19 	bl	80025cc <I2C_WaitOnBTFFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d107      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e01a      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d194      	bne.n	80020ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000

08002204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d006      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d003      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00b      	b.n	8002258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2b12      	cmp	r3, #18
 8002246:	d107      	bne.n	8002258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f84f 	bl	8002308 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227e:	d103      	bne.n	8002288 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e035      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002294:	d108      	bne.n	80022a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	e01b      	b.n	80022e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	11db      	asrs	r3, r3, #7
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 0306 	and.w	r3, r3, #6
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f063 030f 	orn	r3, r3, #15
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <I2C_MasterRequestWrite+0xfc>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f898 	bl	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e010      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022d6:	897b      	ldrh	r3, [r7, #10]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <I2C_MasterRequestWrite+0x100>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f888 	bl	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	00010008 	.word	0x00010008
 8002304:	00010002 	.word	0x00010002

08002308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002318:	e048      	b.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d044      	beq.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff fa25 	bl	8001770 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d139      	bne.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10d      	bne.n	800235e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	43da      	mvns	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	e00c      	b.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x70>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	43da      	mvns	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d116      	bne.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e023      	b.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10d      	bne.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	43da      	mvns	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4013      	ands	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	e00c      	b.n	80023ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	43da      	mvns	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d093      	beq.n	800231a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800240a:	e071      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d123      	bne.n	8002464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e067      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d041      	beq.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7ff f980 	bl	8001770 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d136      	bne.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10c      	bne.n	80024a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4013      	ands	r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e00b      	b.n	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	43da      	mvns	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e021      	b.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10c      	bne.n	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	43da      	mvns	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4013      	ands	r3, r2
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e00b      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	43da      	mvns	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4013      	ands	r3, r2
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf14      	ite	ne
 8002526:	2301      	movne	r3, #1
 8002528:	2300      	moveq	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af6d 	bne.w	800240c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002548:	e034      	b.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f886 	bl	800265c <I2C_IsAcknowledgeFailed>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e034      	b.n	80025c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d028      	beq.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7ff f905 	bl	8001770 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d11d      	bne.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d016      	beq.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e007      	b.n	80025c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d1c3      	bne.n	800254a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025d8:	e034      	b.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f83e 	bl	800265c <I2C_IsAcknowledgeFailed>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e034      	b.n	8002654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d028      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7ff f8bd 	bl	8001770 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d11d      	bne.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d016      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d1c3      	bne.n	80025da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d11b      	bne.n	80026ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800267c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e272      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8087 	beq.w	80027e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d8:	4b92      	ldr	r3, [pc, #584]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d00c      	beq.n	80026fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d112      	bne.n	8002716 <HAL_RCC_OscConfig+0x5e>
 80026f0:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fc:	d10b      	bne.n	8002716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4b89      	ldr	r3, [pc, #548]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x12c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d168      	bne.n	80027e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e24c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x76>
 8002720:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7f      	ldr	r2, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e02e      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7a      	ldr	r2, [pc, #488]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0xbc>
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a71      	ldr	r2, [pc, #452]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xd4>
 8002774:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b68      	ldr	r3, [pc, #416]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe ffec 	bl	8001770 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe ffe8 	bl	8001770 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e200      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xe4>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ffd8 	bl	8001770 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ffd4 	bl	8001770 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1ec      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x10c>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x18c>
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x176>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c0      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4939      	ldr	r1, [pc, #228]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe ff8d 	bl	8001770 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe ff89 	bl	8001770 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4927      	ldr	r1, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x270>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe ff6c 	bl	8001770 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe ff68 	bl	8001770 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e180      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d03a      	beq.n	800293c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_RCC_OscConfig+0x274>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7fe ff4c 	bl	8001770 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe ff48 	bl	8001770 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e160      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f000 faba 	bl	8002e74 <RCC_Delay>
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x274>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe ff32 	bl	8001770 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290e:	e00f      	b.n	8002930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe ff2e 	bl	8001770 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d908      	bls.n	8002930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e146      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	42420000 	.word	0x42420000
 800292c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e9      	bne.n	8002910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a6 	beq.w	8002a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b8b      	ldr	r3, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b88      	ldr	r3, [pc, #544]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4a87      	ldr	r2, [pc, #540]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	61d3      	str	r3, [r2, #28]
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b82      	ldr	r3, [pc, #520]	; (8002b80 <HAL_RCC_OscConfig+0x4c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d118      	bne.n	80029b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCC_OscConfig+0x4c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_RCC_OscConfig+0x4c8>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe feef 	bl	8001770 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7fe feeb 	bl	8001770 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e103      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b75      	ldr	r3, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x4c8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x312>
 80029bc:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6213      	str	r3, [r2, #32]
 80029c8:	e02d      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0x334>
 80029d2:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a66      	ldr	r2, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	e01c      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d10c      	bne.n	8002a0e <HAL_RCC_OscConfig+0x356>
 80029f4:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4a60      	ldr	r2, [pc, #384]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6213      	str	r3, [r2, #32]
 8002a00:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6213      	str	r3, [r2, #32]
 8002a0c:	e00b      	b.n	8002a26 <HAL_RCC_OscConfig+0x36e>
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	4b58      	ldr	r3, [pc, #352]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d015      	beq.n	8002a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fe9f 	bl	8001770 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7fe fe9b 	bl	8001770 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0b1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ee      	beq.n	8002a36 <HAL_RCC_OscConfig+0x37e>
 8002a58:	e014      	b.n	8002a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe89 	bl	8001770 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fe85 	bl	8001770 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e09b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ee      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8a:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8087 	beq.w	8002bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d061      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d146      	bne.n	8002b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fe59 	bl	8001770 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fe55 	bl	8001770 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e06d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4921      	ldr	r1, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a19      	ldr	r1, [r3, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	491b      	ldr	r1, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fe29 	bl	8001770 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe fe25 	bl	8001770 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e03d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x46a>
 8002b40:	e035      	b.n	8002bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fe12 	bl	8001770 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fe0e 	bl	8001770 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e026      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x498>
 8002b6e:	e01e      	b.n	8002bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e019      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40007000 	.word	0x40007000
 8002b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_OscConfig+0x500>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0d0      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d910      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4965      	ldr	r1, [pc, #404]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d040      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d115      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e073      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4936      	ldr	r1, [pc, #216]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fd60 	bl	8001770 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fd5c 	bl	8001770 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e053      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d210      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4922      	ldr	r1, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1cc>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fcbe 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	080040b0 	.word	0x080040b0
 8002d88:	20000064 	.word	0x20000064
 8002d8c:	20000068 	.word	0x20000068

08002d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dbe:	e027      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc2:	613b      	str	r3, [r7, #16]
      break;
 8002dc4:	e027      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0c9b      	lsrs	r3, r3, #18
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0c5b      	lsrs	r3, r3, #17
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002df2:	fb03 f202 	mul.w	r2, r3, r2
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e004      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e12:	613b      	str	r3, [r7, #16]
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	693b      	ldr	r3, [r7, #16]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	007a1200 	.word	0x007a1200
 8002e2c:	080040c8 	.word	0x080040c8
 8002e30:	080040d8 	.word	0x080040d8
 8002e34:	003d0900 	.word	0x003d0900

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000064 	.word	0x20000064

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff2 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	080040c0 	.word	0x080040c0

08002e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <RCC_Delay+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <RCC_Delay+0x38>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e90:	bf00      	nop
  }
  while (Delay --);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <RCC_Delay+0x1c>
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000064 	.word	0x20000064
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e041      	b.n	8002f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fb3a 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 fa5c 	bl	80033ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d001      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e03a      	b.n	8002fde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_TIM_Base_Start_IT+0x98>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x58>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d009      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x58>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_TIM_Base_Start_IT+0x9c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x58>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d010      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	e007      	b.n	8002fdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0202 	mvn.w	r2, #2
 8003028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f998 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f98b 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f99a 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d020      	beq.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0204 	mvn.w	r2, #4
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f972 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f965 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f974 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0208 	mvn.w	r2, #8
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f94c 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f93f 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f94e 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0210 	mvn.w	r2, #16
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2208      	movs	r2, #8
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f926 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f919 	bl	8003362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f928 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0201 	mvn.w	r2, #1
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe f864 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa7f 	bl	8003682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8f8 	bl	8003398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0220 	mvn.w	r2, #32
 80031c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa52 	bl	8003670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIM_ConfigClockSource+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0b4      	b.n	800335a <HAL_TIM_ConfigClockSource+0x186>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800320e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003228:	d03e      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xd4>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	f200 8087 	bhi.w	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	f000 8086 	beq.w	8003346 <HAL_TIM_ConfigClockSource+0x172>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d87f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b70      	cmp	r3, #112	; 0x70
 8003242:	d01a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0xa6>
 8003244:	2b70      	cmp	r3, #112	; 0x70
 8003246:	d87b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b60      	cmp	r3, #96	; 0x60
 800324a:	d050      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x11a>
 800324c:	2b60      	cmp	r3, #96	; 0x60
 800324e:	d877      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b50      	cmp	r3, #80	; 0x50
 8003252:	d03c      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xfa>
 8003254:	2b50      	cmp	r3, #80	; 0x50
 8003256:	d873      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d058      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x13a>
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d86f      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b30      	cmp	r3, #48	; 0x30
 8003262:	d064      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003264:	2b30      	cmp	r3, #48	; 0x30
 8003266:	d86b      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b20      	cmp	r3, #32
 800326a:	d060      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d867      	bhi.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05c      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003274:	2b10      	cmp	r3, #16
 8003276:	d05a      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	e062      	b.n	8003340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f000 f974 	bl	8003576 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e04f      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f000 f95d 	bl	8003576 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e03c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 f8d4 	bl	8003488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2150      	movs	r1, #80	; 0x50
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f92b 	bl	8003542 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e02c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8f2 	bl	80034e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2160      	movs	r1, #96	; 0x60
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f91b 	bl	8003542 <TIM_ITRx_SetConfig>
      break;
 800330c:	e01c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 f8b4 	bl	8003488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f90b 	bl	8003542 <TIM_ITRx_SetConfig>
      break;
 800332c:	e00c      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f000 f902 	bl	8003542 <TIM_ITRx_SetConfig>
      break;
 800333e:	e003      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e000      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
	...

080033ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a2f      	ldr	r2, [pc, #188]	; (800347c <TIM_Base_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d007      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <TIM_Base_SetConfig+0xd4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_Base_SetConfig+0x30>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <TIM_Base_SetConfig+0xd8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d108      	bne.n	80033ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <TIM_Base_SetConfig+0xd0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <TIM_Base_SetConfig+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0x62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <TIM_Base_SetConfig+0xd8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <TIM_Base_SetConfig+0xd0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d103      	bne.n	8003454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]
  }
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800

08003488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 030a 	bic.w	r3, r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0210 	bic.w	r2, r3, #16
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800350e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	031b      	lsls	r3, r3, #12
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003520:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	f043 0307 	orr.w	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003576:	b480      	push	{r7}
 8003578:	b087      	sub	sp, #28
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	021a      	lsls	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4313      	orrs	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e046      	b.n	800365a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d009      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a10      	ldr	r2, [pc, #64]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10c      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4313      	orrs	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <__errno>:
 8003694:	4b01      	ldr	r3, [pc, #4]	; (800369c <__errno+0x8>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000070 	.word	0x20000070

080036a0 <__libc_init_array>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	2600      	movs	r6, #0
 80036a4:	4d0c      	ldr	r5, [pc, #48]	; (80036d8 <__libc_init_array+0x38>)
 80036a6:	4c0d      	ldr	r4, [pc, #52]	; (80036dc <__libc_init_array+0x3c>)
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	42a6      	cmp	r6, r4
 80036ae:	d109      	bne.n	80036c4 <__libc_init_array+0x24>
 80036b0:	f000 fc9c 	bl	8003fec <_init>
 80036b4:	2600      	movs	r6, #0
 80036b6:	4d0a      	ldr	r5, [pc, #40]	; (80036e0 <__libc_init_array+0x40>)
 80036b8:	4c0a      	ldr	r4, [pc, #40]	; (80036e4 <__libc_init_array+0x44>)
 80036ba:	1b64      	subs	r4, r4, r5
 80036bc:	10a4      	asrs	r4, r4, #2
 80036be:	42a6      	cmp	r6, r4
 80036c0:	d105      	bne.n	80036ce <__libc_init_array+0x2e>
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c8:	4798      	blx	r3
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7ee      	b.n	80036ac <__libc_init_array+0xc>
 80036ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d2:	4798      	blx	r3
 80036d4:	3601      	adds	r6, #1
 80036d6:	e7f2      	b.n	80036be <__libc_init_array+0x1e>
 80036d8:	08004110 	.word	0x08004110
 80036dc:	08004110 	.word	0x08004110
 80036e0:	08004110 	.word	0x08004110
 80036e4:	08004114 	.word	0x08004114

080036e8 <memset>:
 80036e8:	4603      	mov	r3, r0
 80036ea:	4402      	add	r2, r0
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memset+0xa>
 80036f0:	4770      	bx	lr
 80036f2:	f803 1b01 	strb.w	r1, [r3], #1
 80036f6:	e7f9      	b.n	80036ec <memset+0x4>

080036f8 <siprintf>:
 80036f8:	b40e      	push	{r1, r2, r3}
 80036fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036fe:	b500      	push	{lr}
 8003700:	b09c      	sub	sp, #112	; 0x70
 8003702:	ab1d      	add	r3, sp, #116	; 0x74
 8003704:	9002      	str	r0, [sp, #8]
 8003706:	9006      	str	r0, [sp, #24]
 8003708:	9107      	str	r1, [sp, #28]
 800370a:	9104      	str	r1, [sp, #16]
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <siprintf+0x38>)
 800370e:	4909      	ldr	r1, [pc, #36]	; (8003734 <siprintf+0x3c>)
 8003710:	f853 2b04 	ldr.w	r2, [r3], #4
 8003714:	9105      	str	r1, [sp, #20]
 8003716:	6800      	ldr	r0, [r0, #0]
 8003718:	a902      	add	r1, sp, #8
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	f000 f868 	bl	80037f0 <_svfiprintf_r>
 8003720:	2200      	movs	r2, #0
 8003722:	9b02      	ldr	r3, [sp, #8]
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	b01c      	add	sp, #112	; 0x70
 8003728:	f85d eb04 	ldr.w	lr, [sp], #4
 800372c:	b003      	add	sp, #12
 800372e:	4770      	bx	lr
 8003730:	20000070 	.word	0x20000070
 8003734:	ffff0208 	.word	0xffff0208

08003738 <__ssputs_r>:
 8003738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800373c:	688e      	ldr	r6, [r1, #8]
 800373e:	4682      	mov	sl, r0
 8003740:	429e      	cmp	r6, r3
 8003742:	460c      	mov	r4, r1
 8003744:	4690      	mov	r8, r2
 8003746:	461f      	mov	r7, r3
 8003748:	d838      	bhi.n	80037bc <__ssputs_r+0x84>
 800374a:	898a      	ldrh	r2, [r1, #12]
 800374c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003750:	d032      	beq.n	80037b8 <__ssputs_r+0x80>
 8003752:	6825      	ldr	r5, [r4, #0]
 8003754:	6909      	ldr	r1, [r1, #16]
 8003756:	3301      	adds	r3, #1
 8003758:	eba5 0901 	sub.w	r9, r5, r1
 800375c:	6965      	ldr	r5, [r4, #20]
 800375e:	444b      	add	r3, r9
 8003760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003768:	106d      	asrs	r5, r5, #1
 800376a:	429d      	cmp	r5, r3
 800376c:	bf38      	it	cc
 800376e:	461d      	movcc	r5, r3
 8003770:	0553      	lsls	r3, r2, #21
 8003772:	d531      	bpl.n	80037d8 <__ssputs_r+0xa0>
 8003774:	4629      	mov	r1, r5
 8003776:	f000 fb6f 	bl	8003e58 <_malloc_r>
 800377a:	4606      	mov	r6, r0
 800377c:	b950      	cbnz	r0, 8003794 <__ssputs_r+0x5c>
 800377e:	230c      	movs	r3, #12
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	f8ca 3000 	str.w	r3, [sl]
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003794:	464a      	mov	r2, r9
 8003796:	6921      	ldr	r1, [r4, #16]
 8003798:	f000 face 	bl	8003d38 <memcpy>
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	6126      	str	r6, [r4, #16]
 80037aa:	444e      	add	r6, r9
 80037ac:	6026      	str	r6, [r4, #0]
 80037ae:	463e      	mov	r6, r7
 80037b0:	6165      	str	r5, [r4, #20]
 80037b2:	eba5 0509 	sub.w	r5, r5, r9
 80037b6:	60a5      	str	r5, [r4, #8]
 80037b8:	42be      	cmp	r6, r7
 80037ba:	d900      	bls.n	80037be <__ssputs_r+0x86>
 80037bc:	463e      	mov	r6, r7
 80037be:	4632      	mov	r2, r6
 80037c0:	4641      	mov	r1, r8
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	f000 fac6 	bl	8003d54 <memmove>
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	2000      	movs	r0, #0
 80037cc:	1b9b      	subs	r3, r3, r6
 80037ce:	60a3      	str	r3, [r4, #8]
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	4433      	add	r3, r6
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	e7db      	b.n	8003790 <__ssputs_r+0x58>
 80037d8:	462a      	mov	r2, r5
 80037da:	f000 fbb1 	bl	8003f40 <_realloc_r>
 80037de:	4606      	mov	r6, r0
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d1e1      	bne.n	80037a8 <__ssputs_r+0x70>
 80037e4:	4650      	mov	r0, sl
 80037e6:	6921      	ldr	r1, [r4, #16]
 80037e8:	f000 face 	bl	8003d88 <_free_r>
 80037ec:	e7c7      	b.n	800377e <__ssputs_r+0x46>
	...

080037f0 <_svfiprintf_r>:
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4698      	mov	r8, r3
 80037f6:	898b      	ldrh	r3, [r1, #12]
 80037f8:	4607      	mov	r7, r0
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	460d      	mov	r5, r1
 80037fe:	4614      	mov	r4, r2
 8003800:	b09d      	sub	sp, #116	; 0x74
 8003802:	d50e      	bpl.n	8003822 <_svfiprintf_r+0x32>
 8003804:	690b      	ldr	r3, [r1, #16]
 8003806:	b963      	cbnz	r3, 8003822 <_svfiprintf_r+0x32>
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	f000 fb25 	bl	8003e58 <_malloc_r>
 800380e:	6028      	str	r0, [r5, #0]
 8003810:	6128      	str	r0, [r5, #16]
 8003812:	b920      	cbnz	r0, 800381e <_svfiprintf_r+0x2e>
 8003814:	230c      	movs	r3, #12
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e0d1      	b.n	80039c2 <_svfiprintf_r+0x1d2>
 800381e:	2340      	movs	r3, #64	; 0x40
 8003820:	616b      	str	r3, [r5, #20]
 8003822:	2300      	movs	r3, #0
 8003824:	9309      	str	r3, [sp, #36]	; 0x24
 8003826:	2320      	movs	r3, #32
 8003828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800382c:	2330      	movs	r3, #48	; 0x30
 800382e:	f04f 0901 	mov.w	r9, #1
 8003832:	f8cd 800c 	str.w	r8, [sp, #12]
 8003836:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039dc <_svfiprintf_r+0x1ec>
 800383a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383e:	4623      	mov	r3, r4
 8003840:	469a      	mov	sl, r3
 8003842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003846:	b10a      	cbz	r2, 800384c <_svfiprintf_r+0x5c>
 8003848:	2a25      	cmp	r2, #37	; 0x25
 800384a:	d1f9      	bne.n	8003840 <_svfiprintf_r+0x50>
 800384c:	ebba 0b04 	subs.w	fp, sl, r4
 8003850:	d00b      	beq.n	800386a <_svfiprintf_r+0x7a>
 8003852:	465b      	mov	r3, fp
 8003854:	4622      	mov	r2, r4
 8003856:	4629      	mov	r1, r5
 8003858:	4638      	mov	r0, r7
 800385a:	f7ff ff6d 	bl	8003738 <__ssputs_r>
 800385e:	3001      	adds	r0, #1
 8003860:	f000 80aa 	beq.w	80039b8 <_svfiprintf_r+0x1c8>
 8003864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003866:	445a      	add	r2, fp
 8003868:	9209      	str	r2, [sp, #36]	; 0x24
 800386a:	f89a 3000 	ldrb.w	r3, [sl]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a2 	beq.w	80039b8 <_svfiprintf_r+0x1c8>
 8003874:	2300      	movs	r3, #0
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387e:	f10a 0a01 	add.w	sl, sl, #1
 8003882:	9304      	str	r3, [sp, #16]
 8003884:	9307      	str	r3, [sp, #28]
 8003886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800388a:	931a      	str	r3, [sp, #104]	; 0x68
 800388c:	4654      	mov	r4, sl
 800388e:	2205      	movs	r2, #5
 8003890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003894:	4851      	ldr	r0, [pc, #324]	; (80039dc <_svfiprintf_r+0x1ec>)
 8003896:	f000 fa41 	bl	8003d1c <memchr>
 800389a:	9a04      	ldr	r2, [sp, #16]
 800389c:	b9d8      	cbnz	r0, 80038d6 <_svfiprintf_r+0xe6>
 800389e:	06d0      	lsls	r0, r2, #27
 80038a0:	bf44      	itt	mi
 80038a2:	2320      	movmi	r3, #32
 80038a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a8:	0711      	lsls	r1, r2, #28
 80038aa:	bf44      	itt	mi
 80038ac:	232b      	movmi	r3, #43	; 0x2b
 80038ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b2:	f89a 3000 	ldrb.w	r3, [sl]
 80038b6:	2b2a      	cmp	r3, #42	; 0x2a
 80038b8:	d015      	beq.n	80038e6 <_svfiprintf_r+0xf6>
 80038ba:	4654      	mov	r4, sl
 80038bc:	2000      	movs	r0, #0
 80038be:	f04f 0c0a 	mov.w	ip, #10
 80038c2:	9a07      	ldr	r2, [sp, #28]
 80038c4:	4621      	mov	r1, r4
 80038c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ca:	3b30      	subs	r3, #48	; 0x30
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d94e      	bls.n	800396e <_svfiprintf_r+0x17e>
 80038d0:	b1b0      	cbz	r0, 8003900 <_svfiprintf_r+0x110>
 80038d2:	9207      	str	r2, [sp, #28]
 80038d4:	e014      	b.n	8003900 <_svfiprintf_r+0x110>
 80038d6:	eba0 0308 	sub.w	r3, r0, r8
 80038da:	fa09 f303 	lsl.w	r3, r9, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	46a2      	mov	sl, r4
 80038e2:	9304      	str	r3, [sp, #16]
 80038e4:	e7d2      	b.n	800388c <_svfiprintf_r+0x9c>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9103      	str	r1, [sp, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfbb      	ittet	lt
 80038f2:	425b      	neglt	r3, r3
 80038f4:	f042 0202 	orrlt.w	r2, r2, #2
 80038f8:	9307      	strge	r3, [sp, #28]
 80038fa:	9307      	strlt	r3, [sp, #28]
 80038fc:	bfb8      	it	lt
 80038fe:	9204      	strlt	r2, [sp, #16]
 8003900:	7823      	ldrb	r3, [r4, #0]
 8003902:	2b2e      	cmp	r3, #46	; 0x2e
 8003904:	d10c      	bne.n	8003920 <_svfiprintf_r+0x130>
 8003906:	7863      	ldrb	r3, [r4, #1]
 8003908:	2b2a      	cmp	r3, #42	; 0x2a
 800390a:	d135      	bne.n	8003978 <_svfiprintf_r+0x188>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	3402      	adds	r4, #2
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	9203      	str	r2, [sp, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	bfb8      	it	lt
 800391a:	f04f 33ff 	movlt.w	r3, #4294967295
 800391e:	9305      	str	r3, [sp, #20]
 8003920:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80039e0 <_svfiprintf_r+0x1f0>
 8003924:	2203      	movs	r2, #3
 8003926:	4650      	mov	r0, sl
 8003928:	7821      	ldrb	r1, [r4, #0]
 800392a:	f000 f9f7 	bl	8003d1c <memchr>
 800392e:	b140      	cbz	r0, 8003942 <_svfiprintf_r+0x152>
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	eba0 000a 	sub.w	r0, r0, sl
 8003936:	fa03 f000 	lsl.w	r0, r3, r0
 800393a:	9b04      	ldr	r3, [sp, #16]
 800393c:	3401      	adds	r4, #1
 800393e:	4303      	orrs	r3, r0
 8003940:	9304      	str	r3, [sp, #16]
 8003942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003946:	2206      	movs	r2, #6
 8003948:	4826      	ldr	r0, [pc, #152]	; (80039e4 <_svfiprintf_r+0x1f4>)
 800394a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394e:	f000 f9e5 	bl	8003d1c <memchr>
 8003952:	2800      	cmp	r0, #0
 8003954:	d038      	beq.n	80039c8 <_svfiprintf_r+0x1d8>
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <_svfiprintf_r+0x1f8>)
 8003958:	bb1b      	cbnz	r3, 80039a2 <_svfiprintf_r+0x1b2>
 800395a:	9b03      	ldr	r3, [sp, #12]
 800395c:	3307      	adds	r3, #7
 800395e:	f023 0307 	bic.w	r3, r3, #7
 8003962:	3308      	adds	r3, #8
 8003964:	9303      	str	r3, [sp, #12]
 8003966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003968:	4433      	add	r3, r6
 800396a:	9309      	str	r3, [sp, #36]	; 0x24
 800396c:	e767      	b.n	800383e <_svfiprintf_r+0x4e>
 800396e:	460c      	mov	r4, r1
 8003970:	2001      	movs	r0, #1
 8003972:	fb0c 3202 	mla	r2, ip, r2, r3
 8003976:	e7a5      	b.n	80038c4 <_svfiprintf_r+0xd4>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 0c0a 	mov.w	ip, #10
 800397e:	4619      	mov	r1, r3
 8003980:	3401      	adds	r4, #1
 8003982:	9305      	str	r3, [sp, #20]
 8003984:	4620      	mov	r0, r4
 8003986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800398a:	3a30      	subs	r2, #48	; 0x30
 800398c:	2a09      	cmp	r2, #9
 800398e:	d903      	bls.n	8003998 <_svfiprintf_r+0x1a8>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0c5      	beq.n	8003920 <_svfiprintf_r+0x130>
 8003994:	9105      	str	r1, [sp, #20]
 8003996:	e7c3      	b.n	8003920 <_svfiprintf_r+0x130>
 8003998:	4604      	mov	r4, r0
 800399a:	2301      	movs	r3, #1
 800399c:	fb0c 2101 	mla	r1, ip, r1, r2
 80039a0:	e7f0      	b.n	8003984 <_svfiprintf_r+0x194>
 80039a2:	ab03      	add	r3, sp, #12
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	462a      	mov	r2, r5
 80039a8:	4638      	mov	r0, r7
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <_svfiprintf_r+0x1fc>)
 80039ac:	a904      	add	r1, sp, #16
 80039ae:	f3af 8000 	nop.w
 80039b2:	1c42      	adds	r2, r0, #1
 80039b4:	4606      	mov	r6, r0
 80039b6:	d1d6      	bne.n	8003966 <_svfiprintf_r+0x176>
 80039b8:	89ab      	ldrh	r3, [r5, #12]
 80039ba:	065b      	lsls	r3, r3, #25
 80039bc:	f53f af2c 	bmi.w	8003818 <_svfiprintf_r+0x28>
 80039c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039c2:	b01d      	add	sp, #116	; 0x74
 80039c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c8:	ab03      	add	r3, sp, #12
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	462a      	mov	r2, r5
 80039ce:	4638      	mov	r0, r7
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <_svfiprintf_r+0x1fc>)
 80039d2:	a904      	add	r1, sp, #16
 80039d4:	f000 f87c 	bl	8003ad0 <_printf_i>
 80039d8:	e7eb      	b.n	80039b2 <_svfiprintf_r+0x1c2>
 80039da:	bf00      	nop
 80039dc:	080040da 	.word	0x080040da
 80039e0:	080040e0 	.word	0x080040e0
 80039e4:	080040e4 	.word	0x080040e4
 80039e8:	00000000 	.word	0x00000000
 80039ec:	08003739 	.word	0x08003739

080039f0 <_printf_common>:
 80039f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	4616      	mov	r6, r2
 80039f6:	4699      	mov	r9, r3
 80039f8:	688a      	ldr	r2, [r1, #8]
 80039fa:	690b      	ldr	r3, [r1, #16]
 80039fc:	4607      	mov	r7, r0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bfb8      	it	lt
 8003a02:	4613      	movlt	r3, r2
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a10:	b10a      	cbz	r2, 8003a16 <_printf_common+0x26>
 8003a12:	3301      	adds	r3, #1
 8003a14:	6033      	str	r3, [r6, #0]
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	0699      	lsls	r1, r3, #26
 8003a1a:	bf42      	ittt	mi
 8003a1c:	6833      	ldrmi	r3, [r6, #0]
 8003a1e:	3302      	addmi	r3, #2
 8003a20:	6033      	strmi	r3, [r6, #0]
 8003a22:	6825      	ldr	r5, [r4, #0]
 8003a24:	f015 0506 	ands.w	r5, r5, #6
 8003a28:	d106      	bne.n	8003a38 <_printf_common+0x48>
 8003a2a:	f104 0a19 	add.w	sl, r4, #25
 8003a2e:	68e3      	ldr	r3, [r4, #12]
 8003a30:	6832      	ldr	r2, [r6, #0]
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	42ab      	cmp	r3, r5
 8003a36:	dc28      	bgt.n	8003a8a <_printf_common+0x9a>
 8003a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a3c:	1e13      	subs	r3, r2, #0
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	bf18      	it	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	0692      	lsls	r2, r2, #26
 8003a46:	d42d      	bmi.n	8003aa4 <_printf_common+0xb4>
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a50:	47c0      	blx	r8
 8003a52:	3001      	adds	r0, #1
 8003a54:	d020      	beq.n	8003a98 <_printf_common+0xa8>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	68e5      	ldr	r5, [r4, #12]
 8003a5a:	f003 0306 	and.w	r3, r3, #6
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	bf18      	it	ne
 8003a62:	2500      	movne	r5, #0
 8003a64:	6832      	ldr	r2, [r6, #0]
 8003a66:	f04f 0600 	mov.w	r6, #0
 8003a6a:	68a3      	ldr	r3, [r4, #8]
 8003a6c:	bf08      	it	eq
 8003a6e:	1aad      	subeq	r5, r5, r2
 8003a70:	6922      	ldr	r2, [r4, #16]
 8003a72:	bf08      	it	eq
 8003a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	bfc4      	itt	gt
 8003a7c:	1a9b      	subgt	r3, r3, r2
 8003a7e:	18ed      	addgt	r5, r5, r3
 8003a80:	341a      	adds	r4, #26
 8003a82:	42b5      	cmp	r5, r6
 8003a84:	d11a      	bne.n	8003abc <_printf_common+0xcc>
 8003a86:	2000      	movs	r0, #0
 8003a88:	e008      	b.n	8003a9c <_printf_common+0xac>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4652      	mov	r2, sl
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4638      	mov	r0, r7
 8003a92:	47c0      	blx	r8
 8003a94:	3001      	adds	r0, #1
 8003a96:	d103      	bne.n	8003aa0 <_printf_common+0xb0>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa0:	3501      	adds	r5, #1
 8003aa2:	e7c4      	b.n	8003a2e <_printf_common+0x3e>
 8003aa4:	2030      	movs	r0, #48	; 0x30
 8003aa6:	18e1      	adds	r1, r4, r3
 8003aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ab2:	4422      	add	r2, r4
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aba:	e7c5      	b.n	8003a48 <_printf_common+0x58>
 8003abc:	2301      	movs	r3, #1
 8003abe:	4622      	mov	r2, r4
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	47c0      	blx	r8
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d0e6      	beq.n	8003a98 <_printf_common+0xa8>
 8003aca:	3601      	adds	r6, #1
 8003acc:	e7d9      	b.n	8003a82 <_printf_common+0x92>
	...

08003ad0 <_printf_i>:
 8003ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	7e0f      	ldrb	r7, [r1, #24]
 8003ad6:	4691      	mov	r9, r2
 8003ad8:	2f78      	cmp	r7, #120	; 0x78
 8003ada:	4680      	mov	r8, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	469a      	mov	sl, r3
 8003ae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ae6:	d807      	bhi.n	8003af8 <_printf_i+0x28>
 8003ae8:	2f62      	cmp	r7, #98	; 0x62
 8003aea:	d80a      	bhi.n	8003b02 <_printf_i+0x32>
 8003aec:	2f00      	cmp	r7, #0
 8003aee:	f000 80d9 	beq.w	8003ca4 <_printf_i+0x1d4>
 8003af2:	2f58      	cmp	r7, #88	; 0x58
 8003af4:	f000 80a4 	beq.w	8003c40 <_printf_i+0x170>
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b00:	e03a      	b.n	8003b78 <_printf_i+0xa8>
 8003b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b06:	2b15      	cmp	r3, #21
 8003b08:	d8f6      	bhi.n	8003af8 <_printf_i+0x28>
 8003b0a:	a101      	add	r1, pc, #4	; (adr r1, 8003b10 <_printf_i+0x40>)
 8003b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b10:	08003b69 	.word	0x08003b69
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003af9 	.word	0x08003af9
 8003b1c:	08003af9 	.word	0x08003af9
 8003b20:	08003af9 	.word	0x08003af9
 8003b24:	08003af9 	.word	0x08003af9
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003af9 	.word	0x08003af9
 8003b30:	08003af9 	.word	0x08003af9
 8003b34:	08003af9 	.word	0x08003af9
 8003b38:	08003af9 	.word	0x08003af9
 8003b3c:	08003c8b 	.word	0x08003c8b
 8003b40:	08003bad 	.word	0x08003bad
 8003b44:	08003c6d 	.word	0x08003c6d
 8003b48:	08003af9 	.word	0x08003af9
 8003b4c:	08003af9 	.word	0x08003af9
 8003b50:	08003cad 	.word	0x08003cad
 8003b54:	08003af9 	.word	0x08003af9
 8003b58:	08003bad 	.word	0x08003bad
 8003b5c:	08003af9 	.word	0x08003af9
 8003b60:	08003af9 	.word	0x08003af9
 8003b64:	08003c75 	.word	0x08003c75
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	1d1a      	adds	r2, r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	602a      	str	r2, [r5, #0]
 8003b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0a4      	b.n	8003cc6 <_printf_i+0x1f6>
 8003b7c:	6820      	ldr	r0, [r4, #0]
 8003b7e:	6829      	ldr	r1, [r5, #0]
 8003b80:	0606      	lsls	r6, r0, #24
 8003b82:	f101 0304 	add.w	r3, r1, #4
 8003b86:	d50a      	bpl.n	8003b9e <_printf_i+0xce>
 8003b88:	680e      	ldr	r6, [r1, #0]
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	2e00      	cmp	r6, #0
 8003b8e:	da03      	bge.n	8003b98 <_printf_i+0xc8>
 8003b90:	232d      	movs	r3, #45	; 0x2d
 8003b92:	4276      	negs	r6, r6
 8003b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b98:	230a      	movs	r3, #10
 8003b9a:	485e      	ldr	r0, [pc, #376]	; (8003d14 <_printf_i+0x244>)
 8003b9c:	e019      	b.n	8003bd2 <_printf_i+0x102>
 8003b9e:	680e      	ldr	r6, [r1, #0]
 8003ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	bf18      	it	ne
 8003ba8:	b236      	sxthne	r6, r6
 8003baa:	e7ef      	b.n	8003b8c <_printf_i+0xbc>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	1d19      	adds	r1, r3, #4
 8003bb2:	6029      	str	r1, [r5, #0]
 8003bb4:	0601      	lsls	r1, r0, #24
 8003bb6:	d501      	bpl.n	8003bbc <_printf_i+0xec>
 8003bb8:	681e      	ldr	r6, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <_printf_i+0xf2>
 8003bbc:	0646      	lsls	r6, r0, #25
 8003bbe:	d5fb      	bpl.n	8003bb8 <_printf_i+0xe8>
 8003bc0:	881e      	ldrh	r6, [r3, #0]
 8003bc2:	2f6f      	cmp	r7, #111	; 0x6f
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2308      	moveq	r3, #8
 8003bc8:	230a      	movne	r3, #10
 8003bca:	4852      	ldr	r0, [pc, #328]	; (8003d14 <_printf_i+0x244>)
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bd2:	6865      	ldr	r5, [r4, #4]
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	bfa8      	it	ge
 8003bd8:	6821      	ldrge	r1, [r4, #0]
 8003bda:	60a5      	str	r5, [r4, #8]
 8003bdc:	bfa4      	itt	ge
 8003bde:	f021 0104 	bicge.w	r1, r1, #4
 8003be2:	6021      	strge	r1, [r4, #0]
 8003be4:	b90e      	cbnz	r6, 8003bea <_printf_i+0x11a>
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	d04d      	beq.n	8003c86 <_printf_i+0x1b6>
 8003bea:	4615      	mov	r5, r2
 8003bec:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bf0:	fb03 6711 	mls	r7, r3, r1, r6
 8003bf4:	5dc7      	ldrb	r7, [r0, r7]
 8003bf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bfa:	4637      	mov	r7, r6
 8003bfc:	42bb      	cmp	r3, r7
 8003bfe:	460e      	mov	r6, r1
 8003c00:	d9f4      	bls.n	8003bec <_printf_i+0x11c>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d10b      	bne.n	8003c1e <_printf_i+0x14e>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	07de      	lsls	r6, r3, #31
 8003c0a:	d508      	bpl.n	8003c1e <_printf_i+0x14e>
 8003c0c:	6923      	ldr	r3, [r4, #16]
 8003c0e:	6861      	ldr	r1, [r4, #4]
 8003c10:	4299      	cmp	r1, r3
 8003c12:	bfde      	ittt	le
 8003c14:	2330      	movle	r3, #48	; 0x30
 8003c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c1e:	1b52      	subs	r2, r2, r5
 8003c20:	6122      	str	r2, [r4, #16]
 8003c22:	464b      	mov	r3, r9
 8003c24:	4621      	mov	r1, r4
 8003c26:	4640      	mov	r0, r8
 8003c28:	f8cd a000 	str.w	sl, [sp]
 8003c2c:	aa03      	add	r2, sp, #12
 8003c2e:	f7ff fedf 	bl	80039f0 <_printf_common>
 8003c32:	3001      	adds	r0, #1
 8003c34:	d14c      	bne.n	8003cd0 <_printf_i+0x200>
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	b004      	add	sp, #16
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	4834      	ldr	r0, [pc, #208]	; (8003d14 <_printf_i+0x244>)
 8003c42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c46:	6829      	ldr	r1, [r5, #0]
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c4e:	6029      	str	r1, [r5, #0]
 8003c50:	061d      	lsls	r5, r3, #24
 8003c52:	d514      	bpl.n	8003c7e <_printf_i+0x1ae>
 8003c54:	07df      	lsls	r7, r3, #31
 8003c56:	bf44      	itt	mi
 8003c58:	f043 0320 	orrmi.w	r3, r3, #32
 8003c5c:	6023      	strmi	r3, [r4, #0]
 8003c5e:	b91e      	cbnz	r6, 8003c68 <_printf_i+0x198>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	f023 0320 	bic.w	r3, r3, #32
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	2310      	movs	r3, #16
 8003c6a:	e7af      	b.n	8003bcc <_printf_i+0xfc>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	f043 0320 	orr.w	r3, r3, #32
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	2378      	movs	r3, #120	; 0x78
 8003c76:	4828      	ldr	r0, [pc, #160]	; (8003d18 <_printf_i+0x248>)
 8003c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c7c:	e7e3      	b.n	8003c46 <_printf_i+0x176>
 8003c7e:	0659      	lsls	r1, r3, #25
 8003c80:	bf48      	it	mi
 8003c82:	b2b6      	uxthmi	r6, r6
 8003c84:	e7e6      	b.n	8003c54 <_printf_i+0x184>
 8003c86:	4615      	mov	r5, r2
 8003c88:	e7bb      	b.n	8003c02 <_printf_i+0x132>
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	6826      	ldr	r6, [r4, #0]
 8003c8e:	1d18      	adds	r0, r3, #4
 8003c90:	6961      	ldr	r1, [r4, #20]
 8003c92:	6028      	str	r0, [r5, #0]
 8003c94:	0635      	lsls	r5, r6, #24
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	d501      	bpl.n	8003c9e <_printf_i+0x1ce>
 8003c9a:	6019      	str	r1, [r3, #0]
 8003c9c:	e002      	b.n	8003ca4 <_printf_i+0x1d4>
 8003c9e:	0670      	lsls	r0, r6, #25
 8003ca0:	d5fb      	bpl.n	8003c9a <_printf_i+0x1ca>
 8003ca2:	8019      	strh	r1, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4615      	mov	r5, r2
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	e7ba      	b.n	8003c22 <_printf_i+0x152>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	602a      	str	r2, [r5, #0]
 8003cb4:	681d      	ldr	r5, [r3, #0]
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f000 f82f 	bl	8003d1c <memchr>
 8003cbe:	b108      	cbz	r0, 8003cc4 <_printf_i+0x1f4>
 8003cc0:	1b40      	subs	r0, r0, r5
 8003cc2:	6060      	str	r0, [r4, #4]
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cce:	e7a8      	b.n	8003c22 <_printf_i+0x152>
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	47d0      	blx	sl
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d0ab      	beq.n	8003c36 <_printf_i+0x166>
 8003cde:	6823      	ldr	r3, [r4, #0]
 8003ce0:	079b      	lsls	r3, r3, #30
 8003ce2:	d413      	bmi.n	8003d0c <_printf_i+0x23c>
 8003ce4:	68e0      	ldr	r0, [r4, #12]
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	bfb8      	it	lt
 8003cec:	4618      	movlt	r0, r3
 8003cee:	e7a4      	b.n	8003c3a <_printf_i+0x16a>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4632      	mov	r2, r6
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	47d0      	blx	sl
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d09b      	beq.n	8003c36 <_printf_i+0x166>
 8003cfe:	3501      	adds	r5, #1
 8003d00:	68e3      	ldr	r3, [r4, #12]
 8003d02:	9903      	ldr	r1, [sp, #12]
 8003d04:	1a5b      	subs	r3, r3, r1
 8003d06:	42ab      	cmp	r3, r5
 8003d08:	dcf2      	bgt.n	8003cf0 <_printf_i+0x220>
 8003d0a:	e7eb      	b.n	8003ce4 <_printf_i+0x214>
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	f104 0619 	add.w	r6, r4, #25
 8003d12:	e7f5      	b.n	8003d00 <_printf_i+0x230>
 8003d14:	080040eb 	.word	0x080040eb
 8003d18:	080040fc 	.word	0x080040fc

08003d1c <memchr>:
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	b2c9      	uxtb	r1, r1
 8003d22:	4402      	add	r2, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	d101      	bne.n	8003d2e <memchr+0x12>
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e003      	b.n	8003d36 <memchr+0x1a>
 8003d2e:	7804      	ldrb	r4, [r0, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	428c      	cmp	r4, r1
 8003d34:	d1f6      	bne.n	8003d24 <memchr+0x8>
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <memcpy>:
 8003d38:	440a      	add	r2, r1
 8003d3a:	4291      	cmp	r1, r2
 8003d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d40:	d100      	bne.n	8003d44 <memcpy+0xc>
 8003d42:	4770      	bx	lr
 8003d44:	b510      	push	{r4, lr}
 8003d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4a:	4291      	cmp	r1, r2
 8003d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d50:	d1f9      	bne.n	8003d46 <memcpy+0xe>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memmove>:
 8003d54:	4288      	cmp	r0, r1
 8003d56:	b510      	push	{r4, lr}
 8003d58:	eb01 0402 	add.w	r4, r1, r2
 8003d5c:	d902      	bls.n	8003d64 <memmove+0x10>
 8003d5e:	4284      	cmp	r4, r0
 8003d60:	4623      	mov	r3, r4
 8003d62:	d807      	bhi.n	8003d74 <memmove+0x20>
 8003d64:	1e43      	subs	r3, r0, #1
 8003d66:	42a1      	cmp	r1, r4
 8003d68:	d008      	beq.n	8003d7c <memmove+0x28>
 8003d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d72:	e7f8      	b.n	8003d66 <memmove+0x12>
 8003d74:	4601      	mov	r1, r0
 8003d76:	4402      	add	r2, r0
 8003d78:	428a      	cmp	r2, r1
 8003d7a:	d100      	bne.n	8003d7e <memmove+0x2a>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d86:	e7f7      	b.n	8003d78 <memmove+0x24>

08003d88 <_free_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d040      	beq.n	8003e12 <_free_r+0x8a>
 8003d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d94:	1f0c      	subs	r4, r1, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfb8      	it	lt
 8003d9a:	18e4      	addlt	r4, r4, r3
 8003d9c:	f000 f910 	bl	8003fc0 <__malloc_lock>
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <_free_r+0x8c>)
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	b933      	cbnz	r3, 8003db4 <_free_r+0x2c>
 8003da6:	6063      	str	r3, [r4, #4]
 8003da8:	6014      	str	r4, [r2, #0]
 8003daa:	4628      	mov	r0, r5
 8003dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db0:	f000 b90c 	b.w	8003fcc <__malloc_unlock>
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	d908      	bls.n	8003dca <_free_r+0x42>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	1821      	adds	r1, r4, r0
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	bf01      	itttt	eq
 8003dc0:	6819      	ldreq	r1, [r3, #0]
 8003dc2:	685b      	ldreq	r3, [r3, #4]
 8003dc4:	1809      	addeq	r1, r1, r0
 8003dc6:	6021      	streq	r1, [r4, #0]
 8003dc8:	e7ed      	b.n	8003da6 <_free_r+0x1e>
 8003dca:	461a      	mov	r2, r3
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	b10b      	cbz	r3, 8003dd4 <_free_r+0x4c>
 8003dd0:	42a3      	cmp	r3, r4
 8003dd2:	d9fa      	bls.n	8003dca <_free_r+0x42>
 8003dd4:	6811      	ldr	r1, [r2, #0]
 8003dd6:	1850      	adds	r0, r2, r1
 8003dd8:	42a0      	cmp	r0, r4
 8003dda:	d10b      	bne.n	8003df4 <_free_r+0x6c>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	4401      	add	r1, r0
 8003de0:	1850      	adds	r0, r2, r1
 8003de2:	4283      	cmp	r3, r0
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	d1e0      	bne.n	8003daa <_free_r+0x22>
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4401      	add	r1, r0
 8003dee:	6011      	str	r1, [r2, #0]
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	e7da      	b.n	8003daa <_free_r+0x22>
 8003df4:	d902      	bls.n	8003dfc <_free_r+0x74>
 8003df6:	230c      	movs	r3, #12
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	e7d6      	b.n	8003daa <_free_r+0x22>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	1821      	adds	r1, r4, r0
 8003e00:	428b      	cmp	r3, r1
 8003e02:	bf01      	itttt	eq
 8003e04:	6819      	ldreq	r1, [r3, #0]
 8003e06:	685b      	ldreq	r3, [r3, #4]
 8003e08:	1809      	addeq	r1, r1, r0
 8003e0a:	6021      	streq	r1, [r4, #0]
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	6054      	str	r4, [r2, #4]
 8003e10:	e7cb      	b.n	8003daa <_free_r+0x22>
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	200002d0 	.word	0x200002d0

08003e18 <sbrk_aligned>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4e0e      	ldr	r6, [pc, #56]	; (8003e54 <sbrk_aligned+0x3c>)
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	6831      	ldr	r1, [r6, #0]
 8003e20:	4605      	mov	r5, r0
 8003e22:	b911      	cbnz	r1, 8003e2a <sbrk_aligned+0x12>
 8003e24:	f000 f8bc 	bl	8003fa0 <_sbrk_r>
 8003e28:	6030      	str	r0, [r6, #0]
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f8b7 	bl	8003fa0 <_sbrk_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d00a      	beq.n	8003e4c <sbrk_aligned+0x34>
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d007      	beq.n	8003e50 <sbrk_aligned+0x38>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 f8ac 	bl	8003fa0 <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d101      	bne.n	8003e50 <sbrk_aligned+0x38>
 8003e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e50:	4620      	mov	r0, r4
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	200002d4 	.word	0x200002d4

08003e58 <_malloc_r>:
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	1ccd      	adds	r5, r1, #3
 8003e5e:	f025 0503 	bic.w	r5, r5, #3
 8003e62:	3508      	adds	r5, #8
 8003e64:	2d0c      	cmp	r5, #12
 8003e66:	bf38      	it	cc
 8003e68:	250c      	movcc	r5, #12
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	db01      	blt.n	8003e74 <_malloc_r+0x1c>
 8003e70:	42a9      	cmp	r1, r5
 8003e72:	d905      	bls.n	8003e80 <_malloc_r+0x28>
 8003e74:	230c      	movs	r3, #12
 8003e76:	2600      	movs	r6, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e80:	4e2e      	ldr	r6, [pc, #184]	; (8003f3c <_malloc_r+0xe4>)
 8003e82:	f000 f89d 	bl	8003fc0 <__malloc_lock>
 8003e86:	6833      	ldr	r3, [r6, #0]
 8003e88:	461c      	mov	r4, r3
 8003e8a:	bb34      	cbnz	r4, 8003eda <_malloc_r+0x82>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f7ff ffc2 	bl	8003e18 <sbrk_aligned>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	4604      	mov	r4, r0
 8003e98:	d14d      	bne.n	8003f36 <_malloc_r+0xde>
 8003e9a:	6834      	ldr	r4, [r6, #0]
 8003e9c:	4626      	mov	r6, r4
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d140      	bne.n	8003f24 <_malloc_r+0xcc>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	eb04 0803 	add.w	r8, r4, r3
 8003eac:	f000 f878 	bl	8003fa0 <_sbrk_r>
 8003eb0:	4580      	cmp	r8, r0
 8003eb2:	d13a      	bne.n	8003f2a <_malloc_r+0xd2>
 8003eb4:	6821      	ldr	r1, [r4, #0]
 8003eb6:	3503      	adds	r5, #3
 8003eb8:	1a6d      	subs	r5, r5, r1
 8003eba:	f025 0503 	bic.w	r5, r5, #3
 8003ebe:	3508      	adds	r5, #8
 8003ec0:	2d0c      	cmp	r5, #12
 8003ec2:	bf38      	it	cc
 8003ec4:	250c      	movcc	r5, #12
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7ff ffa5 	bl	8003e18 <sbrk_aligned>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d02b      	beq.n	8003f2a <_malloc_r+0xd2>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	442b      	add	r3, r5
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	e00e      	b.n	8003ef8 <_malloc_r+0xa0>
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	1b52      	subs	r2, r2, r5
 8003ede:	d41e      	bmi.n	8003f1e <_malloc_r+0xc6>
 8003ee0:	2a0b      	cmp	r2, #11
 8003ee2:	d916      	bls.n	8003f12 <_malloc_r+0xba>
 8003ee4:	1961      	adds	r1, r4, r5
 8003ee6:	42a3      	cmp	r3, r4
 8003ee8:	6025      	str	r5, [r4, #0]
 8003eea:	bf18      	it	ne
 8003eec:	6059      	strne	r1, [r3, #4]
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	bf08      	it	eq
 8003ef2:	6031      	streq	r1, [r6, #0]
 8003ef4:	5162      	str	r2, [r4, r5]
 8003ef6:	604b      	str	r3, [r1, #4]
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f104 060b 	add.w	r6, r4, #11
 8003efe:	f000 f865 	bl	8003fcc <__malloc_unlock>
 8003f02:	f026 0607 	bic.w	r6, r6, #7
 8003f06:	1d23      	adds	r3, r4, #4
 8003f08:	1af2      	subs	r2, r6, r3
 8003f0a:	d0b6      	beq.n	8003e7a <_malloc_r+0x22>
 8003f0c:	1b9b      	subs	r3, r3, r6
 8003f0e:	50a3      	str	r3, [r4, r2]
 8003f10:	e7b3      	b.n	8003e7a <_malloc_r+0x22>
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	bf0c      	ite	eq
 8003f18:	6032      	streq	r2, [r6, #0]
 8003f1a:	605a      	strne	r2, [r3, #4]
 8003f1c:	e7ec      	b.n	8003ef8 <_malloc_r+0xa0>
 8003f1e:	4623      	mov	r3, r4
 8003f20:	6864      	ldr	r4, [r4, #4]
 8003f22:	e7b2      	b.n	8003e8a <_malloc_r+0x32>
 8003f24:	4634      	mov	r4, r6
 8003f26:	6876      	ldr	r6, [r6, #4]
 8003f28:	e7b9      	b.n	8003e9e <_malloc_r+0x46>
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	f000 f84c 	bl	8003fcc <__malloc_unlock>
 8003f34:	e7a1      	b.n	8003e7a <_malloc_r+0x22>
 8003f36:	6025      	str	r5, [r4, #0]
 8003f38:	e7de      	b.n	8003ef8 <_malloc_r+0xa0>
 8003f3a:	bf00      	nop
 8003f3c:	200002d0 	.word	0x200002d0

08003f40 <_realloc_r>:
 8003f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f44:	4680      	mov	r8, r0
 8003f46:	4614      	mov	r4, r2
 8003f48:	460e      	mov	r6, r1
 8003f4a:	b921      	cbnz	r1, 8003f56 <_realloc_r+0x16>
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	f7ff bf81 	b.w	8003e58 <_malloc_r>
 8003f56:	b92a      	cbnz	r2, 8003f64 <_realloc_r+0x24>
 8003f58:	f7ff ff16 	bl	8003d88 <_free_r>
 8003f5c:	4625      	mov	r5, r4
 8003f5e:	4628      	mov	r0, r5
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	f000 f838 	bl	8003fd8 <_malloc_usable_size_r>
 8003f68:	4284      	cmp	r4, r0
 8003f6a:	4607      	mov	r7, r0
 8003f6c:	d802      	bhi.n	8003f74 <_realloc_r+0x34>
 8003f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f72:	d812      	bhi.n	8003f9a <_realloc_r+0x5a>
 8003f74:	4621      	mov	r1, r4
 8003f76:	4640      	mov	r0, r8
 8003f78:	f7ff ff6e 	bl	8003e58 <_malloc_r>
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0ed      	beq.n	8003f5e <_realloc_r+0x1e>
 8003f82:	42bc      	cmp	r4, r7
 8003f84:	4622      	mov	r2, r4
 8003f86:	4631      	mov	r1, r6
 8003f88:	bf28      	it	cs
 8003f8a:	463a      	movcs	r2, r7
 8003f8c:	f7ff fed4 	bl	8003d38 <memcpy>
 8003f90:	4631      	mov	r1, r6
 8003f92:	4640      	mov	r0, r8
 8003f94:	f7ff fef8 	bl	8003d88 <_free_r>
 8003f98:	e7e1      	b.n	8003f5e <_realloc_r+0x1e>
 8003f9a:	4635      	mov	r5, r6
 8003f9c:	e7df      	b.n	8003f5e <_realloc_r+0x1e>
	...

08003fa0 <_sbrk_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4d05      	ldr	r5, [pc, #20]	; (8003fbc <_sbrk_r+0x1c>)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f7fd fb26 	bl	80015fc <_sbrk>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_sbrk_r+0x1a>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_sbrk_r+0x1a>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200002d8 	.word	0x200002d8

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f000 b811 	b.w	8003fe8 <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	200002dc 	.word	0x200002dc

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f000 b80c 	b.w	8003fea <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	200002dc 	.word	0x200002dc

08003fd8 <_malloc_usable_size_r>:
 8003fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fdc:	1f18      	subs	r0, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfbc      	itt	lt
 8003fe2:	580b      	ldrlt	r3, [r1, r0]
 8003fe4:	18c0      	addlt	r0, r0, r3
 8003fe6:	4770      	bx	lr

08003fe8 <__retarget_lock_acquire_recursive>:
 8003fe8:	4770      	bx	lr

08003fea <__retarget_lock_release_recursive>:
 8003fea:	4770      	bx	lr

08003fec <_init>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr

08003ff8 <_fini>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	bf00      	nop
 8003ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffe:	bc08      	pop	{r3}
 8004000:	469e      	mov	lr, r3
 8004002:	4770      	bx	lr
