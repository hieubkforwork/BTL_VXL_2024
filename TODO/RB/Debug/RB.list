
RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002948  08002948  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002948  08002948  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002948  08002948  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000006c  080029bc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080029bc  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfba  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3b  00000000  00000000  0002d04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d71  00000000  00000000  000308e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010222  00000000  00000000  00048659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b02d  00000000  00000000  0005887b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e38a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  000e38fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002904 	.word	0x08002904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002904 	.word	0x08002904

0800014c <getKeyInput>:
int button__pressed = 0;
int button_long_pressed = 0;
int button_flag[NUM_BUT] = {0};


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i=0;i<NUM_BUT;i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e092      	b.n	800027e <getKeyInput+0x132>
  KeyReg2[i] = KeyReg1[i];
 8000158:	4a4d      	ldr	r2, [pc, #308]	; (8000290 <getKeyInput+0x144>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494c      	ldr	r1, [pc, #304]	; (8000294 <getKeyInput+0x148>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 8000168:	4a4b      	ldr	r2, [pc, #300]	; (8000298 <getKeyInput+0x14c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4947      	ldr	r1, [pc, #284]	; (8000290 <getKeyInput+0x144>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  // Add your key


  if(i==0) KeyReg0[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d108      	bne.n	8000190 <getKeyInput+0x44>
 800017e:	2110      	movs	r1, #16
 8000180:	4846      	ldr	r0, [pc, #280]	; (800029c <getKeyInput+0x150>)
 8000182:	f001 fa1b 	bl	80015bc <HAL_GPIO_ReadPin>
 8000186:	4603      	mov	r3, r0
 8000188:	461a      	mov	r2, r3
 800018a:	4b43      	ldr	r3, [pc, #268]	; (8000298 <getKeyInput+0x14c>)
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	e025      	b.n	80001dc <getKeyInput+0x90>
  else if(i==1) KeyReg0[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d109      	bne.n	80001aa <getKeyInput+0x5e>
 8000196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019a:	4840      	ldr	r0, [pc, #256]	; (800029c <getKeyInput+0x150>)
 800019c:	f001 fa0e 	bl	80015bc <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b3c      	ldr	r3, [pc, #240]	; (8000298 <getKeyInput+0x14c>)
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	e018      	b.n	80001dc <getKeyInput+0x90>
  else if(i==2) KeyReg0[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	d109      	bne.n	80001c4 <getKeyInput+0x78>
 80001b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b4:	483a      	ldr	r0, [pc, #232]	; (80002a0 <getKeyInput+0x154>)
 80001b6:	f001 fa01 	bl	80015bc <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	4b36      	ldr	r3, [pc, #216]	; (8000298 <getKeyInput+0x14c>)
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	e00b      	b.n	80001dc <getKeyInput+0x90>
  else if(i==3) KeyReg0[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d108      	bne.n	80001dc <getKeyInput+0x90>
 80001ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ce:	4834      	ldr	r0, [pc, #208]	; (80002a0 <getKeyInput+0x154>)
 80001d0:	f001 f9f4 	bl	80015bc <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b2f      	ldr	r3, [pc, #188]	; (8000298 <getKeyInput+0x14c>)
 80001da:	60da      	str	r2, [r3, #12]


  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001dc:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <getKeyInput+0x144>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	492c      	ldr	r1, [pc, #176]	; (8000298 <getKeyInput+0x14c>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d143      	bne.n	8000278 <getKeyInput+0x12c>
 80001f0:	4a27      	ldr	r2, [pc, #156]	; (8000290 <getKeyInput+0x144>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4926      	ldr	r1, [pc, #152]	; (8000294 <getKeyInput+0x148>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d139      	bne.n	8000278 <getKeyInput+0x12c>
    if (KeyReg2[i] != KeyReg3[i]){
 8000204:	4a23      	ldr	r2, [pc, #140]	; (8000294 <getKeyInput+0x148>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x158>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d017      	beq.n	8000248 <getKeyInput+0xfc>
      KeyReg3[i] = KeyReg2[i];
 8000218:	4a1e      	ldr	r2, [pc, #120]	; (8000294 <getKeyInput+0x148>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4920      	ldr	r1, [pc, #128]	; (80002a4 <getKeyInput+0x158>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <getKeyInput+0x158>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d121      	bne.n	8000278 <getKeyInput+0x12c>
        TimeOutForKeyPress = 500;
 8000234:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <getKeyInput+0x15c>)
 8000236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023a:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button_flag[i] = 1;
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <getKeyInput+0x160>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2101      	movs	r1, #1
 8000242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000246:	e017      	b.n	8000278 <getKeyInput+0x12c>
      }

    }else{
        TimeOutForKeyPress --;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput+0x15c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <getKeyInput+0x15c>)
 8000250:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000252:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <getKeyInput+0x15c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10e      	bne.n	8000278 <getKeyInput+0x12c>
        	TimeOutForKeyPress = 500;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <getKeyInput+0x15c>)
 800025c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000260:	601a      	str	r2, [r3, #0]
        	if (KeyReg3[i] == PRESSED_STATE){
 8000262:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <getKeyInput+0x158>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <getKeyInput+0x12c>
        		//subKeyProcess();
        		button_flag[i] = 1;
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <getKeyInput+0x160>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<NUM_BUT;i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b03      	cmp	r3, #3
 8000282:	f77f af69 	ble.w	8000158 <getKeyInput+0xc>
        	}
        }
    }
  }
}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000010 	.word	0x20000010
 8000294:	20000020 	.word	0x20000020
 8000298:	20000000 	.word	0x20000000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000030 	.word	0x20000030
 80002a8:	20000040 	.word	0x20000040
 80002ac:	20000088 	.word	0x20000088

080002b0 <error_led>:
 *      Author: ACER
 */

#include "fsm_adjust.h"

void error_led() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <error_led+0x14>)
 80002ba:	f001 f996 	bl	80015ea <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010800 	.word	0x40010800

080002c8 <no_error_led>:
void no_error_led() {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2120      	movs	r1, #32
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <no_error_led+0x14>)
 80002d2:	f001 f98a 	bl	80015ea <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010800 	.word	0x40010800

080002e0 <fsm_adjust>:
void fsm_adjust() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (state == ADJUST) {
 80002e4:	4b5b      	ldr	r3, [pc, #364]	; (8000454 <fsm_adjust+0x174>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	f040 80af 	bne.w	800044c <fsm_adjust+0x16c>

		switch (adj_state) {
 80002ee:	4b5a      	ldr	r3, [pc, #360]	; (8000458 <fsm_adjust+0x178>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b0a      	subs	r3, #10
 80002f4:	2b13      	cmp	r3, #19
 80002f6:	f200 80aa 	bhi.w	800044e <fsm_adjust+0x16e>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <fsm_adjust+0x20>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	0800037b 	.word	0x0800037b
 8000304:	080003c9 	.word	0x080003c9
 8000308:	0800040b 	.word	0x0800040b
 800030c:	0800044f 	.word	0x0800044f
 8000310:	0800044f 	.word	0x0800044f
 8000314:	0800044f 	.word	0x0800044f
 8000318:	0800044f 	.word	0x0800044f
 800031c:	0800044f 	.word	0x0800044f
 8000320:	0800044f 	.word	0x0800044f
 8000324:	0800044f 	.word	0x0800044f
 8000328:	0800044f 	.word	0x0800044f
 800032c:	0800044f 	.word	0x0800044f
 8000330:	0800044f 	.word	0x0800044f
 8000334:	0800044f 	.word	0x0800044f
 8000338:	0800044f 	.word	0x0800044f
 800033c:	0800044f 	.word	0x0800044f
 8000340:	0800044f 	.word	0x0800044f
 8000344:	0800044f 	.word	0x0800044f
 8000348:	0800044f 	.word	0x0800044f
 800034c:	08000351 	.word	0x08000351
		case ADJ_INIT:
			if (red_time != green_time + amber_time) {
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <fsm_adjust+0x17c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b42      	ldr	r3, [pc, #264]	; (8000460 <fsm_adjust+0x180>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	441a      	add	r2, r3
 800035a:	4b42      	ldr	r3, [pc, #264]	; (8000464 <fsm_adjust+0x184>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d005      	beq.n	800036e <fsm_adjust+0x8e>
				error_led();
 8000362:	f7ff ffa5 	bl	80002b0 <error_led>
				valid = 0;
 8000366:	4b40      	ldr	r3, [pc, #256]	; (8000468 <fsm_adjust+0x188>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
			} else {
				no_error_led();
				valid = 1;
			}
			break;
 800036c:	e06f      	b.n	800044e <fsm_adjust+0x16e>
				no_error_led();
 800036e:	f7ff ffab 	bl	80002c8 <no_error_led>
				valid = 1;
 8000372:	4b3d      	ldr	r3, [pc, #244]	; (8000468 <fsm_adjust+0x188>)
 8000374:	2201      	movs	r2, #1
 8000376:	601a      	str	r2, [r3, #0]
			break;
 8000378:	e069      	b.n	800044e <fsm_adjust+0x16e>
		case ADJ_MODE:
			switch (__mode) {
 800037a:	4b3c      	ldr	r3, [pc, #240]	; (800046c <fsm_adjust+0x18c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b20      	cmp	r3, #32
 8000380:	d016      	beq.n	80003b0 <fsm_adjust+0xd0>
 8000382:	2b20      	cmp	r3, #32
 8000384:	dc1c      	bgt.n	80003c0 <fsm_adjust+0xe0>
 8000386:	2b1e      	cmp	r3, #30
 8000388:	d002      	beq.n	8000390 <fsm_adjust+0xb0>
 800038a:	2b1f      	cmp	r3, #31
 800038c:	d008      	beq.n	80003a0 <fsm_adjust+0xc0>
 800038e:	e017      	b.n	80003c0 <fsm_adjust+0xe0>
			case MODE_RED:
				on_red1_led();
 8000390:	f000 f9d4 	bl	800073c <on_red1_led>
				on_red2_led();
 8000394:	f000 fa02 	bl	800079c <on_red2_led>
				__mode = MODE_GREEN;
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <fsm_adjust+0x18c>)
 800039a:	221f      	movs	r2, #31
 800039c:	601a      	str	r2, [r3, #0]
				break;
 800039e:	e00f      	b.n	80003c0 <fsm_adjust+0xe0>
			case MODE_GREEN:
				on_green1_led();
 80003a0:	f000 f9ec 	bl	800077c <on_green1_led>
				on_green2_led();
 80003a4:	f000 fa1e 	bl	80007e4 <on_green2_led>
				__mode = MODE_AMBER;
 80003a8:	4b30      	ldr	r3, [pc, #192]	; (800046c <fsm_adjust+0x18c>)
 80003aa:	2220      	movs	r2, #32
 80003ac:	601a      	str	r2, [r3, #0]
				break;
 80003ae:	e007      	b.n	80003c0 <fsm_adjust+0xe0>
			case MODE_AMBER:
				on_yellow1_led();
 80003b0:	f000 f9d4 	bl	800075c <on_yellow1_led>
				on_yellow2_led();
 80003b4:	f000 fa04 	bl	80007c0 <on_yellow2_led>
				__mode = MODE_RED;
 80003b8:	4b2c      	ldr	r3, [pc, #176]	; (800046c <fsm_adjust+0x18c>)
 80003ba:	221e      	movs	r2, #30
 80003bc:	601a      	str	r2, [r3, #0]
				break;
 80003be:	bf00      	nop
			}
			adj_state = ADJ_INIT;
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <fsm_adjust+0x178>)
 80003c2:	221d      	movs	r2, #29
 80003c4:	601a      	str	r2, [r3, #0]
			break;
 80003c6:	e042      	b.n	800044e <fsm_adjust+0x16e>
		case INCREASE_TIME:
			if (__mode == MODE_RED) {
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <fsm_adjust+0x18c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b1e      	cmp	r3, #30
 80003ce:	d105      	bne.n	80003dc <fsm_adjust+0xfc>
				red_time++;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <fsm_adjust+0x184>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a23      	ldr	r2, [pc, #140]	; (8000464 <fsm_adjust+0x184>)
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	e012      	b.n	8000402 <fsm_adjust+0x122>
			} else if (__mode == MODE_GREEN) {
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <fsm_adjust+0x18c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b1f      	cmp	r3, #31
 80003e2:	d105      	bne.n	80003f0 <fsm_adjust+0x110>
				green_time++;
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <fsm_adjust+0x17c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <fsm_adjust+0x17c>)
 80003ec:	6013      	str	r3, [r2, #0]
 80003ee:	e008      	b.n	8000402 <fsm_adjust+0x122>
			} else if (__mode == MODE_AMBER) {
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <fsm_adjust+0x18c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b20      	cmp	r3, #32
 80003f6:	d104      	bne.n	8000402 <fsm_adjust+0x122>
				amber_time++;
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <fsm_adjust+0x180>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a18      	ldr	r2, [pc, #96]	; (8000460 <fsm_adjust+0x180>)
 8000400:	6013      	str	r3, [r2, #0]
			}
			adj_state = ADJ_INIT;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <fsm_adjust+0x178>)
 8000404:	221d      	movs	r2, #29
 8000406:	601a      	str	r2, [r3, #0]
			break;
 8000408:	e021      	b.n	800044e <fsm_adjust+0x16e>
		case DECREASE_TIME:
			if (__mode == MODE_RED)
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <fsm_adjust+0x18c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b1e      	cmp	r3, #30
 8000410:	d105      	bne.n	800041e <fsm_adjust+0x13e>
				red_time--;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <fsm_adjust+0x184>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	4a12      	ldr	r2, [pc, #72]	; (8000464 <fsm_adjust+0x184>)
 800041a:	6013      	str	r3, [r2, #0]
 800041c:	e012      	b.n	8000444 <fsm_adjust+0x164>
			else if (__mode == MODE_GREEN)
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <fsm_adjust+0x18c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b1f      	cmp	r3, #31
 8000424:	d105      	bne.n	8000432 <fsm_adjust+0x152>
				green_time--;
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <fsm_adjust+0x17c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <fsm_adjust+0x17c>)
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	e008      	b.n	8000444 <fsm_adjust+0x164>
			else if (__mode == MODE_AMBER)
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <fsm_adjust+0x18c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b20      	cmp	r3, #32
 8000438:	d104      	bne.n	8000444 <fsm_adjust+0x164>
				amber_time--;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <fsm_adjust+0x180>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3b01      	subs	r3, #1
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <fsm_adjust+0x180>)
 8000442:	6013      	str	r3, [r2, #0]
			adj_state = ADJ_INIT;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <fsm_adjust+0x178>)
 8000446:	221d      	movs	r2, #29
 8000448:	601a      	str	r2, [r3, #0]
			break;
 800044a:	e000      	b.n	800044e <fsm_adjust+0x16e>
		}

	}
 800044c:	bf00      	nop
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000098 	.word	0x20000098
 8000458:	20000048 	.word	0x20000048
 800045c:	20000054 	.word	0x20000054
 8000460:	20000050 	.word	0x20000050
 8000464:	2000004c 	.word	0x2000004c
 8000468:	20000058 	.word	0x20000058
 800046c:	2000005c 	.word	0x2000005c

08000470 <fsm_auto>:
 *      Author: ACER
 */

#include "fsm_auto.h"

void fsm_auto(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	if(state == AUTO){
 8000474:	4b35      	ldr	r3, [pc, #212]	; (800054c <fsm_auto+0xdc>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d165      	bne.n	8000548 <fsm_auto+0xd8>

	switch(auto_state){
 800047c:	4b34      	ldr	r3, [pc, #208]	; (8000550 <fsm_auto+0xe0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b14      	subs	r3, #20
 8000482:	2b04      	cmp	r3, #4
 8000484:	d85b      	bhi.n	800053e <fsm_auto+0xce>
 8000486:	a201      	add	r2, pc, #4	; (adr r2, 800048c <fsm_auto+0x1c>)
 8000488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048c:	080004a1 	.word	0x080004a1
 8000490:	080004a9 	.word	0x080004a9
 8000494:	080004cb 	.word	0x080004cb
 8000498:	080004ed 	.word	0x080004ed
 800049c:	0800050f 	.word	0x0800050f
	case INIT:
		auto_state = RED_GREEN;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <fsm_auto+0xe0>)
 80004a2:	2215      	movs	r2, #21
 80004a4:	601a      	str	r2, [r3, #0]
		break;
 80004a6:	e04a      	b.n	800053e <fsm_auto+0xce>
	case RED_GREEN:
		on_green1_led();
 80004a8:	f000 f968 	bl	800077c <on_green1_led>
		on_red2_led();
 80004ac:	f000 f976 	bl	800079c <on_red2_led>

		if(auto_timer >= green_time){
 80004b0:	4b28      	ldr	r3, [pc, #160]	; (8000554 <fsm_auto+0xe4>)
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	4b28      	ldr	r3, [pc, #160]	; (8000558 <fsm_auto+0xe8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	db39      	blt.n	8000530 <fsm_auto+0xc0>
		 auto_state = RED_AMBER;
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <fsm_auto+0xe0>)
 80004be:	2216      	movs	r2, #22
 80004c0:	601a      	str	r2, [r3, #0]
		 auto_timer=0;
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <fsm_auto+0xe4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
		}
		break;
 80004c8:	e032      	b.n	8000530 <fsm_auto+0xc0>
	case RED_AMBER:
		on_yellow1_led();
 80004ca:	f000 f947 	bl	800075c <on_yellow1_led>
		on_red2_led();
 80004ce:	f000 f965 	bl	800079c <on_red2_led>

		if(auto_timer >= amber_time){
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <fsm_auto+0xe4>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <fsm_auto+0xec>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	db2a      	blt.n	8000534 <fsm_auto+0xc4>
			auto_state = GREEN_RED;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <fsm_auto+0xe0>)
 80004e0:	2217      	movs	r2, #23
 80004e2:	601a      	str	r2, [r3, #0]
		 auto_timer=0;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <fsm_auto+0xe4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80004ea:	e023      	b.n	8000534 <fsm_auto+0xc4>
	case GREEN_RED:
		on_green2_led();
 80004ec:	f000 f97a 	bl	80007e4 <on_green2_led>
		on_red1_led();
 80004f0:	f000 f924 	bl	800073c <on_red1_led>

		if(auto_timer >= green_time){
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <fsm_auto+0xe4>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <fsm_auto+0xe8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	db1b      	blt.n	8000538 <fsm_auto+0xc8>
			auto_state = AMBER_RED;
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <fsm_auto+0xe0>)
 8000502:	2218      	movs	r2, #24
 8000504:	601a      	str	r2, [r3, #0]
		auto_timer=0;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <fsm_auto+0xe4>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
		}
		break;
 800050c:	e014      	b.n	8000538 <fsm_auto+0xc8>
	case AMBER_RED:
		on_yellow2_led();
 800050e:	f000 f957 	bl	80007c0 <on_yellow2_led>
		on_red1_led();
 8000512:	f000 f913 	bl	800073c <on_red1_led>

		if(auto_timer >= amber_time){
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <fsm_auto+0xe4>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <fsm_auto+0xec>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	429a      	cmp	r2, r3
 8000520:	db0c      	blt.n	800053c <fsm_auto+0xcc>
			auto_state = RED_GREEN;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <fsm_auto+0xe0>)
 8000524:	2215      	movs	r2, #21
 8000526:	601a      	str	r2, [r3, #0]
		auto_timer=0;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <fsm_auto+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
		}
		break;
 800052e:	e005      	b.n	800053c <fsm_auto+0xcc>
		break;
 8000530:	bf00      	nop
 8000532:	e004      	b.n	800053e <fsm_auto+0xce>
		break;
 8000534:	bf00      	nop
 8000536:	e002      	b.n	800053e <fsm_auto+0xce>
		break;
 8000538:	bf00      	nop
 800053a:	e000      	b.n	800053e <fsm_auto+0xce>
		break;
 800053c:	bf00      	nop
	}
	auto_timer+=1;
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <fsm_auto+0xe4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <fsm_auto+0xe4>)
 8000546:	6013      	str	r3, [r2, #0]
	}

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000098 	.word	0x20000098
 8000550:	20000044 	.word	0x20000044
 8000554:	2000009c 	.word	0x2000009c
 8000558:	20000054 	.word	0x20000054
 800055c:	20000050 	.word	0x20000050

08000560 <fsm_for_input_processing>:
 *
 *  Created on: Sep 30, 2024
 *      Author: User
 */
#include"input_processing.h"
void fsm_for_input_processing(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	getKeyInput();
 8000564:	f7ff fdf2 	bl	800014c <getKeyInput>
	switch (state) {
 8000568:	4b61      	ldr	r3, [pc, #388]	; (80006f0 <fsm_for_input_processing+0x190>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b04      	cmp	r3, #4
 800056e:	f200 80bc 	bhi.w	80006ea <fsm_for_input_processing+0x18a>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <fsm_for_input_processing+0x18>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	0800058d 	.word	0x0800058d
 800057c:	080005f7 	.word	0x080005f7
 8000580:	08000637 	.word	0x08000637
 8000584:	08000617 	.word	0x08000617
 8000588:	080006b9 	.word	0x080006b9
	case IDLE:
		mode_light();
 800058c:	f000 f8ba 	bl	8000704 <mode_light>
		if (button_flag[0] == 1) {
 8000590:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d10a      	bne.n	80005ae <fsm_for_input_processing+0x4e>
			button_flag[0]=0;
 8000598:	4b56      	ldr	r3, [pc, #344]	; (80006f4 <fsm_for_input_processing+0x194>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800059e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a2:	4855      	ldr	r0, [pc, #340]	; (80006f8 <fsm_for_input_processing+0x198>)
 80005a4:	f001 f839 	bl	800161a <HAL_GPIO_TogglePin>
			state = AUTO;
 80005a8:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <fsm_for_input_processing+0x190>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[1] == 1) {
 80005ae:	4b51      	ldr	r3, [pc, #324]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d105      	bne.n	80005c2 <fsm_for_input_processing+0x62>
			button_flag[1]=0;
 80005b6:	4b4f      	ldr	r3, [pc, #316]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
			state = NIGHT;
 80005bc:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <fsm_for_input_processing+0x190>)
 80005be:	2203      	movs	r2, #3
 80005c0:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[2] == 1) {
 80005c2:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10a      	bne.n	80005e0 <fsm_for_input_processing+0x80>
			button_flag[2]=0;
 80005ca:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	4848      	ldr	r0, [pc, #288]	; (80006f8 <fsm_for_input_processing+0x198>)
 80005d6:	f001 f820 	bl	800161a <HAL_GPIO_TogglePin>
			state = ADJUST;
 80005da:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <fsm_for_input_processing+0x190>)
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[3] == 1) {
 80005e0:	4b44      	ldr	r3, [pc, #272]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d177      	bne.n	80006d8 <fsm_for_input_processing+0x178>
			button_flag[3]=0;
 80005e8:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
			state = MANUAL;
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <fsm_for_input_processing+0x190>)
 80005f0:	2204      	movs	r2, #4
 80005f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80005f4:	e070      	b.n	80006d8 <fsm_for_input_processing+0x178>

	case AUTO:
	if (button_flag[0] == 1) {
 80005f6:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <fsm_for_input_processing+0x194>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d16e      	bne.n	80006dc <fsm_for_input_processing+0x17c>
		button_flag[0]=0;
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	483b      	ldr	r0, [pc, #236]	; (80006f8 <fsm_for_input_processing+0x198>)
 800060a:	f001 f806 	bl	800161a <HAL_GPIO_TogglePin>
		state = IDLE;
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <fsm_for_input_processing+0x190>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	}
	break;
 8000614:	e062      	b.n	80006dc <fsm_for_input_processing+0x17c>
	case NIGHT:
	if (button_flag[0] == 1) {
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d160      	bne.n	80006e0 <fsm_for_input_processing+0x180>
		button_flag[0]=0;
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4833      	ldr	r0, [pc, #204]	; (80006f8 <fsm_for_input_processing+0x198>)
 800062a:	f000 fff6 	bl	800161a <HAL_GPIO_TogglePin>
		state = IDLE;
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <fsm_for_input_processing+0x190>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

	}
	break;
 8000634:	e054      	b.n	80006e0 <fsm_for_input_processing+0x180>
	case ADJUST:
	if (button_flag[0] == 1) {
 8000636:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d10e      	bne.n	800065c <fsm_for_input_processing+0xfc>
		button_flag[0]=0;
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
		if (valid){
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <fsm_for_input_processing+0x19c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d007      	beq.n	800065c <fsm_for_input_processing+0xfc>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800064c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000650:	4829      	ldr	r0, [pc, #164]	; (80006f8 <fsm_for_input_processing+0x198>)
 8000652:	f000 ffe2 	bl	800161a <HAL_GPIO_TogglePin>
			state = IDLE;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <fsm_for_input_processing+0x190>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
		}
	}
	if (button_flag[1] == 1) {
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <fsm_for_input_processing+0x194>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d10a      	bne.n	800067a <fsm_for_input_processing+0x11a>
		button_flag[1]=0;
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
		adj_state = ADJ_MODE;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <fsm_for_input_processing+0x1a0>)
 800066c:	220a      	movs	r2, #10
 800066e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000674:	4820      	ldr	r0, [pc, #128]	; (80006f8 <fsm_for_input_processing+0x198>)
 8000676:	f000 ffd0 	bl	800161a <HAL_GPIO_TogglePin>
	}
	if (button_flag[2] == 1) {
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <fsm_for_input_processing+0x194>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10a      	bne.n	8000698 <fsm_for_input_processing+0x138>
		button_flag[2]=0;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <fsm_for_input_processing+0x194>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
		adj_state = INCREASE_TIME;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <fsm_for_input_processing+0x1a0>)
 800068a:	220b      	movs	r2, #11
 800068c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4819      	ldr	r0, [pc, #100]	; (80006f8 <fsm_for_input_processing+0x198>)
 8000694:	f000 ffc1 	bl	800161a <HAL_GPIO_TogglePin>
	}
	if (button_flag[3] == 1) {
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <fsm_for_input_processing+0x194>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d121      	bne.n	80006e4 <fsm_for_input_processing+0x184>
		button_flag[3]=0;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <fsm_for_input_processing+0x194>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
		adj_state = DECREASE_TIME;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <fsm_for_input_processing+0x1a0>)
 80006a8:	220c      	movs	r2, #12
 80006aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4811      	ldr	r0, [pc, #68]	; (80006f8 <fsm_for_input_processing+0x198>)
 80006b2:	f000 ffb2 	bl	800161a <HAL_GPIO_TogglePin>
	}

	break;
 80006b6:	e015      	b.n	80006e4 <fsm_for_input_processing+0x184>
	case MANUAL:
	if (button_flag[0] == 1) {
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <fsm_for_input_processing+0x194>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d113      	bne.n	80006e8 <fsm_for_input_processing+0x188>
		button_flag[0]=0;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <fsm_for_input_processing+0x194>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80006c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <fsm_for_input_processing+0x198>)
 80006cc:	f000 ffa5 	bl	800161a <HAL_GPIO_TogglePin>
		state = IDLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <fsm_for_input_processing+0x190>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
	}
	break;
 80006d6:	e007      	b.n	80006e8 <fsm_for_input_processing+0x188>
		break;
 80006d8:	bf00      	nop
 80006da:	e006      	b.n	80006ea <fsm_for_input_processing+0x18a>
	break;
 80006dc:	bf00      	nop
 80006de:	e004      	b.n	80006ea <fsm_for_input_processing+0x18a>
	break;
 80006e0:	bf00      	nop
 80006e2:	e002      	b.n	80006ea <fsm_for_input_processing+0x18a>
	break;
 80006e4:	bf00      	nop
 80006e6:	e000      	b.n	80006ea <fsm_for_input_processing+0x18a>
	break;
 80006e8:	bf00      	nop
}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000098 	.word	0x20000098
 80006f4:	20000088 	.word	0x20000088
 80006f8:	40011000 	.word	0x40011000
 80006fc:	20000058 	.word	0x20000058
 8000700:	20000048 	.word	0x20000048

08000704 <mode_light>:
#include <string.h>
#include <stdio.h>

// function blink led
// 1: D3 - D4
void mode_light(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <mode_light+0x30>)
 800070e:	f000 ff6c 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	2108      	movs	r1, #8
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <mode_light+0x30>)
 8000718:	f000 ff67 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <mode_light+0x34>)
 8000722:	f000 ff62 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <mode_light+0x30>)
 800072c:	f000 ff5d 	bl	80015ea <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010c00 	.word	0x40010c00
 8000738:	40011000 	.word	0x40011000

0800073c <on_red1_led>:
void on_red1_led(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <on_red1_led+0x1c>)
 8000746:	f000 ff50 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <on_red1_led+0x1c>)
 8000750:	f000 ff4b 	bl	80015ea <HAL_GPIO_WritePin>

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010c00 	.word	0x40010c00

0800075c <on_yellow1_led>:
void on_yellow1_led(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	2120      	movs	r1, #32
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <on_yellow1_led+0x1c>)
 8000766:	f000 ff40 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	4802      	ldr	r0, [pc, #8]	; (8000778 <on_yellow1_led+0x1c>)
 8000770:	f000 ff3b 	bl	80015ea <HAL_GPIO_WritePin>

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40010c00 	.word	0x40010c00

0800077c <on_green1_led>:
void on_green1_led(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2120      	movs	r1, #32
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <on_green1_led+0x1c>)
 8000786:	f000 ff30 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2108      	movs	r1, #8
 800078e:	4802      	ldr	r0, [pc, #8]	; (8000798 <on_green1_led+0x1c>)
 8000790:	f000 ff2b 	bl	80015ea <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40010c00 	.word	0x40010c00

0800079c <on_red2_led>:
 // 2: D9 - D10
void on_red2_led(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <on_red2_led+0x1c>)
 80007a6:	f000 ff20 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <on_red2_led+0x20>)
 80007b0:	f000 ff1b 	bl	80015ea <HAL_GPIO_WritePin>

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40011000 	.word	0x40011000
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <on_yellow2_led>:
void on_yellow2_led(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <on_yellow2_led+0x1c>)
 80007ca:	f000 ff0e 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <on_yellow2_led+0x20>)
 80007d4:	f000 ff09 	bl	80015ea <HAL_GPIO_WritePin>

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40011000 	.word	0x40011000
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <on_green2_led>:
void on_green2_led(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <on_green2_led+0x1c>)
 80007ee:	f000 fefc 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <on_green2_led+0x20>)
 80007f8:	f000 fef7 	bl	80015ea <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40011000 	.word	0x40011000
 8000804:	40010c00 	.word	0x40010c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fbe2 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f824 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f8de 	bl	80009d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000818:	f000 f890 	bl	800093c <MX_TIM2_Init>
  MX_I2C1_Init();
 800081c:	f000 f860 	bl	80008e0 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000820:	480a      	ldr	r0, [pc, #40]	; (800084c <main+0x44>)
 8000822:	f001 fca1 	bl	8002168 <HAL_TIM_Base_Start_IT>
  SCH_ADD_TASK(fsm_for_input_processing,10,100);
 8000826:	2264      	movs	r2, #100	; 0x64
 8000828:	210a      	movs	r1, #10
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <main+0x48>)
 800082c:	f000 fa2c 	bl	8000c88 <SCH_ADD_TASK>
  //lcd_init();
  SCH_ADD_TASK(fsm_auto, 10, 1000);
 8000830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000834:	210a      	movs	r1, #10
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <main+0x4c>)
 8000838:	f000 fa26 	bl	8000c88 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_adjust,10,10);
 800083c:	220a      	movs	r2, #10
 800083e:	210a      	movs	r1, #10
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <main+0x50>)
 8000842:	f000 fa21 	bl	8000c88 <SCH_ADD_TASK>
  //SCH_ADD_TASK(led, 1, 500);

  while (1)
  {
	  SCH_DISPATCH_TASK();
 8000846:	f000 fa7f 	bl	8000d48 <SCH_DISPATCH_TASK>
 800084a:	e7fc      	b.n	8000846 <main+0x3e>
 800084c:	200000f8 	.word	0x200000f8
 8000850:	08000561 	.word	0x08000561
 8000854:	08000471 	.word	0x08000471
 8000858:	080002e1 	.word	0x080002e1

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f002 f842 	bl	80028f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000892:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f819 	bl	80018d4 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80008a8:	f000 f988 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2102      	movs	r1, #2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fa84 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008d2:	f000 f973 	bl	8000bbc <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3740      	adds	r7, #64	; 0x40
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C1_Init+0x50>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_I2C1_Init+0x54>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C1_Init+0x50>)
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_I2C1_Init+0x58>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_I2C1_Init+0x50>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_I2C1_Init+0x50>)
 800091e:	f000 fe95 	bl	800164c <HAL_I2C_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000928:	f000 f948 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000a4 	.word	0x200000a4
 8000934:	40005400 	.word	0x40005400
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM2_Init+0x94>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000962:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_TIM2_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000970:	2209      	movs	r2, #9
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_TIM2_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000982:	f001 fba1 	bl	80020c8 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800098c:	f000 f916 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_TIM2_Init+0x94>)
 800099e:	f001 fd25 	bl	80023ec <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 f908 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM2_Init+0x94>)
 80009ba:	f001 ff07 	bl	80027cc <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f8fa 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000f8 	.word	0x200000f8

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	4b6b      	ldr	r3, [pc, #428]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a6a      	ldr	r2, [pc, #424]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a00:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a64      	ldr	r2, [pc, #400]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0320 	and.w	r3, r3, #32
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b5f      	ldr	r3, [pc, #380]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a5e      	ldr	r2, [pc, #376]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b5c      	ldr	r3, [pc, #368]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a58      	ldr	r2, [pc, #352]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b56      	ldr	r3, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x1c4>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4853      	ldr	r0, [pc, #332]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000a4e:	f000 fdcc 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	4851      	ldr	r0, [pc, #324]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000a5a:	f000 fdc6 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2128      	movs	r1, #40	; 0x28
 8000a62:	4850      	ldr	r0, [pc, #320]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000a64:	f000 fdc1 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4848      	ldr	r0, [pc, #288]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000a7e:	f000 fc19 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a82:	230c      	movs	r3, #12
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	4841      	ldr	r0, [pc, #260]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000a96:	f000 fc0d 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	483a      	ldr	r0, [pc, #232]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000ab2:	f000 fbff 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4834      	ldr	r0, [pc, #208]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000ad0:	f000 fbf0 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000ad4:	2328      	movs	r3, #40	; 0x28
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482e      	ldr	r0, [pc, #184]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000aec:	f000 fbe2 	bl	80012b4 <HAL_GPIO_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000af0:	2200      	movs	r2, #0
 8000af2:	f249 01f8 	movw	r1, #37112	; 0x90f8
 8000af6:	482b      	ldr	r0, [pc, #172]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000af8:	f000 fd77 	bl	80015ea <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	4827      	ldr	r0, [pc, #156]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000b02:	f000 fd72 	bl	80015ea <HAL_GPIO_WritePin>

  /* Configure GPIO pins for GPIOC: PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0x1cc>)
 8000b1e:	f000 fbc9 	bl	80012b4 <HAL_GPIO_Init>

  /* Configure GPIO pins for GPIOB: PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000b3a:	f000 fbbb 	bl	80012b4 <HAL_GPIO_Init>

  /* Configure other GPIO pins as needed */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000b3e:	f249 03f8 	movw	r3, #37112	; 0x90f8
 8000b42:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000b58:	f000 fbac 	bl	80012b4 <HAL_GPIO_Init>

  /* Configure input pins for buttons */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000b5c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x1d0>)
 8000b72:	f000 fb9f 	bl	80012b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_4_Pin;
 8000b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_GPIO_Init+0x1c8>)
 8000b8c:	f000 fb92 	bl	80012b4 <HAL_GPIO_Init>
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	SCH_UPDATE();
 8000bb0:	f000 f80a 	bl	8000bc8 <SCH_UPDATE>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <SCH_UPDATE>:
sTasks SCH_TASKS_G[SCH_MAX_TASKS];
uint8_t index_val = 0;
void SCH_INIT(void){
	index_val = 0;
}
void SCH_UPDATE(void){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	for(int i=0;i<index_val;i++){
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e048      	b.n	8000c66 <SCH_UPDATE+0x9e>
		if(SCH_TASKS_G[i].Delay > 0 ) SCH_TASKS_G[i].Delay--;
 8000bd4:	492a      	ldr	r1, [pc, #168]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	3304      	adds	r3, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d013      	beq.n	8000c12 <SCH_UPDATE+0x4a>
 8000bea:	4925      	ldr	r1, [pc, #148]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1e59      	subs	r1, r3, #1
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4403      	add	r3, r0
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	6019      	str	r1, [r3, #0]
 8000c10:	e026      	b.n	8000c60 <SCH_UPDATE+0x98>
		else {
			SCH_TASKS_G[i].Delay = SCH_TASKS_G[i].Period;
 8000c12:	491b      	ldr	r1, [pc, #108]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4403      	add	r3, r0
 8000c32:	3304      	adds	r3, #4
 8000c34:	6019      	str	r1, [r3, #0]
			SCH_TASKS_G[i].RunMe+=1;
 8000c36:	4912      	ldr	r1, [pc, #72]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	330c      	adds	r3, #12
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b2d8      	uxtb	r0, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <SCH_UPDATE+0xb8>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	330c      	adds	r3, #12
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<index_val;i++){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <SCH_UPDATE+0xbc>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	dbb0      	blt.n	8000bd4 <SCH_UPDATE+0xc>
		}
	}
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000140 	.word	0x20000140
 8000c84:	200000a0 	.word	0x200000a0

08000c88 <SCH_ADD_TASK>:
void SCH_ADD_TASK(void (*pTask)(void), uint32_t Delay, uint32_t Period){
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
	if(index_val < SCH_MAX_TASKS)
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b09      	cmp	r3, #9
 8000c9a:	d80a      	bhi.n	8000cb2 <SCH_ADD_TASK+0x2a>
	SCH_TASKS_G[index_val].pTask = pTask;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <SCH_ADD_TASK+0xb8>)
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].Delay = Delay/10;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <SCH_ADD_TASK+0xbc>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	491f      	ldr	r1, [pc, #124]	; (8000d40 <SCH_ADD_TASK+0xb8>)
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4403      	add	r3, r0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	3304      	adds	r3, #4
 8000cd0:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].Period = Period/10;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <SCH_ADD_TASK+0xbc>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	4917      	ldr	r1, [pc, #92]	; (8000d40 <SCH_ADD_TASK+0xb8>)
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4403      	add	r3, r0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	3308      	adds	r3, #8
 8000cf0:	601a      	str	r2, [r3, #0]
	SCH_TASKS_G[index_val].RunMe = 0;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <SCH_ADD_TASK+0xb8>)
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	330c      	adds	r3, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	SCH_TASKS_G[index_val].TaskID = index_val;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4610      	mov	r0, r2
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SCH_ADD_TASK+0xb8>)
 8000d18:	460b      	mov	r3, r1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3310      	adds	r3, #16
 8000d24:	6018      	str	r0, [r3, #0]
	index_val++;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <SCH_ADD_TASK+0xb4>)
 8000d30:	701a      	strb	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	200000a0 	.word	0x200000a0
 8000d40:	20000140 	.word	0x20000140
 8000d44:	cccccccd 	.word	0xcccccccd

08000d48 <SCH_DISPATCH_TASK>:
void SCH_DISPATCH_TASK(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	for(int i=0;i<index_val;i++){
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e02b      	b.n	8000dac <SCH_DISPATCH_TASK+0x64>
		if(SCH_TASKS_G[i].RunMe > 0){
 8000d54:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <SCH_DISPATCH_TASK+0x7c>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	330c      	adds	r3, #12
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d01d      	beq.n	8000da6 <SCH_DISPATCH_TASK+0x5e>
			(*SCH_TASKS_G[i].pTask)();
 8000d6a:	4916      	ldr	r1, [pc, #88]	; (8000dc4 <SCH_DISPATCH_TASK+0x7c>)
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4798      	blx	r3
			SCH_TASKS_G[i].RunMe -= 1;
 8000d7c:	4911      	ldr	r1, [pc, #68]	; (8000dc4 <SCH_DISPATCH_TASK+0x7c>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2d8      	uxtb	r0, r3
 8000d92:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <SCH_DISPATCH_TASK+0x7c>)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	330c      	adds	r3, #12
 8000da2:	4602      	mov	r2, r0
 8000da4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<index_val;i++){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3301      	adds	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SCH_DISPATCH_TASK+0x80>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	dbcd      	blt.n	8000d54 <SCH_DISPATCH_TASK+0xc>
		}
	}
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000140 	.word	0x20000140
 8000dc8:	200000a0 	.word	0x200000a0

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x60>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x60>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_I2C_MspInit+0x90>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d132      	bne.n	8000eb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <HAL_I2C_MspInit+0x98>)
 8000e7e:	f000 fa19 	bl	80012b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_I2C_MspInit+0x9c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_I2C_MspInit+0x9c>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_I2C_MspInit+0x94>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40010000 	.word	0x40010000

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d113      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201c      	movs	r0, #28
 8000f00:	f000 f9a1 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f04:	201c      	movs	r0, #28
 8000f06:	f000 f9ba 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 f87f 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM2_IRQHandler+0x10>)
 8000f6e:	f001 f94d 	bl	800220c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000f8 	.word	0x200000f8

08000f7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f88:	f7ff fff8 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f8e:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fa4:	4c09      	ldr	r4, [pc, #36]	; (8000fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f001 fc7b 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fc27 	bl	8000808 <main>
  bx lr
 8000fba:	4770      	bx	lr
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fc4:	08002950 	.word	0x08002950
  ldr r2, =_sbss
 8000fc8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fcc:	2000020c 	.word	0x2000020c

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x28>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f923 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff feec 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f93b 	bl	800129a <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f903 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000060 	.word	0x20000060
 8001058:	20000068 	.word	0x20000068
 800105c:	20000064 	.word	0x20000064

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_IncTick+0x20>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000068 	.word	0x20000068
 8001080:	20000208 	.word	0x20000208

08001084 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000208 	.word	0x20000208

08001098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4906      	ldr	r1, [pc, #24]	; (8001130 <__NVIC_EnableIRQ+0x34>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff90 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff2d 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff42 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff35 	bl	80010fc <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	e169      	b.n	800159c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8158 	bne.w	8001596 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a9a      	ldr	r2, [pc, #616]	; (8001554 <HAL_GPIO_Init+0x2a0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d05e      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
 80012f0:	4a98      	ldr	r2, [pc, #608]	; (8001554 <HAL_GPIO_Init+0x2a0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d875      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 80012f6:	4a98      	ldr	r2, [pc, #608]	; (8001558 <HAL_GPIO_Init+0x2a4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d058      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
 80012fc:	4a96      	ldr	r2, [pc, #600]	; (8001558 <HAL_GPIO_Init+0x2a4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d86f      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 8001302:	4a96      	ldr	r2, [pc, #600]	; (800155c <HAL_GPIO_Init+0x2a8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d052      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
 8001308:	4a94      	ldr	r2, [pc, #592]	; (800155c <HAL_GPIO_Init+0x2a8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d869      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 800130e:	4a94      	ldr	r2, [pc, #592]	; (8001560 <HAL_GPIO_Init+0x2ac>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d04c      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
 8001314:	4a92      	ldr	r2, [pc, #584]	; (8001560 <HAL_GPIO_Init+0x2ac>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d863      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 800131a:	4a92      	ldr	r2, [pc, #584]	; (8001564 <HAL_GPIO_Init+0x2b0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d046      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
 8001320:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_GPIO_Init+0x2b0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d85d      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 8001326:	2b12      	cmp	r3, #18
 8001328:	d82a      	bhi.n	8001380 <HAL_GPIO_Init+0xcc>
 800132a:	2b12      	cmp	r3, #18
 800132c:	d859      	bhi.n	80013e2 <HAL_GPIO_Init+0x12e>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <HAL_GPIO_Init+0x80>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	080013af 	.word	0x080013af
 8001338:	08001389 	.word	0x08001389
 800133c:	0800139b 	.word	0x0800139b
 8001340:	080013dd 	.word	0x080013dd
 8001344:	080013e3 	.word	0x080013e3
 8001348:	080013e3 	.word	0x080013e3
 800134c:	080013e3 	.word	0x080013e3
 8001350:	080013e3 	.word	0x080013e3
 8001354:	080013e3 	.word	0x080013e3
 8001358:	080013e3 	.word	0x080013e3
 800135c:	080013e3 	.word	0x080013e3
 8001360:	080013e3 	.word	0x080013e3
 8001364:	080013e3 	.word	0x080013e3
 8001368:	080013e3 	.word	0x080013e3
 800136c:	080013e3 	.word	0x080013e3
 8001370:	080013e3 	.word	0x080013e3
 8001374:	080013e3 	.word	0x080013e3
 8001378:	08001391 	.word	0x08001391
 800137c:	080013a5 	.word	0x080013a5
 8001380:	4a79      	ldr	r2, [pc, #484]	; (8001568 <HAL_GPIO_Init+0x2b4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001386:	e02c      	b.n	80013e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e029      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e024      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	3308      	adds	r3, #8
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e01f      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	330c      	adds	r3, #12
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e01a      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013b6:	2304      	movs	r3, #4
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e013      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c4:	2308      	movs	r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	611a      	str	r2, [r3, #16]
          break;
 80013ce:	e009      	b.n	80013e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d0:	2308      	movs	r3, #8
 80013d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	615a      	str	r2, [r3, #20]
          break;
 80013da:	e003      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
          break;
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x130>
          break;
 80013e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2bff      	cmp	r3, #255	; 0xff
 80013e8:	d801      	bhi.n	80013ee <HAL_GPIO_Init+0x13a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_Init+0x13e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3304      	adds	r3, #4
 80013f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2bff      	cmp	r3, #255	; 0xff
 80013f8:	d802      	bhi.n	8001400 <HAL_GPIO_Init+0x14c>
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	e002      	b.n	8001406 <HAL_GPIO_Init+0x152>
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3b08      	subs	r3, #8
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	210f      	movs	r1, #15
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	6a39      	ldr	r1, [r7, #32]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80b1 	beq.w	8001596 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001434:	4b4d      	ldr	r3, [pc, #308]	; (800156c <HAL_GPIO_Init+0x2b8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x2b8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_GPIO_Init+0x2b8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800144c:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_GPIO_Init+0x2bc>)
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a40      	ldr	r2, [pc, #256]	; (8001574 <HAL_GPIO_Init+0x2c0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d013      	beq.n	80014a0 <HAL_GPIO_Init+0x1ec>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3f      	ldr	r2, [pc, #252]	; (8001578 <HAL_GPIO_Init+0x2c4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d00d      	beq.n	800149c <HAL_GPIO_Init+0x1e8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a3e      	ldr	r2, [pc, #248]	; (800157c <HAL_GPIO_Init+0x2c8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d007      	beq.n	8001498 <HAL_GPIO_Init+0x1e4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a3d      	ldr	r2, [pc, #244]	; (8001580 <HAL_GPIO_Init+0x2cc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_GPIO_Init+0x1e0>
 8001490:	2303      	movs	r3, #3
 8001492:	e006      	b.n	80014a2 <HAL_GPIO_Init+0x1ee>
 8001494:	2304      	movs	r3, #4
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1ee>
 8001498:	2302      	movs	r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1ee>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1ee>
 80014a0:	2300      	movs	r3, #0
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b2:	492f      	ldr	r1, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x2bc>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	492c      	ldr	r1, [pc, #176]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4928      	ldr	r1, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4922      	ldr	r1, [pc, #136]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	491e      	ldr	r1, [pc, #120]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 800150c:	4013      	ands	r3, r2
 800150e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4918      	ldr	r1, [pc, #96]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	4914      	ldr	r1, [pc, #80]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 8001534:	4013      	ands	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d021      	beq.n	8001588 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e021      	b.n	8001596 <HAL_GPIO_Init+0x2e2>
 8001552:	bf00      	nop
 8001554:	10320000 	.word	0x10320000
 8001558:	10310000 	.word	0x10310000
 800155c:	10220000 	.word	0x10220000
 8001560:	10210000 	.word	0x10210000
 8001564:	10120000 	.word	0x10120000
 8001568:	10110000 	.word	0x10110000
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	40010800 	.word	0x40010800
 8001578:	40010c00 	.word	0x40010c00
 800157c:	40011000 	.word	0x40011000
 8001580:	40011400 	.word	0x40011400
 8001584:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_GPIO_Init+0x304>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	43db      	mvns	r3, r3
 8001590:	4909      	ldr	r1, [pc, #36]	; (80015b8 <HAL_GPIO_Init+0x304>)
 8001592:	4013      	ands	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f47f ae8e 	bne.w	80012c8 <HAL_GPIO_Init+0x14>
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	372c      	adds	r7, #44	; 0x2c
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e001      	b.n	80015de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001600:	887a      	ldrh	r2, [r7, #2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001606:	e003      	b.n	8001610 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	041a      	lsls	r2, r3, #16
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43d9      	mvns	r1, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	611a      	str	r2, [r3, #16]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e12b      	b.n	80018b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fbdc 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2224      	movs	r2, #36	; 0x24
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b0:	f000 fcd8 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a81      	ldr	r2, [pc, #516]	; (80018c0 <HAL_I2C_Init+0x274>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d807      	bhi.n	80016d0 <HAL_I2C_Init+0x84>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a80      	ldr	r2, [pc, #512]	; (80018c4 <HAL_I2C_Init+0x278>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	bf94      	ite	ls
 80016c8:	2301      	movls	r3, #1
 80016ca:	2300      	movhi	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e006      	b.n	80016de <HAL_I2C_Init+0x92>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a7d      	ldr	r2, [pc, #500]	; (80018c8 <HAL_I2C_Init+0x27c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bf94      	ite	ls
 80016d8:	2301      	movls	r3, #1
 80016da:	2300      	movhi	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0e7      	b.n	80018b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a78      	ldr	r2, [pc, #480]	; (80018cc <HAL_I2C_Init+0x280>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9b      	lsrs	r3, r3, #18
 80016f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a6a      	ldr	r2, [pc, #424]	; (80018c0 <HAL_I2C_Init+0x274>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d802      	bhi.n	8001720 <HAL_I2C_Init+0xd4>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3301      	adds	r3, #1
 800171e:	e009      	b.n	8001734 <HAL_I2C_Init+0xe8>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a69      	ldr	r2, [pc, #420]	; (80018d0 <HAL_I2C_Init+0x284>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	430b      	orrs	r3, r1
 800173a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	495c      	ldr	r1, [pc, #368]	; (80018c0 <HAL_I2C_Init+0x274>)
 8001750:	428b      	cmp	r3, r1
 8001752:	d819      	bhi.n	8001788 <HAL_I2C_Init+0x13c>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e59      	subs	r1, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001762:	1c59      	adds	r1, r3, #1
 8001764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001768:	400b      	ands	r3, r1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_I2C_Init+0x138>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1e59      	subs	r1, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fbb1 f3f3 	udiv	r3, r1, r3
 800177c:	3301      	adds	r3, #1
 800177e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001782:	e051      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001784:	2304      	movs	r3, #4
 8001786:	e04f      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <HAL_I2C_Init+0x168>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	e012      	b.n	80017da <HAL_I2C_Init+0x18e>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	0099      	lsls	r1, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Init+0x196>
 80017de:	2301      	movs	r3, #1
 80017e0:	e022      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10e      	bne.n	8001808 <HAL_I2C_Init+0x1bc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1e58      	subs	r0, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	440b      	add	r3, r1
 80017f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	e00f      	b.n	8001828 <HAL_I2C_Init+0x1dc>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1e58      	subs	r0, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	0099      	lsls	r1, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	fbb0 f3f3 	udiv	r3, r0, r3
 800181e:	3301      	adds	r3, #1
 8001820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	6809      	ldr	r1, [r1, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6911      	ldr	r1, [r2, #16]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68d2      	ldr	r2, [r2, #12]
 8001862:	4311      	orrs	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	000186a0 	.word	0x000186a0
 80018c4:	001e847f 	.word	0x001e847f
 80018c8:	003d08ff 	.word	0x003d08ff
 80018cc:	431bde83 	.word	0x431bde83
 80018d0:	10624dd3 	.word	0x10624dd3

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e26c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8087 	beq.w	8001a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f4:	4b92      	ldr	r3, [pc, #584]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00c      	beq.n	800191a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001900:	4b8f      	ldr	r3, [pc, #572]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d112      	bne.n	8001932 <HAL_RCC_OscConfig+0x5e>
 800190c:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d10b      	bne.n	8001932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d06c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x12c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d168      	bne.n	8001a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e246      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x76>
 800193c:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e02e      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x98>
 8001952:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a7a      	ldr	r2, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b78      	ldr	r3, [pc, #480]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a77      	ldr	r2, [pc, #476]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0xbc>
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a71      	ldr	r2, [pc, #452]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 8001990:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a6a      	ldr	r2, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a67      	ldr	r2, [pc, #412]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fb68 	bl	8001084 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fb64 	bl	8001084 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1fa      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe4>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb54 	bl	8001084 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fb50 	bl	8001084 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1e6      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x10c>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x18c>
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x176>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1ba      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4939      	ldr	r1, [pc, #228]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb09 	bl	8001084 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb05 	bl	8001084 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e19b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4927      	ldr	r1, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x270>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fae8 	bl	8001084 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fae4 	bl	8001084 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e17a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03a      	beq.n	8001b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d019      	beq.n	8001b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fac8 	bl	8001084 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fac4 	bl	8001084 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e15a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f000 fab8 	bl	800208c <RCC_Delay>
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff faae 	bl	8001084 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff faaa 	bl	8001084 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d908      	bls.n	8001b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e140      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	42420000 	.word	0x42420000
 8001b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e9      	bne.n	8001b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a6 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b97      	ldr	r3, [pc, #604]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a93      	ldr	r2, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b8e      	ldr	r3, [pc, #568]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8a      	ldr	r2, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fa6b 	bl	8001084 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff fa67 	bl	8001084 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0fd      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x312>
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e02d      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x334>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	e01c      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x356>
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a6c      	ldr	r2, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e00b      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a63      	ldr	r2, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa1b 	bl	8001084 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fa17 	bl	8001084 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0ab      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ee      	beq.n	8001c52 <HAL_RCC_OscConfig+0x37e>
 8001c74:	e014      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa05 	bl	8001084 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fa01 	bl	8001084 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e095      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8081 	beq.w	8001dbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d061      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d146      	bne.n	8001d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f9d5 	bl	8001084 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff f9d1 	bl	8001084 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e067      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	492d      	ldr	r1, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a19      	ldr	r1, [r3, #32]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff f9a5 	bl	8001084 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f9a1 	bl	8001084 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e037      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46a>
 8001d5c:	e02f      	b.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f98e 	bl	8001084 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f98a 	bl	8001084 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e020      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x498>
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4965      	ldr	r1, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e073      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4936      	ldr	r1, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff f8de 	bl	8001084 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff f8da 	bl	8001084 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e053      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d210      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4922      	ldr	r1, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f83c 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	0800291c 	.word	0x0800291c
 8001fa0:	20000060 	.word	0x20000060
 8001fa4:	20000064 	.word	0x20000064

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x36>
 8001fd6:	e027      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	e027      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0c5b      	lsrs	r3, r3, #17
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	fb02 f203 	mul.w	r2, r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e004      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_RCC_GetSysClockFreq+0xa4>)
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	613b      	str	r3, [r7, #16]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800202a:	613b      	str	r3, [r7, #16]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	693b      	ldr	r3, [r7, #16]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	08002934 	.word	0x08002934
 8002048:	08002944 	.word	0x08002944
 800204c:	003d0900 	.word	0x003d0900

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <HAL_RCC_GetHCLKFreq+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000060 	.word	0x20000060

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002068:	f7ff fff2 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	0800292c 	.word	0x0800292c

0800208c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <RCC_Delay+0x34>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <RCC_Delay+0x38>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0a5b      	lsrs	r3, r3, #9
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a8:	bf00      	nop
  }
  while (Delay --);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	60fa      	str	r2, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <RCC_Delay+0x1c>
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000060 	.word	0x20000060
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e041      	b.n	800215e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe feee 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f000 fa5c 	bl	80025c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d001      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e03a      	b.n	80021f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_TIM_Base_Start_IT+0x98>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00e      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x58>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d009      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x58>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_TIM_Base_Start_IT+0x9c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x58>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <HAL_TIM_Base_Start_IT+0xa0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d010      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	e007      	b.n	80021f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800

0800220c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0202 	mvn.w	r2, #2
 8002240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f998 	bl	800258c <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f98b 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f99a 	bl	800259e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d020      	beq.n	80022bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0204 	mvn.w	r2, #4
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f972 	bl	800258c <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f965 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f974 	bl	800259e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d020      	beq.n	8002308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0208 	mvn.w	r2, #8
 80022d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2204      	movs	r2, #4
 80022de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f94c 	bl	800258c <HAL_TIM_IC_CaptureCallback>
 80022f4:	e005      	b.n	8002302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f93f 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f94e 	bl	800259e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d020      	beq.n	8002354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01b      	beq.n	8002354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f926 	bl	800258c <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f919 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f928 	bl	800259e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fc18 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa7f 	bl	800289a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8f8 	bl	80025b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0220 	mvn.w	r2, #32
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa52 	bl	8002888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_TIM_ConfigClockSource+0x1c>
 8002404:	2302      	movs	r3, #2
 8002406:	e0b4      	b.n	8002572 <HAL_TIM_ConfigClockSource+0x186>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002440:	d03e      	beq.n	80024c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002446:	f200 8087 	bhi.w	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	f000 8086 	beq.w	800255e <HAL_TIM_ConfigClockSource+0x172>
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	d87f      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d01a      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0xa6>
 800245c:	2b70      	cmp	r3, #112	; 0x70
 800245e:	d87b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b60      	cmp	r3, #96	; 0x60
 8002462:	d050      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0x11a>
 8002464:	2b60      	cmp	r3, #96	; 0x60
 8002466:	d877      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b50      	cmp	r3, #80	; 0x50
 800246a:	d03c      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0xfa>
 800246c:	2b50      	cmp	r3, #80	; 0x50
 800246e:	d873      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d058      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x13a>
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d86f      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d064      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b30      	cmp	r3, #48	; 0x30
 800247e:	d86b      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d060      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 8002484:	2b20      	cmp	r3, #32
 8002486:	d867      	bhi.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05c      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 800248c:	2b10      	cmp	r3, #16
 800248e:	d05a      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x15a>
 8002490:	e062      	b.n	8002558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f000 f974 	bl	800278e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	609a      	str	r2, [r3, #8]
      break;
 80024be:	e04f      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f000 f95d 	bl	800278e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e2:	609a      	str	r2, [r3, #8]
      break;
 80024e4:	e03c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f000 f8d4 	bl	80026a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2150      	movs	r1, #80	; 0x50
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f92b 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 8002504:	e02c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 f8f2 	bl	80026fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2160      	movs	r1, #96	; 0x60
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f91b 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 8002524:	e01c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8b4 	bl	80026a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f90b 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 8002544:	e00c      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f000 f902 	bl	800275a <TIM_ITRx_SetConfig>
      break;
 8002556:	e003      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e000      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800255e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
	...

080025c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <TIM_Base_SetConfig+0xd0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00b      	beq.n	80025f4 <TIM_Base_SetConfig+0x30>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d007      	beq.n	80025f4 <TIM_Base_SetConfig+0x30>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <TIM_Base_SetConfig+0xd4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x30>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2b      	ldr	r2, [pc, #172]	; (800269c <TIM_Base_SetConfig+0xd8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <TIM_Base_SetConfig+0xd0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00b      	beq.n	8002626 <TIM_Base_SetConfig+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d007      	beq.n	8002626 <TIM_Base_SetConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <TIM_Base_SetConfig+0xd4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1e      	ldr	r2, [pc, #120]	; (800269c <TIM_Base_SetConfig+0xd8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d108      	bne.n	8002638 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <TIM_Base_SetConfig+0xd0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f023 0201 	bic.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	611a      	str	r2, [r3, #16]
  }
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800

080026a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f023 0201 	bic.w	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f023 030a 	bic.w	r3, r3, #10
 80026dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0210 	bic.w	r2, r3, #16
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	031b      	lsls	r3, r3, #12
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002738:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	621a      	str	r2, [r3, #32]
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	f043 0307 	orr.w	r3, r3, #7
 800277c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800278e:	b480      	push	{r7}
 8002790:	b087      	sub	sp, #28
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	609a      	str	r2, [r3, #8]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e046      	b.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d009      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a10      	ldr	r2, [pc, #64]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10c      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800

08002888 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2600      	movs	r6, #0
 80028b0:	4d0c      	ldr	r5, [pc, #48]	; (80028e4 <__libc_init_array+0x38>)
 80028b2:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	f000 f822 	bl	8002904 <_init>
 80028c0:	2600      	movs	r6, #0
 80028c2:	4d0a      	ldr	r5, [pc, #40]	; (80028ec <__libc_init_array+0x40>)
 80028c4:	4c0a      	ldr	r4, [pc, #40]	; (80028f0 <__libc_init_array+0x44>)
 80028c6:	1b64      	subs	r4, r4, r5
 80028c8:	10a4      	asrs	r4, r4, #2
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f855 3b04 	ldr.w	r3, [r5], #4
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	08002948 	.word	0x08002948
 80028e8:	08002948 	.word	0x08002948
 80028ec:	08002948 	.word	0x08002948
 80028f0:	0800294c 	.word	0x0800294c

080028f4 <memset>:
 80028f4:	4603      	mov	r3, r0
 80028f6:	4402      	add	r2, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
