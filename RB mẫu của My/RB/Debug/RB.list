
RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf4  08003bf4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf4  08003bf4  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf4  08003bf4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000009c  08003c98  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003c98  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccfe  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  0002cdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0002fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0a  00000000  00000000  00030908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b3  00000000  00000000  00048412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2d9  00000000  00000000  000587c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c80  00000000  00000000  000e3af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b58 	.word	0x08003b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08003b58 	.word	0x08003b58

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fceb 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000110 	.word	0x20000110

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fcbb 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000110 	.word	0x20000110

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f001 f867 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f001 f861 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f001 f85b 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f001 f855 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f001 f84f 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f001 f849 	bl	80012f0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d108      	bne.n	80002b4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	4413      	add	r3, r2
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e008      	b.n	80002c6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	3340      	adds	r3, #64	; 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff3f 	bl	800014c <lcd_send_cmd>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <handle_mode>:
 #include "led_display.h"
#include "timer.h"

uint8_t modemode = 1;

void handle_mode(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	switch (modemode) {
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <handle_mode+0x40>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d816      	bhi.n	8000314 <handle_mode+0x3c>
 80002e6:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <handle_mode+0x14>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	080002fd 	.word	0x080002fd
 80002f0:	08000303 	.word	0x08000303
 80002f4:	08000309 	.word	0x08000309
 80002f8:	0800030f 	.word	0x0800030f
		case 1:
			normalstate();
 80002fc:	f000 fab4 	bl	8000868 <normalstate>
			break;
 8000300:	e008      	b.n	8000314 <handle_mode+0x3c>
		case 2:
			modify_red_duration();
 8000302:	f000 fa39 	bl	8000778 <modify_red_duration>
			break;
 8000306:	e005      	b.n	8000314 <handle_mode+0x3c>
		case 3:
			modify_yellow_duration();
 8000308:	f000 fa3c 	bl	8000784 <modify_yellow_duration>
			break;
 800030c:	e002      	b.n	8000314 <handle_mode+0x3c>
		case 4:
			modify_green_duration();
 800030e:	f000 fa3f 	bl	8000790 <modify_green_duration>
			break;
 8000312:	bf00      	nop

	}

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000000 	.word	0x20000000

0800031c <getKeyInput>:


#define BUTTON_PRESSED GPIO_PIN_SET  // Define when the button is considered pressed
#define BUTTON_RELEASED GPIO_PIN_RESET

void getKeyInput(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
    static uint8_t prev_button_states[4] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

    uint8_t button_states[4] = {
        HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin),
 8000322:	2110      	movs	r1, #16
 8000324:	482d      	ldr	r0, [pc, #180]	; (80003dc <getKeyInput+0xc0>)
 8000326:	f001 fa99 	bl	800185c <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 800032c:	703b      	strb	r3, [r7, #0]
        HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin),
 800032e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000332:	482a      	ldr	r0, [pc, #168]	; (80003dc <getKeyInput+0xc0>)
 8000334:	f001 fa92 	bl	800185c <HAL_GPIO_ReadPin>
 8000338:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 800033a:	707b      	strb	r3, [r7, #1]
        HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin),
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4827      	ldr	r0, [pc, #156]	; (80003e0 <getKeyInput+0xc4>)
 8000342:	f001 fa8b 	bl	800185c <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000348:	70bb      	strb	r3, [r7, #2]
        HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin)
 800034a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034e:	4824      	ldr	r0, [pc, #144]	; (80003e0 <getKeyInput+0xc4>)
 8000350:	f001 fa84 	bl	800185c <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
    uint8_t button_states[4] = {
 8000356:	70fb      	strb	r3, [r7, #3]
    };

    for (uint8_t i = 0; i < 4; i++) {
 8000358:	2300      	movs	r3, #0
 800035a:	71fb      	strb	r3, [r7, #7]
 800035c:	e036      	b.n	80003cc <getKeyInput+0xb0>
        if (button_states[i] == BUTTON_PRESSED && prev_button_states[i] == BUTTON_RELEASED) {
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	3308      	adds	r3, #8
 8000362:	443b      	add	r3, r7
 8000364:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d123      	bne.n	80003b4 <getKeyInput+0x98>
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <getKeyInput+0xc8>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d11e      	bne.n	80003b4 <getKeyInput+0x98>
            switch (i) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b03      	cmp	r3, #3
 800037a:	d81c      	bhi.n	80003b6 <getKeyInput+0x9a>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <getKeyInput+0x68>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	08000395 	.word	0x08000395
 8000388:	0800039d 	.word	0x0800039d
 800038c:	080003a5 	.word	0x080003a5
 8000390:	080003ad 	.word	0x080003ad
                case 0: button1_flag = 1; break;  // Button 1
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <getKeyInput+0xcc>)
 8000396:	2201      	movs	r2, #1
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e00c      	b.n	80003b6 <getKeyInput+0x9a>
                case 1: button2_flag = 1; break;  // Button 2
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <getKeyInput+0xd0>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]
 80003a2:	e008      	b.n	80003b6 <getKeyInput+0x9a>
                case 2: button3_flag = 1; break;  // Button 3
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <getKeyInput+0xd4>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
 80003aa:	e004      	b.n	80003b6 <getKeyInput+0x9a>
                case 3: button4_flag = 1; break;  // Button 4
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <getKeyInput+0xd8>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	e000      	b.n	80003b6 <getKeyInput+0x9a>
            }
        }
 80003b4:	bf00      	nop
        prev_button_states[i] = button_states[i];  // Update previous state
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	3208      	adds	r2, #8
 80003bc:	443a      	add	r2, r7
 80003be:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <getKeyInput+0xc8>)
 80003c4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 4; i++) {
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3301      	adds	r3, #1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9c5      	bls.n	800035e <getKeyInput+0x42>
    }
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	40010800 	.word	0x40010800
 80003e4:	200000bc 	.word	0x200000bc
 80003e8:	200000b8 	.word	0x200000b8
 80003ec:	200000b9 	.word	0x200000b9
 80003f0:	200000ba 	.word	0x200000ba
 80003f4:	200000bb 	.word	0x200000bb

080003f8 <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    getKeyInput();
 80003fc:	f7ff ff8e 	bl	800031c <getKeyInput>

    if (button1_flag) {
 8000400:	4b31      	ldr	r3, [pc, #196]	; (80004c8 <fsm_for_input_processing+0xd0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d010      	beq.n	800042c <fsm_for_input_processing+0x34>
        button1_flag = 0;
 800040a:	4b2f      	ldr	r3, [pc, #188]	; (80004c8 <fsm_for_input_processing+0xd0>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
        modemode = (modemode % 4) + 1;
 8000410:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <fsm_for_input_processing+0xd4>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	f003 0303 	and.w	r3, r3, #3
 8000418:	b2db      	uxtb	r3, r3
 800041a:	3301      	adds	r3, #1
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <fsm_for_input_processing+0xd4>)
 8000420:	701a      	strb	r2, [r3, #0]
        updatemode(modemode);
 8000422:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <fsm_for_input_processing+0xd4>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f9b8 	bl	800079c <updatemode>
    }

    if (button2_flag) {
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <fsm_for_input_processing+0xd8>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b00      	cmp	r3, #0
 8000434:	d016      	beq.n	8000464 <fsm_for_input_processing+0x6c>
        button2_flag = 0;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <fsm_for_input_processing+0xd8>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
        switch (modemode) {
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <fsm_for_input_processing+0xd4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b04      	cmp	r3, #4
 8000442:	d00c      	beq.n	800045e <fsm_for_input_processing+0x66>
 8000444:	2b04      	cmp	r3, #4
 8000446:	dc0e      	bgt.n	8000466 <fsm_for_input_processing+0x6e>
 8000448:	2b02      	cmp	r3, #2
 800044a:	d002      	beq.n	8000452 <fsm_for_input_processing+0x5a>
 800044c:	2b03      	cmp	r3, #3
 800044e:	d003      	beq.n	8000458 <fsm_for_input_processing+0x60>
 8000450:	e009      	b.n	8000466 <fsm_for_input_processing+0x6e>
            case 2: but2_red(); break;
 8000452:	f000 fb03 	bl	8000a5c <but2_red>
 8000456:	e006      	b.n	8000466 <fsm_for_input_processing+0x6e>
            case 3: but2_ye(); break;
 8000458:	f000 fb0a 	bl	8000a70 <but2_ye>
 800045c:	e003      	b.n	8000466 <fsm_for_input_processing+0x6e>
            case 4: but2_gr(); break;
 800045e:	f000 fb11 	bl	8000a84 <but2_gr>
 8000462:	e000      	b.n	8000466 <fsm_for_input_processing+0x6e>
        }
    }
 8000464:	bf00      	nop

    if (button3_flag) {
 8000466:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <fsm_for_input_processing+0xdc>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d016      	beq.n	800049e <fsm_for_input_processing+0xa6>
        button3_flag = 0;
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <fsm_for_input_processing+0xdc>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
        switch (modemode) {
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <fsm_for_input_processing+0xd4>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b04      	cmp	r3, #4
 800047c:	d00c      	beq.n	8000498 <fsm_for_input_processing+0xa0>
 800047e:	2b04      	cmp	r3, #4
 8000480:	dc0e      	bgt.n	80004a0 <fsm_for_input_processing+0xa8>
 8000482:	2b02      	cmp	r3, #2
 8000484:	d002      	beq.n	800048c <fsm_for_input_processing+0x94>
 8000486:	2b03      	cmp	r3, #3
 8000488:	d003      	beq.n	8000492 <fsm_for_input_processing+0x9a>
 800048a:	e009      	b.n	80004a0 <fsm_for_input_processing+0xa8>
            case 2: but3_red(); break;
 800048c:	f000 fb04 	bl	8000a98 <but3_red>
 8000490:	e006      	b.n	80004a0 <fsm_for_input_processing+0xa8>
            case 3: but3_ye(); break;
 8000492:	f000 fb0d 	bl	8000ab0 <but3_ye>
 8000496:	e003      	b.n	80004a0 <fsm_for_input_processing+0xa8>
            case 4: but3_gr(); break;
 8000498:	f000 fb16 	bl	8000ac8 <but3_gr>
 800049c:	e000      	b.n	80004a0 <fsm_for_input_processing+0xa8>
        }
    }
 800049e:	bf00      	nop

    if (button4_flag) {
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <fsm_for_input_processing+0xe0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d00a      	beq.n	80004c0 <fsm_for_input_processing+0xc8>
        button4_flag = 0;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <fsm_for_input_processing+0xe0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
        modemode = 1;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <fsm_for_input_processing+0xd4>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
        updatemode(modemode);
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <fsm_for_input_processing+0xd4>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f96e 	bl	800079c <updatemode>
    }

    update_handlemode();
 80004c0:	f000 fe48 	bl	8001154 <update_handlemode>
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000b8 	.word	0x200000b8
 80004cc:	20000000 	.word	0x20000000
 80004d0:	200000b9 	.word	0x200000b9
 80004d4:	200000ba 	.word	0x200000ba
 80004d8:	200000bb 	.word	0x200000bb

080004dc <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];

static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
    uint16_t button_pins[N0_OF_BUTTONS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_8};
 80004e2:	4a2d      	ldr	r2, [pc, #180]	; (8000598 <button_reading+0xbc>)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ea:	e883 0003 	stmia.w	r3, {r0, r1}

    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e048      	b.n	8000586 <button_reading+0xaa>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80004f4:	7bfa      	ldrb	r2, [r7, #15]
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	4928      	ldr	r1, [pc, #160]	; (800059c <button_reading+0xc0>)
 80004fa:	5c89      	ldrb	r1, [r1, r2]
 80004fc:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <button_reading+0xc4>)
 80004fe:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, button_pins[i]);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800050c:	7bfc      	ldrb	r4, [r7, #15]
 800050e:	4619      	mov	r1, r3
 8000510:	4824      	ldr	r0, [pc, #144]	; (80005a4 <button_reading+0xc8>)
 8000512:	f001 f9a3 	bl	800185c <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <button_reading+0xc0>)
 800051c:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <button_reading+0xc0>)
 8000522:	5cd2      	ldrb	r2, [r2, r3]
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	491e      	ldr	r1, [pc, #120]	; (80005a0 <button_reading+0xc4>)
 8000528:	5ccb      	ldrb	r3, [r1, r3]
 800052a:	429a      	cmp	r2, r3
 800052c:	d105      	bne.n	800053a <button_reading+0x5e>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 800052e:	7bfa      	ldrb	r2, [r7, #15]
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	491a      	ldr	r1, [pc, #104]	; (800059c <button_reading+0xc0>)
 8000534:	5c89      	ldrb	r1, [r1, r2]
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <button_reading+0xcc>)
 8000538:	54d1      	strb	r1, [r2, r3]
        }

        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <button_reading+0xcc>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d114      	bne.n	800056e <button_reading+0x92>
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <button_reading+0xd0>)
 8000548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054c:	2b63      	cmp	r3, #99	; 0x63
 800054e:	d809      	bhi.n	8000564 <button_reading+0x88>
                counterForButtonPress1s[i]++;
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <button_reading+0xd0>)
 8000554:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000558:	3201      	adds	r2, #1
 800055a:	b291      	uxth	r1, r2
 800055c:	4a13      	ldr	r2, [pc, #76]	; (80005ac <button_reading+0xd0>)
 800055e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000562:	e00d      	b.n	8000580 <button_reading+0xa4>
            } else {
                flagForButtonPress1s[i] = 1;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <button_reading+0xd4>)
 8000568:	2101      	movs	r1, #1
 800056a:	54d1      	strb	r1, [r2, r3]
 800056c:	e008      	b.n	8000580 <button_reading+0xa4>
            }
        } else {
            counterForButtonPress1s[i] = 0;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <button_reading+0xd0>)
 8000572:	2100      	movs	r1, #0
 8000574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <button_reading+0xd4>)
 800057c:	2100      	movs	r1, #0
 800057e:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < N0_OF_BUTTONS; i++) {
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	3301      	adds	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d9b3      	bls.n	80004f4 <button_reading+0x18>
        }
    }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	bf00      	nop
 8000598:	08003b70 	.word	0x08003b70
 800059c:	200000c4 	.word	0x200000c4
 80005a0:	200000c8 	.word	0x200000c8
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	200000c0 	.word	0x200000c0
 80005ac:	200000d0 	.word	0x200000d0
 80005b0:	200000cc 	.word	0x200000cc

080005b4 <led_red_blink>:
#include <string.h>
#include <stdio.h>
int count=0,cnt=0;

// function blink led
void led_red_blink(){
 80005b4:	b598      	push	{r3, r4, r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)== HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 80005b8:	2120      	movs	r1, #32
 80005ba:	4820      	ldr	r0, [pc, #128]	; (800063c <led_red_blink+0x88>)
 80005bc:	f001 f94e 	bl	800185c <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461c      	mov	r4, r3
 80005c4:	2108      	movs	r1, #8
 80005c6:	481d      	ldr	r0, [pc, #116]	; (800063c <led_red_blink+0x88>)
 80005c8:	f001 f948 	bl	800185c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	429c      	cmp	r4, r3
 80005d0:	d108      	bne.n	80005e4 <led_red_blink+0x30>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80005d2:	2108      	movs	r1, #8
 80005d4:	4819      	ldr	r0, [pc, #100]	; (800063c <led_red_blink+0x88>)
 80005d6:	f001 f970 	bl	80018ba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80005da:	2120      	movs	r1, #32
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <led_red_blink+0x88>)
 80005de:	f001 f96c 	bl	80018ba <HAL_GPIO_TogglePin>
 80005e2:	e009      	b.n	80005f8 <led_red_blink+0x44>
	}
	else {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <led_red_blink+0x88>)
 80005ea:	f001 f94e 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2108      	movs	r1, #8
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <led_red_blink+0x88>)
 80005f4:	f001 f949 	bl	800188a <HAL_GPIO_WritePin>
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)== HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <led_red_blink+0x8c>)
 80005fc:	f001 f92e 	bl	800185c <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	461c      	mov	r4, r3
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <led_red_blink+0x88>)
 8000608:	f001 f928 	bl	800185c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	429c      	cmp	r4, r3
 8000610:	d108      	bne.n	8000624 <led_red_blink+0x70>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <led_red_blink+0x8c>)
 8000616:	f001 f950 	bl	80018ba <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <led_red_blink+0x88>)
 800061e:	f001 f94c 	bl	80018ba <HAL_GPIO_TogglePin>
		else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
		}

}
 8000622:	e009      	b.n	8000638 <led_red_blink+0x84>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <led_red_blink+0x8c>)
 800062a:	f001 f92e 	bl	800188a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4802      	ldr	r0, [pc, #8]	; (800063c <led_red_blink+0x88>)
 8000634:	f001 f929 	bl	800188a <HAL_GPIO_WritePin>
}
 8000638:	bf00      	nop
 800063a:	bd98      	pop	{r3, r4, r7, pc}
 800063c:	40010c00 	.word	0x40010c00
 8000640:	40011000 	.word	0x40011000

08000644 <led_green_blink>:
void led_green_blink(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2120      	movs	r1, #32
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <led_green_blink+0x2c>)
 800064e:	f001 f91c 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000652:	2108      	movs	r1, #8
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <led_green_blink+0x2c>)
 8000656:	f001 f930 	bl	80018ba <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <led_green_blink+0x2c>)
 8000660:	f001 f913 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <led_green_blink+0x30>)
 8000668:	f001 f927 	bl	80018ba <HAL_GPIO_TogglePin>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40010c00 	.word	0x40010c00
 8000674:	40011000 	.word	0x40011000

08000678 <led_yellow_blink>:
void led_yellow_blink(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2108      	movs	r1, #8
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <led_yellow_blink+0x2c>)
 8000682:	f001 f902 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000686:	2120      	movs	r1, #32
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <led_yellow_blink+0x2c>)
 800068a:	f001 f916 	bl	80018ba <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <led_yellow_blink+0x30>)
 8000694:	f001 f8f9 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000698:	2140      	movs	r1, #64	; 0x40
 800069a:	4802      	ldr	r0, [pc, #8]	; (80006a4 <led_yellow_blink+0x2c>)
 800069c:	f001 f90d 	bl	80018ba <HAL_GPIO_TogglePin>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010c00 	.word	0x40010c00
 80006a8:	40011000 	.word	0x40011000

080006ac <on_red1_led>:


// 1: D3 - D4
void on_red1_led(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2120      	movs	r1, #32
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <on_red1_led+0x1c>)
 80006b6:	f001 f8e8 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2108      	movs	r1, #8
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <on_red1_led+0x1c>)
 80006c0:	f001 f8e3 	bl	800188a <HAL_GPIO_WritePin>

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010c00 	.word	0x40010c00

080006cc <on_yellow1_led>:
void on_yellow1_led(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2120      	movs	r1, #32
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <on_yellow1_led+0x1c>)
 80006d6:	f001 f8d8 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	4802      	ldr	r0, [pc, #8]	; (80006e8 <on_yellow1_led+0x1c>)
 80006e0:	f001 f8d3 	bl	800188a <HAL_GPIO_WritePin>

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40010c00 	.word	0x40010c00

080006ec <on_green1_led>:
void on_green1_led(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <on_green1_led+0x1c>)
 80006f6:	f001 f8c8 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <on_green1_led+0x1c>)
 8000700:	f001 f8c3 	bl	800188a <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010c00 	.word	0x40010c00

0800070c <on_red2_led>:
 // 2: D9 - D10
void on_red2_led(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <on_red2_led+0x1c>)
 8000716:	f001 f8b8 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <on_red2_led+0x20>)
 8000720:	f001 f8b3 	bl	800188a <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40011000 	.word	0x40011000
 800072c:	40010c00 	.word	0x40010c00

08000730 <on_yellow2_led>:
void on_yellow2_led(){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <on_yellow2_led+0x1c>)
 800073a:	f001 f8a6 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <on_yellow2_led+0x20>)
 8000744:	f001 f8a1 	bl	800188a <HAL_GPIO_WritePin>

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40011000 	.word	0x40011000
 8000750:	40010c00 	.word	0x40010c00

08000754 <on_green2_led>:
void on_green2_led(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <on_green2_led+0x1c>)
 800075e:	f001 f894 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <on_green2_led+0x20>)
 8000768:	f001 f88f 	bl	800188a <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40011000 	.word	0x40011000
 8000774:	40010c00 	.word	0x40010c00

08000778 <modify_red_duration>:
void off_led2(){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
}
void modify_red_duration()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

	led_red_blink();
 800077c:	f7ff ff1a 	bl	80005b4 <led_red_blink>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <modify_yellow_duration>:
void modify_yellow_duration()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0


	led_yellow_blink();
 8000788:	f7ff ff76 	bl	8000678 <led_yellow_blink>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <modify_green_duration>:
void modify_green_duration()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

	led_green_blink();
 8000794:	f7ff ff56 	bl	8000644 <led_green_blink>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <updatemode>:
uint8_t digit1, digit2,digit3,digit4 ;
int mode=1;



void updatemode(int modee){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	mode=modee;
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <updatemode+0x18>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000004 	.word	0x20000004

080007b8 <timeledlight>:
int new_yellow_duration = 0;
int new_green_duration = 0;
char mode_str[10];
char num1[10], num2[10];

void timeledlight(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	//display2number(num11, num22);
	sprintf(mode_str, "%d", mode);
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <timeledlight+0x88>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4920      	ldr	r1, [pc, #128]	; (8000844 <timeledlight+0x8c>)
 80007c4:	4820      	ldr	r0, [pc, #128]	; (8000848 <timeledlight+0x90>)
 80007c6:	f002 fd4d 	bl	8003264 <siprintf>
	    sprintf(num1, "%d", num11);
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <timeledlight+0x94>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	491c      	ldr	r1, [pc, #112]	; (8000844 <timeledlight+0x8c>)
 80007d2:	481f      	ldr	r0, [pc, #124]	; (8000850 <timeledlight+0x98>)
 80007d4:	f002 fd46 	bl	8003264 <siprintf>
	    sprintf(num2, "%d", num22);
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <timeledlight+0x9c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4919      	ldr	r1, [pc, #100]	; (8000844 <timeledlight+0x8c>)
 80007e0:	481d      	ldr	r0, [pc, #116]	; (8000858 <timeledlight+0xa0>)
 80007e2:	f002 fd3f 	bl	8003264 <siprintf>
	lcd_goto_XY(1, 8);
 80007e6:	2108      	movs	r1, #8
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fd52 	bl	8000292 <lcd_goto_XY>
	lcd_send_string("mode");
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <timeledlight+0xa4>)
 80007f0:	f7ff fd3a 	bl	8000268 <lcd_send_string>
	lcd_goto_XY(1, 13);
 80007f4:	210d      	movs	r1, #13
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fd4b 	bl	8000292 <lcd_goto_XY>
	lcd_send_string(mode_str);
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <timeledlight+0x90>)
 80007fe:	f7ff fd33 	bl	8000268 <lcd_send_string>

	lcd_goto_XY(1, 0);
 8000802:	2100      	movs	r1, #0
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fd44 	bl	8000292 <lcd_goto_XY>
	lcd_send_string("road1");
 800080a:	4815      	ldr	r0, [pc, #84]	; (8000860 <timeledlight+0xa8>)
 800080c:	f7ff fd2c 	bl	8000268 <lcd_send_string>
	lcd_goto_XY(1, 7);
 8000810:	2107      	movs	r1, #7
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff fd3d 	bl	8000292 <lcd_goto_XY>
	lcd_send_string(num1);
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <timeledlight+0x98>)
 800081a:	f7ff fd25 	bl	8000268 <lcd_send_string>

	lcd_goto_XY(2, 0);
 800081e:	2100      	movs	r1, #0
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fd36 	bl	8000292 <lcd_goto_XY>
	lcd_send_string("road2");
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <timeledlight+0xac>)
 8000828:	f7ff fd1e 	bl	8000268 <lcd_send_string>
	lcd_goto_XY(2, 7);
 800082c:	2107      	movs	r1, #7
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fd2f 	bl	8000292 <lcd_goto_XY>
	lcd_send_string(num2);
 8000834:	4808      	ldr	r0, [pc, #32]	; (8000858 <timeledlight+0xa0>)
 8000836:	f7ff fd17 	bl	8000268 <lcd_send_string>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000004 	.word	0x20000004
 8000844:	08003b78 	.word	0x08003b78
 8000848:	200000ec 	.word	0x200000ec
 800084c:	200000d8 	.word	0x200000d8
 8000850:	200000f8 	.word	0x200000f8
 8000854:	200000dc 	.word	0x200000dc
 8000858:	20000104 	.word	0x20000104
 800085c:	08003b7c 	.word	0x08003b7c
 8000860:	08003b84 	.word	0x08003b84
 8000864:	08003b8c 	.word	0x08003b8c

08000868 <normalstate>:
void normalstate(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_5 |GPIO_PIN_6, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2168      	movs	r1, #104	; 0x68
 8000870:	4845      	ldr	r0, [pc, #276]	; (8000988 <normalstate+0x120>)
 8000872:	f001 f80a 	bl	800188a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 , GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	4844      	ldr	r0, [pc, #272]	; (800098c <normalstate+0x124>)
 800087c:	f001 f805 	bl	800188a <HAL_GPIO_WritePin>

	if (cntred >= 0) {
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <normalstate+0x128>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db09      	blt.n	800089c <normalstate+0x34>
		num11=cntred--;
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <normalstate+0x128>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	4940      	ldr	r1, [pc, #256]	; (8000990 <normalstate+0x128>)
 8000890:	600a      	str	r2, [r1, #0]
 8000892:	4a40      	ldr	r2, [pc, #256]	; (8000994 <normalstate+0x12c>)
 8000894:	6013      	str	r3, [r2, #0]

		on_red2_led();
 8000896:	f7ff ff39 	bl	800070c <on_red2_led>
 800089a:	e01a      	b.n	80008d2 <normalstate+0x6a>
	}
	else if (cntgr >= 0)  	{
 800089c:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <normalstate+0x130>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db09      	blt.n	80008b8 <normalstate+0x50>

		on_green2_led();
 80008a4:	f7ff ff56 	bl	8000754 <on_green2_led>

		num11=cntgr--;
 80008a8:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <normalstate+0x130>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	493a      	ldr	r1, [pc, #232]	; (8000998 <normalstate+0x130>)
 80008b0:	600a      	str	r2, [r1, #0]
 80008b2:	4a38      	ldr	r2, [pc, #224]	; (8000994 <normalstate+0x12c>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e00c      	b.n	80008d2 <normalstate+0x6a>
	}
	else if (cntye >= 0) 	{
 80008b8:	4b38      	ldr	r3, [pc, #224]	; (800099c <normalstate+0x134>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db08      	blt.n	80008d2 <normalstate+0x6a>
		num11=cntye--;
 80008c0:	4b36      	ldr	r3, [pc, #216]	; (800099c <normalstate+0x134>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	4935      	ldr	r1, [pc, #212]	; (800099c <normalstate+0x134>)
 80008c8:	600a      	str	r2, [r1, #0]
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <normalstate+0x12c>)
 80008cc:	6013      	str	r3, [r2, #0]

		on_yellow2_led();
 80008ce:	f7ff ff2f 	bl	8000730 <on_yellow2_led>
	}

	if (cntgr2 >= 0)  	{
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <normalstate+0x138>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db09      	blt.n	80008ee <normalstate+0x86>
		num22=cntgr2--;
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <normalstate+0x138>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	492f      	ldr	r1, [pc, #188]	; (80009a0 <normalstate+0x138>)
 80008e2:	600a      	str	r2, [r1, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <normalstate+0x13c>)
 80008e6:	6013      	str	r3, [r2, #0]

		on_green1_led();
 80008e8:	f7ff ff00 	bl	80006ec <on_green1_led>
 80008ec:	e01a      	b.n	8000924 <normalstate+0xbc>

	}
	else if (cntye2 >= 0) 	{
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <normalstate+0x140>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db09      	blt.n	800090a <normalstate+0xa2>
		num22=cntye2--;
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <normalstate+0x140>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <normalstate+0x140>)
 80008fe:	600a      	str	r2, [r1, #0]
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <normalstate+0x13c>)
 8000902:	6013      	str	r3, [r2, #0]

		on_yellow1_led();
 8000904:	f7ff fee2 	bl	80006cc <on_yellow1_led>
 8000908:	e00c      	b.n	8000924 <normalstate+0xbc>
	}
	else if (cntred2 >= 0) 	{
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <normalstate+0x144>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db08      	blt.n	8000924 <normalstate+0xbc>
		num22=cntred2--;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <normalstate+0x144>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1e5a      	subs	r2, r3, #1
 8000918:	4924      	ldr	r1, [pc, #144]	; (80009ac <normalstate+0x144>)
 800091a:	600a      	str	r2, [r1, #0]
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <normalstate+0x13c>)
 800091e:	6013      	str	r3, [r2, #0]

		on_red1_led();
 8000920:	f7ff fec4 	bl	80006ac <on_red1_led>
	}

	if (cntred2 < 0 && cntgr2 < 0 && cntye2 < 0) {
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <normalstate+0x144>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	da13      	bge.n	8000954 <normalstate+0xec>
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <normalstate+0x138>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da0f      	bge.n	8000954 <normalstate+0xec>
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <normalstate+0x140>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da0b      	bge.n	8000954 <normalstate+0xec>
		cntred2 = red_duration;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <normalstate+0x148>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <normalstate+0x144>)
 8000942:	6013      	str	r3, [r2, #0]
		cntgr2 = green_duration ;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <normalstate+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <normalstate+0x138>)
 800094a:	6013      	str	r3, [r2, #0]
		cntye2 = yellow_duration;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <normalstate+0x150>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <normalstate+0x140>)
 8000952:	6013      	str	r3, [r2, #0]
	}

	if (cntred < 0 && cntgr < 0 && cntye < 0) {
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <normalstate+0x128>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	da13      	bge.n	8000984 <normalstate+0x11c>
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <normalstate+0x130>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da0f      	bge.n	8000984 <normalstate+0x11c>
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <normalstate+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da0b      	bge.n	8000984 <normalstate+0x11c>
		cntred = red_duration;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <normalstate+0x148>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <normalstate+0x128>)
 8000972:	6013      	str	r3, [r2, #0]
		cntgr = green_duration ;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <normalstate+0x14c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <normalstate+0x130>)
 800097a:	6013      	str	r3, [r2, #0]
		cntye = yellow_duration;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <normalstate+0x150>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <normalstate+0x134>)
 8000982:	6013      	str	r3, [r2, #0]
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010c00 	.word	0x40010c00
 800098c:	40011000 	.word	0x40011000
 8000990:	20000008 	.word	0x20000008
 8000994:	200000d8 	.word	0x200000d8
 8000998:	20000010 	.word	0x20000010
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	2000001c 	.word	0x2000001c
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	20000018 	.word	0x20000018
 80009ac:	20000014 	.word	0x20000014
 80009b0:	20000020 	.word	0x20000020
 80009b4:	20000028 	.word	0x20000028
 80009b8:	20000024 	.word	0x20000024

080009bc <update_numbers>:

void update_numbers(int duration) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    num11 = duration;
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <update_numbers+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
    num22 = duration;
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <update_numbers+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	200000dc 	.word	0x200000dc

080009e4 <increment_duration>:
void increment_duration(int *new_duration) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    *new_duration += 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1c5a      	adds	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
    if (*new_duration > 10) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b0a      	cmp	r3, #10
 80009fc:	dd02      	ble.n	8000a04 <increment_duration+0x20>
        *new_duration = 1;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
    }
    num11 = *new_duration;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <increment_duration+0x3c>)
 8000a0a:	6013      	str	r3, [r2, #0]
    num22 = *new_duration;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <increment_duration+0x40>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000d8 	.word	0x200000d8
 8000a24:	200000dc 	.word	0x200000dc

08000a28 <save_duration>:

void save_duration(int *new_duration, int *active_duration) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    if (*new_duration > 0) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dd0b      	ble.n	8000a52 <save_duration+0x2a>
        *active_duration = *new_duration;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	601a      	str	r2, [r3, #0]
        *new_duration = 0;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
        update_numbers(*active_duration);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffb5 	bl	80009bc <update_numbers>
    }
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <but2_red>:
// Button 2
void but2_red(){ increment_duration(&new_red_duration);}
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <but2_red+0x10>)
 8000a62:	f7ff ffbf 	bl	80009e4 <increment_duration>
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000e0 	.word	0x200000e0

08000a70 <but2_ye>:
void but2_ye() { increment_duration(&new_yellow_duration);}
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <but2_ye+0x10>)
 8000a76:	f7ff ffb5 	bl	80009e4 <increment_duration>
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e4 	.word	0x200000e4

08000a84 <but2_gr>:
void but2_gr() { increment_duration(&new_green_duration);}
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <but2_gr+0x10>)
 8000a8a:	f7ff ffab 	bl	80009e4 <increment_duration>
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <but3_red>:

// Button 3
void but3_red(){save_duration(&new_red_duration,  	&red_duration);}
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4902      	ldr	r1, [pc, #8]	; (8000aa8 <but3_red+0x10>)
 8000a9e:	4803      	ldr	r0, [pc, #12]	; (8000aac <but3_red+0x14>)
 8000aa0:	f7ff ffc2 	bl	8000a28 <save_duration>
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000020 	.word	0x20000020
 8000aac:	200000e0 	.word	0x200000e0

08000ab0 <but3_ye>:
void but3_ye() {save_duration(&new_yellow_duration, &yellow_duration);}
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4902      	ldr	r1, [pc, #8]	; (8000ac0 <but3_ye+0x10>)
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <but3_ye+0x14>)
 8000ab8:	f7ff ffb6 	bl	8000a28 <save_duration>
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	200000e4 	.word	0x200000e4

08000ac8 <but3_gr>:
void but3_gr() {save_duration(&new_green_duration, 	&green_duration);}
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4902      	ldr	r1, [pc, #8]	; (8000ad8 <but3_gr+0x10>)
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <but3_gr+0x14>)
 8000ad0:	f7ff ffaa 	bl	8000a28 <save_duration>
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	200000e8 	.word	0x200000e8

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fba2 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f81e 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 f8d8 	bl	8000ca0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000af0:	f000 f88a 	bl	8000c08 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000af4:	f000 f85a 	bl	8000bac <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <main+0x44>)
 8000afa:	f001 ffdf 	bl	8002abc <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000afe:	f7ff fb85 	bl	800020c <lcd_init>
//  SCH_Add_Task(handle_mode, 3, 10);
//  SCH_Add_Task(fsm_for_input_processing, 4, 10);
//  SCH_Add_Task(timeledlight, 500, 500);


  setTimer(1,10);
 8000b02:	210a      	movs	r1, #10
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 facf 	bl	80010a8 <setTimer>
//  setTimer(2,10);
  setTimer(5,1000);
 8000b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f000 faca 	bl	80010a8 <setTimer>
  setTimer(6, 1000);
 8000b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f000 fac5 	bl	80010a8 <setTimer>

  while (1)
  {
	 fsm_for_input_processing();
 8000b1e:	f7ff fc6b 	bl	80003f8 <fsm_for_input_processing>
 8000b22:	e7fc      	b.n	8000b1e <main+0x3e>
 8000b24:	20000164 	.word	0x20000164

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	; 0x40
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2228      	movs	r2, #40	; 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fb8c 	bl	8003254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b52:	2310      	movs	r3, #16
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b5e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fb5b 	bl	8002224 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b74:	f000 f97e 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fdc8 	bl	8002728 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b9e:	f000 f969 	bl	8000e74 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3740      	adds	r7, #64	; 0x40
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <MX_I2C1_Init+0x54>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_I2C1_Init+0x58>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_I2C1_Init+0x50>)
 8000bea:	f000 fe7f 	bl	80018ec <HAL_I2C_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 f93e 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000110 	.word	0x20000110
 8000c00:	40005400 	.word	0x40005400
 8000c04:	000186a0 	.word	0x000186a0

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c2e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c4e:	f001 fee5 	bl	8002a1c <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c58:	f000 f90c 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c6a:	f002 f869 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c74:	f000 f8fe 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_TIM2_Init+0x94>)
 8000c86:	f002 fa4b 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 f8f0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000164 	.word	0x20000164

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a6a      	ldr	r2, [pc, #424]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a64      	ldr	r2, [pc, #400]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a5e      	ldr	r2, [pc, #376]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b5c      	ldr	r3, [pc, #368]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a58      	ldr	r2, [pc, #352]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <MX_GPIO_Init+0x1c4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	4853      	ldr	r0, [pc, #332]	; (8000e68 <MX_GPIO_Init+0x1c8>)
 8000d1a:	f000 fdb6 	bl	800188a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d24:	4851      	ldr	r0, [pc, #324]	; (8000e6c <MX_GPIO_Init+0x1cc>)
 8000d26:	f000 fdb0 	bl	800188a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2128      	movs	r1, #40	; 0x28
 8000d2e:	4850      	ldr	r0, [pc, #320]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000d30:	f000 fdab 	bl	800188a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	4848      	ldr	r0, [pc, #288]	; (8000e6c <MX_GPIO_Init+0x1cc>)
 8000d4a:	f000 fc03 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4841      	ldr	r0, [pc, #260]	; (8000e68 <MX_GPIO_Init+0x1c8>)
 8000d62:	f000 fbf7 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d66:	2320      	movs	r3, #32
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483a      	ldr	r0, [pc, #232]	; (8000e68 <MX_GPIO_Init+0x1c8>)
 8000d7e:	f000 fbe9 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4834      	ldr	r0, [pc, #208]	; (8000e6c <MX_GPIO_Init+0x1cc>)
 8000d9c:	f000 fbda 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000da0:	2328      	movs	r3, #40	; 0x28
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	482e      	ldr	r0, [pc, #184]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000db8:	f000 fbcc 	bl	8001554 <HAL_GPIO_Init>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f249 01f8 	movw	r1, #37112	; 0x90f8
 8000dc2:	482b      	ldr	r0, [pc, #172]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000dc4:	f000 fd61 	bl	800188a <HAL_GPIO_WritePin>
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	4827      	ldr	r0, [pc, #156]	; (8000e6c <MX_GPIO_Init+0x1cc>)
 8000dce:	f000 fd5c 	bl	800188a <HAL_GPIO_WritePin>

  /* Configure GPIO pins for GPIOC: PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4619      	mov	r1, r3
 8000de8:	4820      	ldr	r0, [pc, #128]	; (8000e6c <MX_GPIO_Init+0x1cc>)
 8000dea:	f000 fbb3 	bl	8001554 <HAL_GPIO_Init>

  /* Configure GPIO pins for GPIOB: PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000e06:	f000 fba5 	bl	8001554 <HAL_GPIO_Init>

  /* Configure other GPIO pins as needed */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|red2_Pin
 8000e0a:	f249 03f8 	movw	r3, #37112	; 0x90f8
 8000e0e:	613b      	str	r3, [r7, #16]
                          |yellow2_Pin|green2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin|mode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000e24:	f000 fb96 	bl	8001554 <HAL_GPIO_Init>

  /* Configure input pins for buttons */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000e28:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_GPIO_Init+0x1d0>)
 8000e3e:	f000 fb89 	bl	8001554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_4_Pin;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_GPIO_Init+0x1c8>)
 8000e58:	f000 fb7c 	bl	8001554 <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_MspInit+0x5c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_MspInit+0x5c>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x5c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x5c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MspInit+0x60>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_MspInit+0x60>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_I2C_MspInit+0x90>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d132      	bne.n	8000f6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f22:	2312      	movs	r3, #18
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_I2C_MspInit+0x98>)
 8000f32:	f000 fb0f 	bl	8001554 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_I2C_MspInit+0x9c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_I2C_MspInit+0x9c>)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0x94>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40010000 	.word	0x40010000

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f94:	d113      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_TIM_Base_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_TIM_Base_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f000 fa97 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb8:	201c      	movs	r0, #28
 8000fba:	f000 fab0 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 f951 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM2_IRQHandler+0x10>)
 8001022:	f001 fd9d 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000164 	.word	0x20000164

08001030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <_sbrk+0x5c>)
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <_sbrk+0x60>)
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <_sbrk+0x64>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <_sbrk+0x68>)
 8001050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	429a      	cmp	r2, r3
 800105e:	d207      	bcs.n	8001070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001060:	f002 f8ce 	bl	8003200 <__errno>
 8001064:	4603      	mov	r3, r0
 8001066:	220c      	movs	r2, #12
 8001068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e009      	b.n	8001084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <_sbrk+0x64>)
 8001080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20005000 	.word	0x20005000
 8001090:	00000400 	.word	0x00000400
 8001094:	200001ac 	.word	0x200001ac
 8001098:	20000218 	.word	0x20000218

0800109c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <setTimer>:
#define TICK 100
int timer_flag[NUM_TIMERS];  // Timer flags for each timer
int timer_counter[NUM_TIMERS];  // Timer counters for each timer

void setTimer(int timer_id, int duration)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	if (timer_id >= 0 && timer_id < NUM_TIMERS)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db12      	blt.n	80010de <setTimer+0x36>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b09      	cmp	r3, #9
 80010bc:	dc0f      	bgt.n	80010de <setTimer+0x36>
	    {
	        timer_counter[timer_id] = duration / TICK;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <setTimer+0x40>)
 80010c2:	fb82 1203 	smull	r1, r2, r2, r3
 80010c6:	1152      	asrs	r2, r2, #5
 80010c8:	17db      	asrs	r3, r3, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <setTimer+0x44>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        timer_flag[timer_id] = 0;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <setTimer+0x48>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2100      	movs	r1, #0
 80010da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	51eb851f 	.word	0x51eb851f
 80010ec:	200001d8 	.word	0x200001d8
 80010f0:	200001b0 	.word	0x200001b0

080010f4 <timerRun>:
void timerRun(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_TIMERS; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e01c      	b.n	800113a <timerRun+0x46>
    {
        if (timer_counter[i] >= 0)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <timerRun+0x58>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db13      	blt.n	8001134 <timerRun+0x40>
        {
            timer_counter[i]--;
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <timerRun+0x58>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	1e5a      	subs	r2, r3, #1
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <timerRun+0x58>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if (timer_counter[i] <= 0)
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <timerRun+0x58>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dc04      	bgt.n	8001134 <timerRun+0x40>
            {
                timer_flag[i] = 1;
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <timerRun+0x5c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2101      	movs	r1, #1
 8001130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_TIMERS; i++)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b09      	cmp	r3, #9
 800113e:	dddf      	ble.n	8001100 <timerRun+0xc>
            }
        }
    }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	200001d8 	.word	0x200001d8
 8001150:	200001b0 	.word	0x200001b0

08001154 <update_handlemode>:
void update_handlemode(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if (timer_flag[1] == 1){
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <update_handlemode+0x64>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <update_handlemode+0x18>
		timeledlight();
 8001160:	f7ff fb2a 	bl	80007b8 <timeledlight>
		setTimer(1,10);
 8001164:	210a      	movs	r1, #10
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff ff9e 	bl	80010a8 <setTimer>
	 }
	if (timer_flag[2] == 1) {
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <update_handlemode+0x64>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <update_handlemode+0x2c>
		button_reading();
 8001174:	f7ff f9b2 	bl	80004dc <button_reading>
		setTimer(2, 10);
 8001178:	210a      	movs	r1, #10
 800117a:	2002      	movs	r0, #2
 800117c:	f7ff ff94 	bl	80010a8 <setTimer>
	}
	if (timer_flag[5] == 1) {
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <update_handlemode+0x64>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <update_handlemode+0x42>
		handle_mode();
 8001188:	f7ff f8a6 	bl	80002d8 <handle_mode>
		setTimer(5, 1000);
 800118c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001190:	2005      	movs	r0, #5
 8001192:	f7ff ff89 	bl	80010a8 <setTimer>
	}
	if (timer_flag[6] == 1) {
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <update_handlemode+0x64>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d109      	bne.n	80011b2 <update_handlemode+0x5e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <update_handlemode+0x68>)
 80011a4:	f000 fb89 	bl	80018ba <HAL_GPIO_TogglePin>
			setTimer(6, 1000);
 80011a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ac:	2006      	movs	r0, #6
 80011ae:	f7ff ff7b 	bl	80010a8 <setTimer>
		}
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001b0 	.word	0x200001b0
 80011bc:	40010800 	.word	0x40010800

080011c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d0:	d101      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x16>
	        timerRun();
 80011d2:	f7ff ff8f 	bl	80010f4 <timerRun>
	    }
//	if (timer_flag[6] == 1) {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
//			setTimer(6, 1000);
//		}
	}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ff5c 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011e6:	490c      	ldr	r1, [pc, #48]	; (8001218 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011fc:	4c09      	ldr	r4, [pc, #36]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f001 ffff 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120e:	f7ff fc67 	bl	8000ae0 <main>
  bx lr
 8001212:	4770      	bx	lr
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800121c:	08003bfc 	.word	0x08003bfc
  ldr r2, =_sbss
 8001220:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001224:	20000214 	.word	0x20000214

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_Init+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_Init+0x28>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 f947 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fe1a 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f95f 	bl	800153a <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 f927 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000002c 	.word	0x2000002c
 80012b0:	20000034 	.word	0x20000034
 80012b4:	20000030 	.word	0x20000030

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x1c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_IncTick+0x20>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <HAL_IncTick+0x20>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000034 	.word	0x20000034
 80012d8:	20000200 	.word	0x20000200

080012dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_GetTick+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000200 	.word	0x20000200

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff fff0 	bl	80012dc <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffe0 	bl	80012dc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000034 	.word	0x20000034

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <__NVIC_EnableIRQ+0x34>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff90 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff2d 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff42 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff90 	bl	8001428 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5f 	bl	80013d4 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e169      	b.n	800183c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001568:	2201      	movs	r2, #1
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8158 	bne.w	8001836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a9a      	ldr	r2, [pc, #616]	; (80017f4 <HAL_GPIO_Init+0x2a0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d05e      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 8001590:	4a98      	ldr	r2, [pc, #608]	; (80017f4 <HAL_GPIO_Init+0x2a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d875      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 8001596:	4a98      	ldr	r2, [pc, #608]	; (80017f8 <HAL_GPIO_Init+0x2a4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d058      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 800159c:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <HAL_GPIO_Init+0x2a4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d86f      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015a2:	4a96      	ldr	r2, [pc, #600]	; (80017fc <HAL_GPIO_Init+0x2a8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d052      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015a8:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x2a8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d869      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ae:	4a94      	ldr	r2, [pc, #592]	; (8001800 <HAL_GPIO_Init+0x2ac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d04c      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015b4:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x2ac>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d863      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ba:	4a92      	ldr	r2, [pc, #584]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d046      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015c0:	4a90      	ldr	r2, [pc, #576]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d85d      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d82a      	bhi.n	8001620 <HAL_GPIO_Init+0xcc>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d859      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <HAL_GPIO_Init+0x80>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	08001629 	.word	0x08001629
 80015dc:	0800163b 	.word	0x0800163b
 80015e0:	0800167d 	.word	0x0800167d
 80015e4:	08001683 	.word	0x08001683
 80015e8:	08001683 	.word	0x08001683
 80015ec:	08001683 	.word	0x08001683
 80015f0:	08001683 	.word	0x08001683
 80015f4:	08001683 	.word	0x08001683
 80015f8:	08001683 	.word	0x08001683
 80015fc:	08001683 	.word	0x08001683
 8001600:	08001683 	.word	0x08001683
 8001604:	08001683 	.word	0x08001683
 8001608:	08001683 	.word	0x08001683
 800160c:	08001683 	.word	0x08001683
 8001610:	08001683 	.word	0x08001683
 8001614:	08001683 	.word	0x08001683
 8001618:	08001631 	.word	0x08001631
 800161c:	08001645 	.word	0x08001645
 8001620:	4a79      	ldr	r2, [pc, #484]	; (8001808 <HAL_GPIO_Init+0x2b4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001626:	e02c      	b.n	8001682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e029      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	3304      	adds	r3, #4
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e024      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	3308      	adds	r3, #8
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e01f      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	330c      	adds	r3, #12
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e01a      	b.n	8001684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001656:	2304      	movs	r3, #4
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e013      	b.n	8001684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	611a      	str	r2, [r3, #16]
          break;
 800166e:	e009      	b.n	8001684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	615a      	str	r2, [r3, #20]
          break;
 800167a:	e003      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x130>
          break;
 8001682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d801      	bhi.n	800168e <HAL_GPIO_Init+0x13a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_Init+0x13e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d802      	bhi.n	80016a0 <HAL_GPIO_Init+0x14c>
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x152>
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3b08      	subs	r3, #8
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	210f      	movs	r1, #15
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	6a39      	ldr	r1, [r7, #32]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80b1 	beq.w	8001836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2bc>)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <HAL_GPIO_Init+0x2c0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d013      	beq.n	8001740 <HAL_GPIO_Init+0x1ec>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <HAL_GPIO_Init+0x2c4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_Init+0x1e8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <HAL_GPIO_Init+0x2c8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_Init+0x1e4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <HAL_GPIO_Init+0x2cc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_GPIO_Init+0x1e0>
 8001730:	2303      	movs	r3, #3
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001734:	2304      	movs	r3, #4
 8001736:	e004      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001738:	2302      	movs	r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001740:	2300      	movs	r3, #0
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	f002 0203 	and.w	r2, r2, #3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4093      	lsls	r3, r2
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001752:	492f      	ldr	r1, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x2bc>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	492c      	ldr	r1, [pc, #176]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4928      	ldr	r1, [pc, #160]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001784:	4013      	ands	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	491e      	ldr	r1, [pc, #120]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4918      	ldr	r1, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e021      	b.n	8001836 <HAL_GPIO_Init+0x2e2>
 80017f2:	bf00      	nop
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10310000 	.word	0x10310000
 80017fc:	10220000 	.word	0x10220000
 8001800:	10210000 	.word	0x10210000
 8001804:	10120000 	.word	0x10120000
 8001808:	10110000 	.word	0x10110000
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	40010800 	.word	0x40010800
 8001818:	40010c00 	.word	0x40010c00
 800181c:	40011000 	.word	0x40011000
 8001820:	40011400 	.word	0x40011400
 8001824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_GPIO_Init+0x304>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	4909      	ldr	r1, [pc, #36]	; (8001858 <HAL_GPIO_Init+0x304>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae8e 	bne.w	8001568 <HAL_GPIO_Init+0x14>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	372c      	adds	r7, #44	; 0x2c
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189a:	787b      	ldrb	r3, [r7, #1]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	041a      	lsls	r2, r3, #16
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12b      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fae6 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001950:	f001 f832 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a81      	ldr	r2, [pc, #516]	; (8001b60 <HAL_I2C_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d807      	bhi.n	8001970 <HAL_I2C_Init+0x84>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a80      	ldr	r2, [pc, #512]	; (8001b64 <HAL_I2C_Init+0x278>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e006      	b.n	800197e <HAL_I2C_Init+0x92>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a7d      	ldr	r2, [pc, #500]	; (8001b68 <HAL_I2C_Init+0x27c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	bf94      	ite	ls
 8001978:	2301      	movls	r3, #1
 800197a:	2300      	movhi	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	; (8001b6c <HAL_I2C_Init+0x280>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d802      	bhi.n	80019c0 <HAL_I2C_Init+0xd4>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	e009      	b.n	80019d4 <HAL_I2C_Init+0xe8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a69      	ldr	r2, [pc, #420]	; (8001b70 <HAL_I2C_Init+0x284>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	495c      	ldr	r1, [pc, #368]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d819      	bhi.n	8001a28 <HAL_I2C_Init+0x13c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_I2C_Init+0x138>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	e051      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x168>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x18e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x196>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fba8 	bl	80012dc <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	; (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f964 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f89c 	bl	8001d70 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa22 	bl	80020a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fa19 	bl	8002138 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d006      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d003      	beq.n	8001d9a <I2C_MasterRequestWrite+0x2a>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d98:	d108      	bne.n	8001dac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e00b      	b.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d107      	bne.n	8001dc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f84f 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dea:	d103      	bne.n	8001df4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e035      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e00:	d108      	bne.n	8001e14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	e01b      	b.n	8001e4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e14:	897b      	ldrh	r3, [r7, #10]
 8001e16:	11db      	asrs	r3, r3, #7
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f003 0306 	and.w	r3, r3, #6
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f063 030f 	orn	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <I2C_MasterRequestWrite+0xfc>)
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f898 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e010      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <I2C_MasterRequestWrite+0x100>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f888 	bl	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010008 	.word	0x00010008
 8001e70:	00010002 	.word	0x00010002

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e048      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d044      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7ff fa25 	bl	80012dc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d139      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10d      	bne.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	e00c      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d116      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e023      	b.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d093      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f76:	e071      	b.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d123      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e067      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d041      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd8:	f7ff f980 	bl	80012dc <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d302      	bcc.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d136      	bne.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4013      	ands	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	bf14      	ite	ne
 800200a:	2301      	movne	r3, #1
 800200c:	2300      	moveq	r3, #0
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e00b      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d016      	beq.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e021      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10c      	bne.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e00b      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f47f af6d 	bne.w	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f886 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e034      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d028      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7ff f905 	bl	80012dc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d11d      	bne.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d016      	beq.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d1c3      	bne.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	e034      	b.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f83e 	bl	80021c8 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e034      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7ff f8bd 	bl	80012dc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11d      	bne.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d016      	beq.n	80021b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d1c3      	bne.n	8002146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d11b      	bne.n	8002218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e272      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002244:	4b92      	ldr	r3, [pc, #584]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	d00c      	beq.n	800226a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d112      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
 800225c:	4b8c      	ldr	r3, [pc, #560]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d10b      	bne.n	8002282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226a:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d06c      	beq.n	8002350 <HAL_RCC_OscConfig+0x12c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d168      	bne.n	8002350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e24c      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x76>
 800228c:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7f      	ldr	r2, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e02e      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7a      	ldr	r2, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0xbc>
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a71      	ldr	r2, [pc, #452]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xd4>
 80022e0:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a67      	ldr	r2, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ffec 	bl	80012dc <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe ffe8 	bl	80012dc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e200      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xe4>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe ffd8 	bl	80012dc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe ffd4 	bl	80012dc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1ec      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x10c>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1c0      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4939      	ldr	r1, [pc, #228]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe ff8d 	bl	80012dc <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe ff89 	bl	80012dc <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1a1      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4927      	ldr	r1, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_OscConfig+0x270>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe ff6c 	bl	80012dc <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe ff68 	bl	80012dc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e180      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03a      	beq.n	80024a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7fe ff4c 	bl	80012dc <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe ff48 	bl	80012dc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e160      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_OscConfig+0x26c>)
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f000 faba 	bl	80029e0 <RCC_Delay>
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x274>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7fe ff32 	bl	80012dc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	e00f      	b.n	800249c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe ff2e 	bl	80012dc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d908      	bls.n	800249c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e146      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	42420000 	.word	0x42420000
 8002498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e9      	bne.n	800247c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a6 	beq.w	8002602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b8b      	ldr	r3, [pc, #556]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b88      	ldr	r3, [pc, #544]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7e      	ldr	r2, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fe feef 	bl	80012dc <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7fe feeb 	bl	80012dc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b64      	cmp	r3, #100	; 0x64
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e103      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4c8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e02d      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x334>
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a69      	ldr	r2, [pc, #420]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6213      	str	r3, [r2, #32]
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a66      	ldr	r2, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x356>
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a60      	ldr	r2, [pc, #384]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x36e>
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6213      	str	r3, [r2, #32]
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fe9f 	bl	80012dc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fe9b 	bl	80012dc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0b1      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x37e>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe fe89 	bl	80012dc <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe fe85 	bl	80012dc <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e09b      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8087 	beq.w	800271a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d061      	beq.n	80026dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d146      	bne.n	80026ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fe59 	bl	80012dc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe fe55 	bl	80012dc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e06d      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4921      	ldr	r1, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a19      	ldr	r1, [r3, #32]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	430b      	orrs	r3, r1
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fe29 	bl	80012dc <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fe25 	bl	80012dc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e03d      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
 80026ac:	e035      	b.n	800271a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe12 	bl	80012dc <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fe0e 	bl	80012dc <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e026      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x498>
 80026da:	e01e      	b.n	800271a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e019      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_OscConfig+0x500>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	429a      	cmp	r2, r3
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d0      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4965      	ldr	r1, [pc, #404]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0b8      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a58      	ldr	r2, [pc, #352]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	494d      	ldr	r1, [pc, #308]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e07f      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e073      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4936      	ldr	r1, [pc, #216]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7fe fd60 	bl	80012dc <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fd5c 	bl	80012dc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e053      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d210      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4922      	ldr	r1, [pc, #136]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e032      	b.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4916      	ldr	r1, [pc, #88]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b6:	f000 f821 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	490a      	ldr	r1, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	5ccb      	ldrb	r3, [r1, r3]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1cc>)
 80028d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fcbe 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08003b94 	.word	0x08003b94
 80028f4:	2000002c 	.word	0x2000002c
 80028f8:	20000030 	.word	0x20000030

080028fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_RCC_GetSysClockFreq+0x94>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x30>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x36>
 800292a:	e027      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800292e:	613b      	str	r3, [r7, #16]
      break;
 8002930:	e027      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_GetSysClockFreq+0x94>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0c5b      	lsrs	r3, r3, #17
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	fb03 f202 	mul.w	r2, r3, r2
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e004      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	613b      	str	r3, [r7, #16]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	613b      	str	r3, [r7, #16]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	693b      	ldr	r3, [r7, #16]
}
 8002984:	4618      	mov	r0, r3
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	08003bac 	.word	0x08003bac
 800299c:	08003bbc 	.word	0x08003bbc
 80029a0:	003d0900 	.word	0x003d0900

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	2000002c 	.word	0x2000002c

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff2 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	0a1b      	lsrs	r3, r3, #8
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08003ba4 	.word	0x08003ba4

080029e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <RCC_Delay+0x34>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <RCC_Delay+0x38>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029fc:	bf00      	nop
  }
  while (Delay --);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <RCC_Delay+0x1c>
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	2000002c 	.word	0x2000002c
 8002a18:	10624dd3 	.word	0x10624dd3

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fa9e 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fa5c 	bl	8002f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e03a      	b.n	8002b4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIM_Base_Start_IT+0x98>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00e      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d009      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0x58>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d010      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	e007      	b.n	8002b48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d020      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f998 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f98b 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f99a 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f972 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f965 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f974 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d020      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f94c 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f93f 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f94e 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f926 	bl	8002ee0 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f919 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f928 	bl	8002ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fa7a 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa7f 	bl	80031ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8f8 	bl	8002f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0220 	mvn.w	r2, #32
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa52 	bl	80031dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_ConfigClockSource+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0b4      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x186>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d03e      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0xd4>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	f200 8087 	bhi.w	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	f000 8086 	beq.w	8002eb2 <HAL_TIM_ConfigClockSource+0x172>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d87f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b70      	cmp	r3, #112	; 0x70
 8002dae:	d01a      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xa6>
 8002db0:	2b70      	cmp	r3, #112	; 0x70
 8002db2:	d87b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d050      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x11a>
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d877      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b50      	cmp	r3, #80	; 0x50
 8002dbe:	d03c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xfa>
 8002dc0:	2b50      	cmp	r3, #80	; 0x50
 8002dc2:	d873      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d058      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x13a>
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d86f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d064      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d86b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d060      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d867      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05c      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d05a      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	e062      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f000 f974 	bl	80030e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	609a      	str	r2, [r3, #8]
      break;
 8002e12:	e04f      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f000 f95d 	bl	80030e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e36:	609a      	str	r2, [r3, #8]
      break;
 8002e38:	e03c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f8d4 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2150      	movs	r1, #80	; 0x50
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f92b 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002e58:	e02c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f8f2 	bl	8003050 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2160      	movs	r1, #96	; 0x60
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f91b 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002e78:	e01c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f8b4 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2140      	movs	r1, #64	; 0x40
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f90b 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002e98:	e00c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 f902 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002eaa:	e003      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <TIM_Base_SetConfig+0xd4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x30>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <TIM_Base_SetConfig+0xd8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <TIM_Base_SetConfig+0xd4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <TIM_Base_SetConfig+0xd8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f023 0201 	bic.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 030a 	bic.w	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0210 	bic.w	r2, r3, #16
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f043 0307 	orr.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	431a      	orrs	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4313      	orrs	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	609a      	str	r2, [r3, #8]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e046      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000038 	.word	0x20000038

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2600      	movs	r6, #0
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 fc9c 	bl	8003b58 <_init>
 8003220:	2600      	movs	r6, #0
 8003222:	4d0a      	ldr	r5, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08003bf4 	.word	0x08003bf4
 8003248:	08003bf4 	.word	0x08003bf4
 800324c:	08003bf4 	.word	0x08003bf4
 8003250:	08003bf8 	.word	0x08003bf8

08003254 <memset>:
 8003254:	4603      	mov	r3, r0
 8003256:	4402      	add	r2, r0
 8003258:	4293      	cmp	r3, r2
 800325a:	d100      	bne.n	800325e <memset+0xa>
 800325c:	4770      	bx	lr
 800325e:	f803 1b01 	strb.w	r1, [r3], #1
 8003262:	e7f9      	b.n	8003258 <memset+0x4>

08003264 <siprintf>:
 8003264:	b40e      	push	{r1, r2, r3}
 8003266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800326a:	b500      	push	{lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	9006      	str	r0, [sp, #24]
 8003274:	9107      	str	r1, [sp, #28]
 8003276:	9104      	str	r1, [sp, #16]
 8003278:	4808      	ldr	r0, [pc, #32]	; (800329c <siprintf+0x38>)
 800327a:	4909      	ldr	r1, [pc, #36]	; (80032a0 <siprintf+0x3c>)
 800327c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003280:	9105      	str	r1, [sp, #20]
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	a902      	add	r1, sp, #8
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	f000 f868 	bl	800335c <_svfiprintf_r>
 800328c:	2200      	movs	r2, #0
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	b01c      	add	sp, #112	; 0x70
 8003294:	f85d eb04 	ldr.w	lr, [sp], #4
 8003298:	b003      	add	sp, #12
 800329a:	4770      	bx	lr
 800329c:	20000038 	.word	0x20000038
 80032a0:	ffff0208 	.word	0xffff0208

080032a4 <__ssputs_r>:
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	688e      	ldr	r6, [r1, #8]
 80032aa:	4682      	mov	sl, r0
 80032ac:	429e      	cmp	r6, r3
 80032ae:	460c      	mov	r4, r1
 80032b0:	4690      	mov	r8, r2
 80032b2:	461f      	mov	r7, r3
 80032b4:	d838      	bhi.n	8003328 <__ssputs_r+0x84>
 80032b6:	898a      	ldrh	r2, [r1, #12]
 80032b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032bc:	d032      	beq.n	8003324 <__ssputs_r+0x80>
 80032be:	6825      	ldr	r5, [r4, #0]
 80032c0:	6909      	ldr	r1, [r1, #16]
 80032c2:	3301      	adds	r3, #1
 80032c4:	eba5 0901 	sub.w	r9, r5, r1
 80032c8:	6965      	ldr	r5, [r4, #20]
 80032ca:	444b      	add	r3, r9
 80032cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032d4:	106d      	asrs	r5, r5, #1
 80032d6:	429d      	cmp	r5, r3
 80032d8:	bf38      	it	cc
 80032da:	461d      	movcc	r5, r3
 80032dc:	0553      	lsls	r3, r2, #21
 80032de:	d531      	bpl.n	8003344 <__ssputs_r+0xa0>
 80032e0:	4629      	mov	r1, r5
 80032e2:	f000 fb6f 	bl	80039c4 <_malloc_r>
 80032e6:	4606      	mov	r6, r0
 80032e8:	b950      	cbnz	r0, 8003300 <__ssputs_r+0x5c>
 80032ea:	230c      	movs	r3, #12
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f8ca 3000 	str.w	r3, [sl]
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	464a      	mov	r2, r9
 8003302:	6921      	ldr	r1, [r4, #16]
 8003304:	f000 face 	bl	80038a4 <memcpy>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	6126      	str	r6, [r4, #16]
 8003316:	444e      	add	r6, r9
 8003318:	6026      	str	r6, [r4, #0]
 800331a:	463e      	mov	r6, r7
 800331c:	6165      	str	r5, [r4, #20]
 800331e:	eba5 0509 	sub.w	r5, r5, r9
 8003322:	60a5      	str	r5, [r4, #8]
 8003324:	42be      	cmp	r6, r7
 8003326:	d900      	bls.n	800332a <__ssputs_r+0x86>
 8003328:	463e      	mov	r6, r7
 800332a:	4632      	mov	r2, r6
 800332c:	4641      	mov	r1, r8
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	f000 fac6 	bl	80038c0 <memmove>
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	2000      	movs	r0, #0
 8003338:	1b9b      	subs	r3, r3, r6
 800333a:	60a3      	str	r3, [r4, #8]
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	4433      	add	r3, r6
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	e7db      	b.n	80032fc <__ssputs_r+0x58>
 8003344:	462a      	mov	r2, r5
 8003346:	f000 fbb1 	bl	8003aac <_realloc_r>
 800334a:	4606      	mov	r6, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	d1e1      	bne.n	8003314 <__ssputs_r+0x70>
 8003350:	4650      	mov	r0, sl
 8003352:	6921      	ldr	r1, [r4, #16]
 8003354:	f000 face 	bl	80038f4 <_free_r>
 8003358:	e7c7      	b.n	80032ea <__ssputs_r+0x46>
	...

0800335c <_svfiprintf_r>:
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	4698      	mov	r8, r3
 8003362:	898b      	ldrh	r3, [r1, #12]
 8003364:	4607      	mov	r7, r0
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	460d      	mov	r5, r1
 800336a:	4614      	mov	r4, r2
 800336c:	b09d      	sub	sp, #116	; 0x74
 800336e:	d50e      	bpl.n	800338e <_svfiprintf_r+0x32>
 8003370:	690b      	ldr	r3, [r1, #16]
 8003372:	b963      	cbnz	r3, 800338e <_svfiprintf_r+0x32>
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	f000 fb25 	bl	80039c4 <_malloc_r>
 800337a:	6028      	str	r0, [r5, #0]
 800337c:	6128      	str	r0, [r5, #16]
 800337e:	b920      	cbnz	r0, 800338a <_svfiprintf_r+0x2e>
 8003380:	230c      	movs	r3, #12
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	e0d1      	b.n	800352e <_svfiprintf_r+0x1d2>
 800338a:	2340      	movs	r3, #64	; 0x40
 800338c:	616b      	str	r3, [r5, #20]
 800338e:	2300      	movs	r3, #0
 8003390:	9309      	str	r3, [sp, #36]	; 0x24
 8003392:	2320      	movs	r3, #32
 8003394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003398:	2330      	movs	r3, #48	; 0x30
 800339a:	f04f 0901 	mov.w	r9, #1
 800339e:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003548 <_svfiprintf_r+0x1ec>
 80033a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033aa:	4623      	mov	r3, r4
 80033ac:	469a      	mov	sl, r3
 80033ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033b2:	b10a      	cbz	r2, 80033b8 <_svfiprintf_r+0x5c>
 80033b4:	2a25      	cmp	r2, #37	; 0x25
 80033b6:	d1f9      	bne.n	80033ac <_svfiprintf_r+0x50>
 80033b8:	ebba 0b04 	subs.w	fp, sl, r4
 80033bc:	d00b      	beq.n	80033d6 <_svfiprintf_r+0x7a>
 80033be:	465b      	mov	r3, fp
 80033c0:	4622      	mov	r2, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	4638      	mov	r0, r7
 80033c6:	f7ff ff6d 	bl	80032a4 <__ssputs_r>
 80033ca:	3001      	adds	r0, #1
 80033cc:	f000 80aa 	beq.w	8003524 <_svfiprintf_r+0x1c8>
 80033d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033d2:	445a      	add	r2, fp
 80033d4:	9209      	str	r2, [sp, #36]	; 0x24
 80033d6:	f89a 3000 	ldrb.w	r3, [sl]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a2 	beq.w	8003524 <_svfiprintf_r+0x1c8>
 80033e0:	2300      	movs	r3, #0
 80033e2:	f04f 32ff 	mov.w	r2, #4294967295
 80033e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ea:	f10a 0a01 	add.w	sl, sl, #1
 80033ee:	9304      	str	r3, [sp, #16]
 80033f0:	9307      	str	r3, [sp, #28]
 80033f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033f6:	931a      	str	r3, [sp, #104]	; 0x68
 80033f8:	4654      	mov	r4, sl
 80033fa:	2205      	movs	r2, #5
 80033fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003400:	4851      	ldr	r0, [pc, #324]	; (8003548 <_svfiprintf_r+0x1ec>)
 8003402:	f000 fa41 	bl	8003888 <memchr>
 8003406:	9a04      	ldr	r2, [sp, #16]
 8003408:	b9d8      	cbnz	r0, 8003442 <_svfiprintf_r+0xe6>
 800340a:	06d0      	lsls	r0, r2, #27
 800340c:	bf44      	itt	mi
 800340e:	2320      	movmi	r3, #32
 8003410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003414:	0711      	lsls	r1, r2, #28
 8003416:	bf44      	itt	mi
 8003418:	232b      	movmi	r3, #43	; 0x2b
 800341a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800341e:	f89a 3000 	ldrb.w	r3, [sl]
 8003422:	2b2a      	cmp	r3, #42	; 0x2a
 8003424:	d015      	beq.n	8003452 <_svfiprintf_r+0xf6>
 8003426:	4654      	mov	r4, sl
 8003428:	2000      	movs	r0, #0
 800342a:	f04f 0c0a 	mov.w	ip, #10
 800342e:	9a07      	ldr	r2, [sp, #28]
 8003430:	4621      	mov	r1, r4
 8003432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003436:	3b30      	subs	r3, #48	; 0x30
 8003438:	2b09      	cmp	r3, #9
 800343a:	d94e      	bls.n	80034da <_svfiprintf_r+0x17e>
 800343c:	b1b0      	cbz	r0, 800346c <_svfiprintf_r+0x110>
 800343e:	9207      	str	r2, [sp, #28]
 8003440:	e014      	b.n	800346c <_svfiprintf_r+0x110>
 8003442:	eba0 0308 	sub.w	r3, r0, r8
 8003446:	fa09 f303 	lsl.w	r3, r9, r3
 800344a:	4313      	orrs	r3, r2
 800344c:	46a2      	mov	sl, r4
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	e7d2      	b.n	80033f8 <_svfiprintf_r+0x9c>
 8003452:	9b03      	ldr	r3, [sp, #12]
 8003454:	1d19      	adds	r1, r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	9103      	str	r1, [sp, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bfbb      	ittet	lt
 800345e:	425b      	neglt	r3, r3
 8003460:	f042 0202 	orrlt.w	r2, r2, #2
 8003464:	9307      	strge	r3, [sp, #28]
 8003466:	9307      	strlt	r3, [sp, #28]
 8003468:	bfb8      	it	lt
 800346a:	9204      	strlt	r2, [sp, #16]
 800346c:	7823      	ldrb	r3, [r4, #0]
 800346e:	2b2e      	cmp	r3, #46	; 0x2e
 8003470:	d10c      	bne.n	800348c <_svfiprintf_r+0x130>
 8003472:	7863      	ldrb	r3, [r4, #1]
 8003474:	2b2a      	cmp	r3, #42	; 0x2a
 8003476:	d135      	bne.n	80034e4 <_svfiprintf_r+0x188>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	3402      	adds	r4, #2
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	9203      	str	r2, [sp, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfb8      	it	lt
 8003486:	f04f 33ff 	movlt.w	r3, #4294967295
 800348a:	9305      	str	r3, [sp, #20]
 800348c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800354c <_svfiprintf_r+0x1f0>
 8003490:	2203      	movs	r2, #3
 8003492:	4650      	mov	r0, sl
 8003494:	7821      	ldrb	r1, [r4, #0]
 8003496:	f000 f9f7 	bl	8003888 <memchr>
 800349a:	b140      	cbz	r0, 80034ae <_svfiprintf_r+0x152>
 800349c:	2340      	movs	r3, #64	; 0x40
 800349e:	eba0 000a 	sub.w	r0, r0, sl
 80034a2:	fa03 f000 	lsl.w	r0, r3, r0
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	3401      	adds	r4, #1
 80034aa:	4303      	orrs	r3, r0
 80034ac:	9304      	str	r3, [sp, #16]
 80034ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b2:	2206      	movs	r2, #6
 80034b4:	4826      	ldr	r0, [pc, #152]	; (8003550 <_svfiprintf_r+0x1f4>)
 80034b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ba:	f000 f9e5 	bl	8003888 <memchr>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d038      	beq.n	8003534 <_svfiprintf_r+0x1d8>
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <_svfiprintf_r+0x1f8>)
 80034c4:	bb1b      	cbnz	r3, 800350e <_svfiprintf_r+0x1b2>
 80034c6:	9b03      	ldr	r3, [sp, #12]
 80034c8:	3307      	adds	r3, #7
 80034ca:	f023 0307 	bic.w	r3, r3, #7
 80034ce:	3308      	adds	r3, #8
 80034d0:	9303      	str	r3, [sp, #12]
 80034d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d4:	4433      	add	r3, r6
 80034d6:	9309      	str	r3, [sp, #36]	; 0x24
 80034d8:	e767      	b.n	80033aa <_svfiprintf_r+0x4e>
 80034da:	460c      	mov	r4, r1
 80034dc:	2001      	movs	r0, #1
 80034de:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e2:	e7a5      	b.n	8003430 <_svfiprintf_r+0xd4>
 80034e4:	2300      	movs	r3, #0
 80034e6:	f04f 0c0a 	mov.w	ip, #10
 80034ea:	4619      	mov	r1, r3
 80034ec:	3401      	adds	r4, #1
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	4620      	mov	r0, r4
 80034f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034f6:	3a30      	subs	r2, #48	; 0x30
 80034f8:	2a09      	cmp	r2, #9
 80034fa:	d903      	bls.n	8003504 <_svfiprintf_r+0x1a8>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0c5      	beq.n	800348c <_svfiprintf_r+0x130>
 8003500:	9105      	str	r1, [sp, #20]
 8003502:	e7c3      	b.n	800348c <_svfiprintf_r+0x130>
 8003504:	4604      	mov	r4, r0
 8003506:	2301      	movs	r3, #1
 8003508:	fb0c 2101 	mla	r1, ip, r1, r2
 800350c:	e7f0      	b.n	80034f0 <_svfiprintf_r+0x194>
 800350e:	ab03      	add	r3, sp, #12
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	462a      	mov	r2, r5
 8003514:	4638      	mov	r0, r7
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <_svfiprintf_r+0x1fc>)
 8003518:	a904      	add	r1, sp, #16
 800351a:	f3af 8000 	nop.w
 800351e:	1c42      	adds	r2, r0, #1
 8003520:	4606      	mov	r6, r0
 8003522:	d1d6      	bne.n	80034d2 <_svfiprintf_r+0x176>
 8003524:	89ab      	ldrh	r3, [r5, #12]
 8003526:	065b      	lsls	r3, r3, #25
 8003528:	f53f af2c 	bmi.w	8003384 <_svfiprintf_r+0x28>
 800352c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352e:	b01d      	add	sp, #116	; 0x74
 8003530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003534:	ab03      	add	r3, sp, #12
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	462a      	mov	r2, r5
 800353a:	4638      	mov	r0, r7
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <_svfiprintf_r+0x1fc>)
 800353e:	a904      	add	r1, sp, #16
 8003540:	f000 f87c 	bl	800363c <_printf_i>
 8003544:	e7eb      	b.n	800351e <_svfiprintf_r+0x1c2>
 8003546:	bf00      	nop
 8003548:	08003bbe 	.word	0x08003bbe
 800354c:	08003bc4 	.word	0x08003bc4
 8003550:	08003bc8 	.word	0x08003bc8
 8003554:	00000000 	.word	0x00000000
 8003558:	080032a5 	.word	0x080032a5

0800355c <_printf_common>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	4616      	mov	r6, r2
 8003562:	4699      	mov	r9, r3
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4607      	mov	r7, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	bfb8      	it	lt
 800356e:	4613      	movlt	r3, r2
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003576:	460c      	mov	r4, r1
 8003578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800357c:	b10a      	cbz	r2, 8003582 <_printf_common+0x26>
 800357e:	3301      	adds	r3, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	0699      	lsls	r1, r3, #26
 8003586:	bf42      	ittt	mi
 8003588:	6833      	ldrmi	r3, [r6, #0]
 800358a:	3302      	addmi	r3, #2
 800358c:	6033      	strmi	r3, [r6, #0]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d106      	bne.n	80035a4 <_printf_common+0x48>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	6832      	ldr	r2, [r6, #0]
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	dc28      	bgt.n	80035f6 <_printf_common+0x9a>
 80035a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a8:	1e13      	subs	r3, r2, #0
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	0692      	lsls	r2, r2, #26
 80035b2:	d42d      	bmi.n	8003610 <_printf_common+0xb4>
 80035b4:	4649      	mov	r1, r9
 80035b6:	4638      	mov	r0, r7
 80035b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035bc:	47c0      	blx	r8
 80035be:	3001      	adds	r0, #1
 80035c0:	d020      	beq.n	8003604 <_printf_common+0xa8>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	68e5      	ldr	r5, [r4, #12]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf18      	it	ne
 80035ce:	2500      	movne	r5, #0
 80035d0:	6832      	ldr	r2, [r6, #0]
 80035d2:	f04f 0600 	mov.w	r6, #0
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	bf08      	it	eq
 80035da:	1aad      	subeq	r5, r5, r2
 80035dc:	6922      	ldr	r2, [r4, #16]
 80035de:	bf08      	it	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bfc4      	itt	gt
 80035e8:	1a9b      	subgt	r3, r3, r2
 80035ea:	18ed      	addgt	r5, r5, r3
 80035ec:	341a      	adds	r4, #26
 80035ee:	42b5      	cmp	r5, r6
 80035f0:	d11a      	bne.n	8003628 <_printf_common+0xcc>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e008      	b.n	8003608 <_printf_common+0xac>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4652      	mov	r2, sl
 80035fa:	4649      	mov	r1, r9
 80035fc:	4638      	mov	r0, r7
 80035fe:	47c0      	blx	r8
 8003600:	3001      	adds	r0, #1
 8003602:	d103      	bne.n	800360c <_printf_common+0xb0>
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360c:	3501      	adds	r5, #1
 800360e:	e7c4      	b.n	800359a <_printf_common+0x3e>
 8003610:	2030      	movs	r0, #48	; 0x30
 8003612:	18e1      	adds	r1, r4, r3
 8003614:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800361e:	4422      	add	r2, r4
 8003620:	3302      	adds	r3, #2
 8003622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003626:	e7c5      	b.n	80035b4 <_printf_common+0x58>
 8003628:	2301      	movs	r3, #1
 800362a:	4622      	mov	r2, r4
 800362c:	4649      	mov	r1, r9
 800362e:	4638      	mov	r0, r7
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d0e6      	beq.n	8003604 <_printf_common+0xa8>
 8003636:	3601      	adds	r6, #1
 8003638:	e7d9      	b.n	80035ee <_printf_common+0x92>
	...

0800363c <_printf_i>:
 800363c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	7e0f      	ldrb	r7, [r1, #24]
 8003642:	4691      	mov	r9, r2
 8003644:	2f78      	cmp	r7, #120	; 0x78
 8003646:	4680      	mov	r8, r0
 8003648:	460c      	mov	r4, r1
 800364a:	469a      	mov	sl, r3
 800364c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800364e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003652:	d807      	bhi.n	8003664 <_printf_i+0x28>
 8003654:	2f62      	cmp	r7, #98	; 0x62
 8003656:	d80a      	bhi.n	800366e <_printf_i+0x32>
 8003658:	2f00      	cmp	r7, #0
 800365a:	f000 80d9 	beq.w	8003810 <_printf_i+0x1d4>
 800365e:	2f58      	cmp	r7, #88	; 0x58
 8003660:	f000 80a4 	beq.w	80037ac <_printf_i+0x170>
 8003664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800366c:	e03a      	b.n	80036e4 <_printf_i+0xa8>
 800366e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003672:	2b15      	cmp	r3, #21
 8003674:	d8f6      	bhi.n	8003664 <_printf_i+0x28>
 8003676:	a101      	add	r1, pc, #4	; (adr r1, 800367c <_printf_i+0x40>)
 8003678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036e9 	.word	0x080036e9
 8003684:	08003665 	.word	0x08003665
 8003688:	08003665 	.word	0x08003665
 800368c:	08003665 	.word	0x08003665
 8003690:	08003665 	.word	0x08003665
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003665 	.word	0x08003665
 800369c:	08003665 	.word	0x08003665
 80036a0:	08003665 	.word	0x08003665
 80036a4:	08003665 	.word	0x08003665
 80036a8:	080037f7 	.word	0x080037f7
 80036ac:	08003719 	.word	0x08003719
 80036b0:	080037d9 	.word	0x080037d9
 80036b4:	08003665 	.word	0x08003665
 80036b8:	08003665 	.word	0x08003665
 80036bc:	08003819 	.word	0x08003819
 80036c0:	08003665 	.word	0x08003665
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003665 	.word	0x08003665
 80036cc:	08003665 	.word	0x08003665
 80036d0:	080037e1 	.word	0x080037e1
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	602a      	str	r2, [r5, #0]
 80036dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0a4      	b.n	8003832 <_printf_i+0x1f6>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	6829      	ldr	r1, [r5, #0]
 80036ec:	0606      	lsls	r6, r0, #24
 80036ee:	f101 0304 	add.w	r3, r1, #4
 80036f2:	d50a      	bpl.n	800370a <_printf_i+0xce>
 80036f4:	680e      	ldr	r6, [r1, #0]
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	da03      	bge.n	8003704 <_printf_i+0xc8>
 80036fc:	232d      	movs	r3, #45	; 0x2d
 80036fe:	4276      	negs	r6, r6
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003704:	230a      	movs	r3, #10
 8003706:	485e      	ldr	r0, [pc, #376]	; (8003880 <_printf_i+0x244>)
 8003708:	e019      	b.n	800373e <_printf_i+0x102>
 800370a:	680e      	ldr	r6, [r1, #0]
 800370c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bf18      	it	ne
 8003714:	b236      	sxthne	r6, r6
 8003716:	e7ef      	b.n	80036f8 <_printf_i+0xbc>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1d19      	adds	r1, r3, #4
 800371e:	6029      	str	r1, [r5, #0]
 8003720:	0601      	lsls	r1, r0, #24
 8003722:	d501      	bpl.n	8003728 <_printf_i+0xec>
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0xf2>
 8003728:	0646      	lsls	r6, r0, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0xe8>
 800372c:	881e      	ldrh	r6, [r3, #0]
 800372e:	2f6f      	cmp	r7, #111	; 0x6f
 8003730:	bf0c      	ite	eq
 8003732:	2308      	moveq	r3, #8
 8003734:	230a      	movne	r3, #10
 8003736:	4852      	ldr	r0, [pc, #328]	; (8003880 <_printf_i+0x244>)
 8003738:	2100      	movs	r1, #0
 800373a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373e:	6865      	ldr	r5, [r4, #4]
 8003740:	2d00      	cmp	r5, #0
 8003742:	bfa8      	it	ge
 8003744:	6821      	ldrge	r1, [r4, #0]
 8003746:	60a5      	str	r5, [r4, #8]
 8003748:	bfa4      	itt	ge
 800374a:	f021 0104 	bicge.w	r1, r1, #4
 800374e:	6021      	strge	r1, [r4, #0]
 8003750:	b90e      	cbnz	r6, 8003756 <_printf_i+0x11a>
 8003752:	2d00      	cmp	r5, #0
 8003754:	d04d      	beq.n	80037f2 <_printf_i+0x1b6>
 8003756:	4615      	mov	r5, r2
 8003758:	fbb6 f1f3 	udiv	r1, r6, r3
 800375c:	fb03 6711 	mls	r7, r3, r1, r6
 8003760:	5dc7      	ldrb	r7, [r0, r7]
 8003762:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003766:	4637      	mov	r7, r6
 8003768:	42bb      	cmp	r3, r7
 800376a:	460e      	mov	r6, r1
 800376c:	d9f4      	bls.n	8003758 <_printf_i+0x11c>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d10b      	bne.n	800378a <_printf_i+0x14e>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	07de      	lsls	r6, r3, #31
 8003776:	d508      	bpl.n	800378a <_printf_i+0x14e>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6861      	ldr	r1, [r4, #4]
 800377c:	4299      	cmp	r1, r3
 800377e:	bfde      	ittt	le
 8003780:	2330      	movle	r3, #48	; 0x30
 8003782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003786:	f105 35ff 	addle.w	r5, r5, #4294967295
 800378a:	1b52      	subs	r2, r2, r5
 800378c:	6122      	str	r2, [r4, #16]
 800378e:	464b      	mov	r3, r9
 8003790:	4621      	mov	r1, r4
 8003792:	4640      	mov	r0, r8
 8003794:	f8cd a000 	str.w	sl, [sp]
 8003798:	aa03      	add	r2, sp, #12
 800379a:	f7ff fedf 	bl	800355c <_printf_common>
 800379e:	3001      	adds	r0, #1
 80037a0:	d14c      	bne.n	800383c <_printf_i+0x200>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	b004      	add	sp, #16
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ac:	4834      	ldr	r0, [pc, #208]	; (8003880 <_printf_i+0x244>)
 80037ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b2:	6829      	ldr	r1, [r5, #0]
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ba:	6029      	str	r1, [r5, #0]
 80037bc:	061d      	lsls	r5, r3, #24
 80037be:	d514      	bpl.n	80037ea <_printf_i+0x1ae>
 80037c0:	07df      	lsls	r7, r3, #31
 80037c2:	bf44      	itt	mi
 80037c4:	f043 0320 	orrmi.w	r3, r3, #32
 80037c8:	6023      	strmi	r3, [r4, #0]
 80037ca:	b91e      	cbnz	r6, 80037d4 <_printf_i+0x198>
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f023 0320 	bic.w	r3, r3, #32
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	2310      	movs	r3, #16
 80037d6:	e7af      	b.n	8003738 <_printf_i+0xfc>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	2378      	movs	r3, #120	; 0x78
 80037e2:	4828      	ldr	r0, [pc, #160]	; (8003884 <_printf_i+0x248>)
 80037e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037e8:	e7e3      	b.n	80037b2 <_printf_i+0x176>
 80037ea:	0659      	lsls	r1, r3, #25
 80037ec:	bf48      	it	mi
 80037ee:	b2b6      	uxthmi	r6, r6
 80037f0:	e7e6      	b.n	80037c0 <_printf_i+0x184>
 80037f2:	4615      	mov	r5, r2
 80037f4:	e7bb      	b.n	800376e <_printf_i+0x132>
 80037f6:	682b      	ldr	r3, [r5, #0]
 80037f8:	6826      	ldr	r6, [r4, #0]
 80037fa:	1d18      	adds	r0, r3, #4
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	6028      	str	r0, [r5, #0]
 8003800:	0635      	lsls	r5, r6, #24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	d501      	bpl.n	800380a <_printf_i+0x1ce>
 8003806:	6019      	str	r1, [r3, #0]
 8003808:	e002      	b.n	8003810 <_printf_i+0x1d4>
 800380a:	0670      	lsls	r0, r6, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0x1ca>
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	4615      	mov	r5, r2
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	e7ba      	b.n	800378e <_printf_i+0x152>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	2100      	movs	r1, #0
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	681d      	ldr	r5, [r3, #0]
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f82f 	bl	8003888 <memchr>
 800382a:	b108      	cbz	r0, 8003830 <_printf_i+0x1f4>
 800382c:	1b40      	subs	r0, r0, r5
 800382e:	6060      	str	r0, [r4, #4]
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	2300      	movs	r3, #0
 8003836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383a:	e7a8      	b.n	800378e <_printf_i+0x152>
 800383c:	462a      	mov	r2, r5
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	47d0      	blx	sl
 8003846:	3001      	adds	r0, #1
 8003848:	d0ab      	beq.n	80037a2 <_printf_i+0x166>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	079b      	lsls	r3, r3, #30
 800384e:	d413      	bmi.n	8003878 <_printf_i+0x23c>
 8003850:	68e0      	ldr	r0, [r4, #12]
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	4298      	cmp	r0, r3
 8003856:	bfb8      	it	lt
 8003858:	4618      	movlt	r0, r3
 800385a:	e7a4      	b.n	80037a6 <_printf_i+0x16a>
 800385c:	2301      	movs	r3, #1
 800385e:	4632      	mov	r2, r6
 8003860:	4649      	mov	r1, r9
 8003862:	4640      	mov	r0, r8
 8003864:	47d0      	blx	sl
 8003866:	3001      	adds	r0, #1
 8003868:	d09b      	beq.n	80037a2 <_printf_i+0x166>
 800386a:	3501      	adds	r5, #1
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	9903      	ldr	r1, [sp, #12]
 8003870:	1a5b      	subs	r3, r3, r1
 8003872:	42ab      	cmp	r3, r5
 8003874:	dcf2      	bgt.n	800385c <_printf_i+0x220>
 8003876:	e7eb      	b.n	8003850 <_printf_i+0x214>
 8003878:	2500      	movs	r5, #0
 800387a:	f104 0619 	add.w	r6, r4, #25
 800387e:	e7f5      	b.n	800386c <_printf_i+0x230>
 8003880:	08003bcf 	.word	0x08003bcf
 8003884:	08003be0 	.word	0x08003be0

08003888 <memchr>:
 8003888:	4603      	mov	r3, r0
 800388a:	b510      	push	{r4, lr}
 800388c:	b2c9      	uxtb	r1, r1
 800388e:	4402      	add	r2, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	4618      	mov	r0, r3
 8003894:	d101      	bne.n	800389a <memchr+0x12>
 8003896:	2000      	movs	r0, #0
 8003898:	e003      	b.n	80038a2 <memchr+0x1a>
 800389a:	7804      	ldrb	r4, [r0, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	428c      	cmp	r4, r1
 80038a0:	d1f6      	bne.n	8003890 <memchr+0x8>
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	4291      	cmp	r1, r2
 80038b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memmove>:
 80038c0:	4288      	cmp	r0, r1
 80038c2:	b510      	push	{r4, lr}
 80038c4:	eb01 0402 	add.w	r4, r1, r2
 80038c8:	d902      	bls.n	80038d0 <memmove+0x10>
 80038ca:	4284      	cmp	r4, r0
 80038cc:	4623      	mov	r3, r4
 80038ce:	d807      	bhi.n	80038e0 <memmove+0x20>
 80038d0:	1e43      	subs	r3, r0, #1
 80038d2:	42a1      	cmp	r1, r4
 80038d4:	d008      	beq.n	80038e8 <memmove+0x28>
 80038d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038de:	e7f8      	b.n	80038d2 <memmove+0x12>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4402      	add	r2, r0
 80038e4:	428a      	cmp	r2, r1
 80038e6:	d100      	bne.n	80038ea <memmove+0x2a>
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038f2:	e7f7      	b.n	80038e4 <memmove+0x24>

080038f4 <_free_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4605      	mov	r5, r0
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d040      	beq.n	800397e <_free_r+0x8a>
 80038fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003900:	1f0c      	subs	r4, r1, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfb8      	it	lt
 8003906:	18e4      	addlt	r4, r4, r3
 8003908:	f000 f910 	bl	8003b2c <__malloc_lock>
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <_free_r+0x8c>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	b933      	cbnz	r3, 8003920 <_free_r+0x2c>
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	6014      	str	r4, [r2, #0]
 8003916:	4628      	mov	r0, r5
 8003918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800391c:	f000 b90c 	b.w	8003b38 <__malloc_unlock>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d908      	bls.n	8003936 <_free_r+0x42>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	1821      	adds	r1, r4, r0
 8003928:	428b      	cmp	r3, r1
 800392a:	bf01      	itttt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	1809      	addeq	r1, r1, r0
 8003932:	6021      	streq	r1, [r4, #0]
 8003934:	e7ed      	b.n	8003912 <_free_r+0x1e>
 8003936:	461a      	mov	r2, r3
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b10b      	cbz	r3, 8003940 <_free_r+0x4c>
 800393c:	42a3      	cmp	r3, r4
 800393e:	d9fa      	bls.n	8003936 <_free_r+0x42>
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	1850      	adds	r0, r2, r1
 8003944:	42a0      	cmp	r0, r4
 8003946:	d10b      	bne.n	8003960 <_free_r+0x6c>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	4401      	add	r1, r0
 800394c:	1850      	adds	r0, r2, r1
 800394e:	4283      	cmp	r3, r0
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	d1e0      	bne.n	8003916 <_free_r+0x22>
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4401      	add	r1, r0
 800395a:	6011      	str	r1, [r2, #0]
 800395c:	6053      	str	r3, [r2, #4]
 800395e:	e7da      	b.n	8003916 <_free_r+0x22>
 8003960:	d902      	bls.n	8003968 <_free_r+0x74>
 8003962:	230c      	movs	r3, #12
 8003964:	602b      	str	r3, [r5, #0]
 8003966:	e7d6      	b.n	8003916 <_free_r+0x22>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	1821      	adds	r1, r4, r0
 800396c:	428b      	cmp	r3, r1
 800396e:	bf01      	itttt	eq
 8003970:	6819      	ldreq	r1, [r3, #0]
 8003972:	685b      	ldreq	r3, [r3, #4]
 8003974:	1809      	addeq	r1, r1, r0
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	6054      	str	r4, [r2, #4]
 800397c:	e7cb      	b.n	8003916 <_free_r+0x22>
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	20000204 	.word	0x20000204

08003984 <sbrk_aligned>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0e      	ldr	r6, [pc, #56]	; (80039c0 <sbrk_aligned+0x3c>)
 8003988:	460c      	mov	r4, r1
 800398a:	6831      	ldr	r1, [r6, #0]
 800398c:	4605      	mov	r5, r0
 800398e:	b911      	cbnz	r1, 8003996 <sbrk_aligned+0x12>
 8003990:	f000 f8bc 	bl	8003b0c <_sbrk_r>
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 f8b7 	bl	8003b0c <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d00a      	beq.n	80039b8 <sbrk_aligned+0x34>
 80039a2:	1cc4      	adds	r4, r0, #3
 80039a4:	f024 0403 	bic.w	r4, r4, #3
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d007      	beq.n	80039bc <sbrk_aligned+0x38>
 80039ac:	1a21      	subs	r1, r4, r0
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f8ac 	bl	8003b0c <_sbrk_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d101      	bne.n	80039bc <sbrk_aligned+0x38>
 80039b8:	f04f 34ff 	mov.w	r4, #4294967295
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	20000208 	.word	0x20000208

080039c4 <_malloc_r>:
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	1ccd      	adds	r5, r1, #3
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	4607      	mov	r7, r0
 80039da:	db01      	blt.n	80039e0 <_malloc_r+0x1c>
 80039dc:	42a9      	cmp	r1, r5
 80039de:	d905      	bls.n	80039ec <_malloc_r+0x28>
 80039e0:	230c      	movs	r3, #12
 80039e2:	2600      	movs	r6, #0
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4630      	mov	r0, r6
 80039e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ec:	4e2e      	ldr	r6, [pc, #184]	; (8003aa8 <_malloc_r+0xe4>)
 80039ee:	f000 f89d 	bl	8003b2c <__malloc_lock>
 80039f2:	6833      	ldr	r3, [r6, #0]
 80039f4:	461c      	mov	r4, r3
 80039f6:	bb34      	cbnz	r4, 8003a46 <_malloc_r+0x82>
 80039f8:	4629      	mov	r1, r5
 80039fa:	4638      	mov	r0, r7
 80039fc:	f7ff ffc2 	bl	8003984 <sbrk_aligned>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	4604      	mov	r4, r0
 8003a04:	d14d      	bne.n	8003aa2 <_malloc_r+0xde>
 8003a06:	6834      	ldr	r4, [r6, #0]
 8003a08:	4626      	mov	r6, r4
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d140      	bne.n	8003a90 <_malloc_r+0xcc>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	4631      	mov	r1, r6
 8003a12:	4638      	mov	r0, r7
 8003a14:	eb04 0803 	add.w	r8, r4, r3
 8003a18:	f000 f878 	bl	8003b0c <_sbrk_r>
 8003a1c:	4580      	cmp	r8, r0
 8003a1e:	d13a      	bne.n	8003a96 <_malloc_r+0xd2>
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	3503      	adds	r5, #3
 8003a24:	1a6d      	subs	r5, r5, r1
 8003a26:	f025 0503 	bic.w	r5, r5, #3
 8003a2a:	3508      	adds	r5, #8
 8003a2c:	2d0c      	cmp	r5, #12
 8003a2e:	bf38      	it	cc
 8003a30:	250c      	movcc	r5, #12
 8003a32:	4638      	mov	r0, r7
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7ff ffa5 	bl	8003984 <sbrk_aligned>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d02b      	beq.n	8003a96 <_malloc_r+0xd2>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	442b      	add	r3, r5
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	e00e      	b.n	8003a64 <_malloc_r+0xa0>
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	1b52      	subs	r2, r2, r5
 8003a4a:	d41e      	bmi.n	8003a8a <_malloc_r+0xc6>
 8003a4c:	2a0b      	cmp	r2, #11
 8003a4e:	d916      	bls.n	8003a7e <_malloc_r+0xba>
 8003a50:	1961      	adds	r1, r4, r5
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	6025      	str	r5, [r4, #0]
 8003a56:	bf18      	it	ne
 8003a58:	6059      	strne	r1, [r3, #4]
 8003a5a:	6863      	ldr	r3, [r4, #4]
 8003a5c:	bf08      	it	eq
 8003a5e:	6031      	streq	r1, [r6, #0]
 8003a60:	5162      	str	r2, [r4, r5]
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	4638      	mov	r0, r7
 8003a66:	f104 060b 	add.w	r6, r4, #11
 8003a6a:	f000 f865 	bl	8003b38 <__malloc_unlock>
 8003a6e:	f026 0607 	bic.w	r6, r6, #7
 8003a72:	1d23      	adds	r3, r4, #4
 8003a74:	1af2      	subs	r2, r6, r3
 8003a76:	d0b6      	beq.n	80039e6 <_malloc_r+0x22>
 8003a78:	1b9b      	subs	r3, r3, r6
 8003a7a:	50a3      	str	r3, [r4, r2]
 8003a7c:	e7b3      	b.n	80039e6 <_malloc_r+0x22>
 8003a7e:	6862      	ldr	r2, [r4, #4]
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	bf0c      	ite	eq
 8003a84:	6032      	streq	r2, [r6, #0]
 8003a86:	605a      	strne	r2, [r3, #4]
 8003a88:	e7ec      	b.n	8003a64 <_malloc_r+0xa0>
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	6864      	ldr	r4, [r4, #4]
 8003a8e:	e7b2      	b.n	80039f6 <_malloc_r+0x32>
 8003a90:	4634      	mov	r4, r6
 8003a92:	6876      	ldr	r6, [r6, #4]
 8003a94:	e7b9      	b.n	8003a0a <_malloc_r+0x46>
 8003a96:	230c      	movs	r3, #12
 8003a98:	4638      	mov	r0, r7
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	f000 f84c 	bl	8003b38 <__malloc_unlock>
 8003aa0:	e7a1      	b.n	80039e6 <_malloc_r+0x22>
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	e7de      	b.n	8003a64 <_malloc_r+0xa0>
 8003aa6:	bf00      	nop
 8003aa8:	20000204 	.word	0x20000204

08003aac <_realloc_r>:
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	460e      	mov	r6, r1
 8003ab6:	b921      	cbnz	r1, 8003ac2 <_realloc_r+0x16>
 8003ab8:	4611      	mov	r1, r2
 8003aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003abe:	f7ff bf81 	b.w	80039c4 <_malloc_r>
 8003ac2:	b92a      	cbnz	r2, 8003ad0 <_realloc_r+0x24>
 8003ac4:	f7ff ff16 	bl	80038f4 <_free_r>
 8003ac8:	4625      	mov	r5, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad0:	f000 f838 	bl	8003b44 <_malloc_usable_size_r>
 8003ad4:	4284      	cmp	r4, r0
 8003ad6:	4607      	mov	r7, r0
 8003ad8:	d802      	bhi.n	8003ae0 <_realloc_r+0x34>
 8003ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ade:	d812      	bhi.n	8003b06 <_realloc_r+0x5a>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f7ff ff6e 	bl	80039c4 <_malloc_r>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0ed      	beq.n	8003aca <_realloc_r+0x1e>
 8003aee:	42bc      	cmp	r4, r7
 8003af0:	4622      	mov	r2, r4
 8003af2:	4631      	mov	r1, r6
 8003af4:	bf28      	it	cs
 8003af6:	463a      	movcs	r2, r7
 8003af8:	f7ff fed4 	bl	80038a4 <memcpy>
 8003afc:	4631      	mov	r1, r6
 8003afe:	4640      	mov	r0, r8
 8003b00:	f7ff fef8 	bl	80038f4 <_free_r>
 8003b04:	e7e1      	b.n	8003aca <_realloc_r+0x1e>
 8003b06:	4635      	mov	r5, r6
 8003b08:	e7df      	b.n	8003aca <_realloc_r+0x1e>
	...

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	2300      	movs	r3, #0
 8003b10:	4d05      	ldr	r5, [pc, #20]	; (8003b28 <_sbrk_r+0x1c>)
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fd fa8a 	bl	8001030 <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	2000020c 	.word	0x2000020c

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f000 b811 	b.w	8003b54 <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000210 	.word	0x20000210

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f000 b80c 	b.w	8003b56 <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000210 	.word	0x20000210

08003b44 <_malloc_usable_size_r>:
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f18      	subs	r0, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbc      	itt	lt
 8003b4e:	580b      	ldrlt	r3, [r1, r0]
 8003b50:	18c0      	addlt	r0, r0, r3
 8003b52:	4770      	bx	lr

08003b54 <__retarget_lock_acquire_recursive>:
 8003b54:	4770      	bx	lr

08003b56 <__retarget_lock_release_recursive>:
 8003b56:	4770      	bx	lr

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
